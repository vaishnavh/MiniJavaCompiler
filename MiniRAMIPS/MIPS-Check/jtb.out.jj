//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MIPSParser)
import syntaxtree.*;
import java.util.Vector;


public class MIPSParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(MIPSParser)

SKIP :
{
   <WHITE_SPACE: " " | "\t" | "\n" | "\r" | "\f">
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
}

TOKEN :
{
   <SEMI: ";">
   | <COLON: ":">
   | <DOT: ".">
   | <COMMA: ",">
   | <LPAREN: "(">
   | <RPAREN: ")">
   | <PLUS: "+">
   | <MINUS: "-">
   | <TIMES: "*">
   | <BY: "/">
   | <MOD: "%">
   | <LSHIFT: "<<">
   | <RSHIFT: ">>">
   | <AMP: "&">
   | <CARET: "^">
   | <PIPE: "|">
   | <TILDE: "~">
   | <BANG: "!">
   | <ABS: "abs">
   | <ADD: "add">
   | <ADDCIU: "addciu">
   | <ADDU: "addu">
   | <AND: "and">
   | <B: "b">
   | <BAL: "bal">
   | <BC0F: "bc0f">
   | <BC0FL: "bc0fl">
   | <BC0T: "bc0t">
   | <BC0TLBC1F: "bc0tlbc1f">
   | <BC1FL: "bc1fl">
   | <BC1T: "bc1t">
   | <BC1TL: "bc1tl">
   | <BC2F: "bc2f">
   | <BC2FL: "bc2fl">
   | <BC2T: "bc2t">
   | <BC2TL: "bc2tl">
   | <BEQ: "beq">
   | <BEQL: "beql">
   | <BEQZ: "beqz">
   | <BEQZL: "beqzl">
   | <BGE: "bge">
   | <BGEL: "bgel">
   | <BGEU: "bgeu">
   | <BGEUL: "bgeul">
   | <BGEZ: "bgez">
   | <BGEZAL: "bgezal">
   | <BGEZALL: "bgezall">
   | <BGEZL: "bgezl">
   | <BGT: "bgt">
   | <BGTL: "bgtl">
   | <BGTU: "bgtu">
   | <BGTUL: "bgtul">
   | <BGTZ: "bgtz">
   | <BGTZL: "bgtzl">
   | <BLE: "ble">
   | <BLEL: "blel">
   | <BLEU: "bleu">
   | <BLEUL: "bleul">
   | <BLEZ: "blez">
   | <BLEZL: "blezl">
   | <BLT: "blt">
   | <BLTL: "bltl">
   | <BLTU: "bltu">
   | <BLTUL: "bltul">
   | <BLTZ: "bltz">
   | <BLTZAL: "bltzal">
   | <BLTZALL: "bltzall">
   | <BLTZL: "bltzl">
   | <BNE: "bne">
   | <BNEL: "bnel">
   | <BNEZ: "bnez">
   | <BNEZL: "bnezl">
   | <BREAK: "break">
   | <CACHE: "cache">
   | <CFC0: "cfc0">
   | <CFC1: "cfc1">
   | <CFC2: "cfc2">
   | <CTC0: "ctc0">
   | <CTC1: "ctc1">
   | <CTC2: "ctc2">
   | <DABS: "dabs">
   | <DADD: "dadd">
   | <DADDI: "daddi">
   | <DADDIU: "daddiu">
   | <DADDU: "daddu">
   | <DDIV: "ddiv">
   | <DDIVD: "ddivd">
   | <DDIVDU: "ddivdu">
   | <DDIVU: "ddivu">
   | <DIV: "div">
   | <DIVD: "divd">
   | <DIVDU: "divdu">
   | <DIVO: "divo">
   | <DIVOU: "divou">
   | <DIVU: "divu">
   | <DLA: "dla">
   | <DLI: "dli">
   | <DMADD16: "dmadd16">
   | <DMFC0: "dmfc0">
   | <DMFC1: "dmfc1">
   | <DMFC2: "dmfc2">
   | <DMTC0: "dmtc0">
   | <DMTC1: "dmtc1">
   | <DMTC2: "dmtc2">
   | <DMUL: "dmul">
   | <DMULO: "dmulo">
   | <DMULOU: "dmulou">
   | <DMULT: "dmult">
   | <DMULTU: "dmultu">
   | <DNEG: "dneg">
   | <DNEGU: "dnegu">
   | <DREM: "drem">
   | <DREMU: "dremu">
   | <DRET: "dret">
   | <DROL: "drol">
   | <DROR: "dror">
   | <DSLL: "dsll">
   | <DSLLV: "dsllv">
   | <DSLL32: "dsll32">
   | <DSRA: "dsra">
   | <DSRA32: "dsra32">
   | <DSRL: "dsrl">
   | <DSRLV: "dsrlv">
   | <DSRL32: "dsrl32">
   | <DSUB: "dsub">
   | <DSUBU: "dsubu">
   | <ERET: "eret">
   | <FFC: "ffc">
   | <FFS: "ffs">
   | <FLUSHD: "flushd">
   | <J: "j">
   | <JR: "jr">
   | <JAL: "jal">
   | <JALR: "jalr">
   | <LA: "la">
   | <LB: "lb">
   | <LBU: "lbu">
   | <LD: "ld">
   | <LDL: "ldl">
   | <LDR: "ldr">
   | <LDXC1: "ldxc1">
   | <LH: "lh">
   | <LHU: "lhu">
   | <LI: "li">
   | <LL: "ll">
   | <LLD: "lld">
   | <LUI: "lui">
   | <LW: "lw">
   | <LWC1: "lwc1">
   | <LWL: "lwl">
   | <LWR: "lwr">
   | <LWU: "lwu">
   | <LWXC1: "lwxc1">
   | <MADD: "madd">
   | <MADDU: "maddu">
   | <MAD: "mad">
   | <MADU: "madu">
   | <MADD16: "madd16">
   | <MAX: "max">
   | <MFC0: "mfc0">
   | <MFC1: "mfc1">
   | <MFC2: "mfc2">
   | <MFHI: "mfhi">
   | <MFLO: "mflo">
   | <MIN: "min">
   | <MOVE: "move">
   | <MOVF: "movf">
   | <MOVN: "movn">
   | <MOVT: "movt">
   | <MOVZ: "movz">
   | <MSUB: "msub">
   | <MSUBU: "msubu">
   | <MTC0: "mtc0">
   | <MTC1: "mtc1">
   | <MTC2: "mtc2">
   | <MTHI: "mthi">
   | <MTLO: "mtlo">
   | <MUL: "mul">
   | <MULU: "mulu">
   | <MULO: "mulo">
   | <MULOU: "mulou">
   | <MULT: "mult">
   | <MULTU: "multu">
   | <NEG: "neg">
   | <NEGU: "negu">
   | <NOP: "nop">
   | <NOR: "nor">
   | <NOT: "not">
   | <OR: "or">
   | <ORI: "ori">
   | <PREF: "pref">
   | <PREFX: "prefx">
   | <R2U: "r2u">
   | <RADD: "radd">
   | <REM: "rem">
   | <REMU: "remu">
   | <RFE: "rfe">
   | <RMUL: "rmul">
   | <ROL: "rol">
   | <ROR: "ror">
   | <RSUB: "rsub">
   | <SB: "sb">
   | <SC: "sc">
   | <SCD: "scd">
   | <SD: "sd">
   | <SDBBP: "sdbbp">
   | <SDC1: "sdc1">
   | <SDL: "sdl">
   | <SDR: "sdr">
   | <SDXC1: "sdxc1">
   | <SELSL: "selsl">
   | <SELSR: "selsr">
   | <SEQ: "seq">
   | <SGE: "sge">
   | <SGEU: "sgeu">
   | <SGT: "sgt">
   | <SGTU: "sgtu">
   | <SH: "sh">
   | <SLE: "sle">
   | <SLEU: "sleu">
   | <SLL: "sll">
   | <SLLV: "sllv">
   | <SLT: "slt">
   | <SLTI: "slti">
   | <SLTIU: "sltiu">
   | <SLTU: "sltu">
   | <SNE: "sne">
   | <SRA: "sra">
   | <SRAV: "srav">
   | <SRL: "srl">
   | <SRLV: "srlv">
   | <STANDBY: "standby">
   | <SUB: "sub">
   | <SUBU: "subu">
   | <SUSPEND: "suspend">
   | <SW: "sw">
   | <SWC1: "swc1">
   | <SWL: "swl">
   | <SWR: "swr">
   | <SWXC1: "swxc1">
   | <SYNC: "sync">
   | <SYSCALL: "syscall">
   | <TEQ: "teq">
   | <TEQI: "teqi">
   | <TGE: "tge">
   | <TGEI: "tgei">
   | <TGEIU: "tgeiu">
   | <TGEU: "tgeu">
   | <TLBP: "tlbp">
   | <TLBR: "tlbr">
   | <TLBWI: "tlbwi">
   | <TLBWR: "tlbwr">
   | <TLT: "tlt">
   | <TLTI: "tlti">
   | <TLTIU: "tltiu">
   | <TLTU: "tltu">
   | <TNE: "tne">
   | <TNEI: "tnei">
   | <U2R: "u2r">
   | <ULD: "uld">
   | <ULH: "ulh">
   | <ULHU: "ulhu">
   | <ULW: "ulw">
   | <USD: "usd">
   | <USHUSW: "ushusw">
   | <WAITI: "waiti">
   | <WB: "wb">
   | <XOR: "xor">
   | <XORI: "xori">
   | <ABS_S: "abs.s">
   | <ADD_S: "add.s">
   | <C_EQ_S: "c.eq.s">
   | <C_F_S: "c.f.s">
   | <C_LE_S: "c.le.s">
   | <C_LT_S: "c.lt.s">
   | <C_NGE_S: "c.nge.s">
   | <C_NGL_S: "c.ngl.s">
   | <C_NGT_S: "c.ngt.s">
   | <C_OLE_S: "c.ole.s">
   | <C_OLT_S: "c.olt.s">
   | <C_SEQ_S: "c.seq.s">
   | <C_SF_S: "c.sf.s">
   | <C_UEQ_S: "c.ueq.s">
   | <C_ULE_S: "c.ule.s">
   | <C_ULT_S: "c.ult.s">
   | <C_UN_S: "c.un.s">
   | <CEIL_L_D: "ceil.l.d">
   | <CEIL_L_S: "ceil.l.s">
   | <CEIL_W_D: "ceil.w.d">
   | <CEIL_W_S: "ceil.w.s">
   | <CVT_D_L: "cvt.d.l">
   | <CVT_D_S: "cvt.d.s">
   | <CVT_D_W: "cvt.d.w">
   | <CVT_L_D: "cvt.l.d">
   | <CVT_L_S: "cvt.l.s">
   | <CVT_S_D: "cvt.s.d">
   | <CVT_S_L: "cvt.s.l">
   | <CVT_S_W: "cvt.s.w">
   | <CVT_W_D: "cvt.w.d">
   | <CVT_W_S: "cvt.w.s">
   | <DIV_S: "div.s">
   | <FLOOR_L_D: "floor.l.d">
   | <FLOOR_L_S: "floor.l.s">
   | <FLOOR_W_D: "floor.w.d">
   | <FLOOR_W_S: "floor.w.s">
   | <L_D: "l.d">
   | <L_S: "l.s">
   | <LDC1: "ldc1">
   | <MADD_S: "madd.s">
   | <MOV_S: "mov.s">
   | <MOVF_S: "movf.s">
   | <MOVN_S: "movn.s">
   | <MOVT_S: "movt.s">
   | <MOVZ_S: "movz.s">
   | <MSUB_S: "msub.s">
   | <MUL_S: "mul.s">
   | <NEG_S: "neg.s">
   | <NMADD_S: "nmadd.s">
   | <NMSUB_S: "nmsub.s">
   | <RECIP_S: "recip.s">
   | <ROUND_L_D: "round.l.d">
   | <ROUND_L_S: "round.l.s">
   | <ROUND_W_D: "round.w.d">
   | <ROUND_W_S: "round.w.s">
   | <RSQRT_S: "rsqrt.s">
   | <S_D: "s.d">
   | <S_S: "s.s">
   | <SQRT_S: "sqrt.s">
   | <SUB_S: "sub.s">
   | <TRUNC_L_D: "trunc.l.d">
   | <TRUNC_L_S: "trunc.l.s">
   | <ASCII: ".ascii">
   | <ASCIIZ: ".asciiz">
   | <SPACE: ".space">
   | <BYTE: ".byte">
   | <HALF: ".half">
   | <WORD: ".word">
   | <DOUBLE: ".double">
   | <FLOAT2: ".float">
   | <SET: ".set">
   | <VOLATILE: "volatile">
   | <NOVOLATILE: "novolatile">
   | <REORDER: "reorder">
   | <NOREORDER: "noreorder">
   | <NOAT: "noat">
   | <MACRO: "macro">
   | <NOMACRO: "nomacro">
   | <BOPT: "bopt">
   | <NOBOPT: "nobopt">
   | <NOMOVE: "nomove">
   | <TEXT: ".text">
   | <DATA: ".data">
   | <RDATA: ".rdata">
   | <SDATA: ".sdata">
   | <ALIGN: ".align">
   | <GLOBL: ".globl">
   | <EXTERN: ".extern">
   | <COMM: ".comm">
   | <LCOMM: ".lcomm">
   | <ENT: ".ent">
   | <AENT: ".aent">
   | <MASK: ".mask">
   | <FMASK: ".fmask">
   | <FRAME: ".frame">
   | <END: ".end">
   | <ALIAS: ".alias">
   | <BGNB: ".bgnb">
   | <ENDB: ".endb">
   | <FILE: ".file">
   | <GALIVE: ".galive">
   | <GJALDEF: ".gjaldef">
   | <GJRLIVE: ".gjrlive">
   | <LAB: ".lab">
   | <LIVEREG: ".livereg">
   | <NOALIAS: ".noalias">
   | <OPTION: ".option">
   | <FLAG: "flag">
   | <VERSTAMP: ".verstamp">
   | <VREG: ".vreg">
   | <ZERO: "zero">
   | <AT: "at">
   | <V0: "v0">
   | <V1: "v1">
   | <A0: "a0">
   | <A1: "a1">
   | <A2: "a2">
   | <A3: "a3">
   | <T0: "t0">
   | <T1: "t1">
   | <T2: "t2">
   | <T3: "t3">
   | <T4: "t4">
   | <T5: "t5">
   | <T6: "t6">
   | <T7: "t7">
   | <S0: "s0">
   | <S1: "s1">
   | <S2: "s2">
   | <S3: "s3">
   | <S4: "s4">
   | <S5: "s5">
   | <S6: "s6">
   | <S7: "s7">
   | <T8: "t8">
   | <T9: "t9">
   | <K0: "k0">
   | <K1: "k1">
   | <GP: "gp">
   | <SP: "sp">
   | <S8: "s8">
   | <FP: "fp">
   | <RA: "ra">
   | <DZERO: "$zero">
   | <DAT: "$at">
   | <DV0: "$v0">
   | <DV1: "$v1">
   | <DA0: "$a0">
   | <DA1: "$a1">
   | <DA2: "$a2">
   | <DA3: "$a3">
   | <DT0: "$t0">
   | <DT1: "$t1">
   | <DT2: "$t2">
   | <DT3: "$t3">
   | <DT4: "$t4">
   | <DT5: "$t5">
   | <DT6: "$t6">
   | <DT7: "$t7">
   | <DS0: "$s0">
   | <DS1: "$s1">
   | <DS2: "$s2">
   | <DS3: "$s3">
   | <DS4: "$s4">
   | <DS5: "$s5">
   | <DS6: "$s6">
   | <DS7: "$s7">
   | <DT8: "$t8">
   | <DT9: "$t9">
   | <DK0: "$k0">
   | <DK1: "$k1">
   | <DGP: "$gp">
   | <DSP: "$sp">
   | <DS8: "$s8">
   | <DFP: "$fp">
   | <DRA: "$ra">
}

TOKEN :
{
   <DECIMAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <FLOAT: (["0"-"9"])+ "." (["0"-"9"])* (["e", "E"] (["+", "-"])? (["0"-"9"])+)? | "." (["0"-"9"])+ (["e", "E"] (["+", "-"])? (["0"-"9"])+)? | (["0"-"9"])+ ["e", "E"] (["+", "-"])? (["0"-"9"])+>
}

TOKEN :
{
   <HEXADECIMAL: ("0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+)>
}

TOKEN :
{
   <OCTAL: ("0" (["0"-"7"])+)>
}

TOKEN :
{
   <CHARACTER: "'" ((~["'", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))) "'">
}

TOKEN :
{
   <STRING: "\"" ((~["\"", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])))* "\"">
}

TOKEN :
{
   <DOLLAR_DECIMAL: "$" <DECIMAL>>
}

TOKEN :
{
   <DOLLAR_F_DECIMAL: "$f" <DECIMAL>>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", ".", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

TOKEN :
{
   <IDENTIFIER_COLON: <IDENTIFIER> (<WHITE_SPACE>)* ":">
}

TOKEN :
{
   <IDENTIFIER_EQUAL: <IDENTIFIER> (<WHITE_SPACE>)* "=">
}

TOKEN :
{
   <DECIMAL_COLON: <DECIMAL> (<WHITE_SPACE>)* ":">
}

TOKEN :
{
   <DECIMAL_B: <DECIMAL> "b">
}

TOKEN :
{
   <DECIMAL_F: <DECIMAL> "f">
}

Goal Goal() :
{
   StmtList n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=StmtList()
   n2=<EOF> { 
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
   }
   
   { return new Goal(n0,n1); }
}

StmtList StmtList() :
{
   Stmt n0;
   NodeOptional n1 = new NodeOptional();
   StmtList n2;

   
}
{
   n0=Stmt()
   (
      n2=StmtList()
      { n1.addNode(n2); }
   )?
   
   { return new StmtList(n0,n1); }
}

Stmt Stmt() :
{
   Stat n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;

   
}
{
   n0=Stat()
   (
      n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
   )?
   
   { return new Stmt(n0,n1); }
}

Stat Stat() :
{
   NodeChoice n0;
   NodeSequence n1;
   Label n2;
   Instruction n3;
   NodeSequence n4;
   Label n5;
   Data n6;
   Label n7;
   Instruction n8;
   Data n9;
   SymDef n10;
   Directive n11;

   
}
{
   (
      LOOKAHEAD(Label() Instruction())
      { n1 = new NodeSequence(3); }
      n2=Label()
      { n1.addNode(n2); }
      n3=Instruction()
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(Label() Data())
      { n4 = new NodeSequence(3); }
      n5=Label()
      { n4.addNode(n5); }
      n6=Data()
      { n4.addNode(n6); }
      { n0 = new NodeChoice(n4, 1); }
   |
      n7=Label()
      { n0 = new NodeChoice(n7, 2); }
   |
      n8=Instruction()
      { n0 = new NodeChoice(n8, 3); }
   |
      n9=Data()
      { n0 = new NodeChoice(n9, 4); }
   |
      n10=SymDef()
      { n0 = new NodeChoice(n10, 5); }
   |
      n11=Directive()
      { n0 = new NodeChoice(n11, 6); }
   )
   
   { return new Stat(n0); }
}

Label Label() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<IDENTIFIER_COLON> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<DECIMAL_COLON> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new Label(n0); }
}

Instruction Instruction() :
{
   OpCode n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   Operand n3;
   NodeOptional n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Operand n8;
   NodeOptional n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Operand n13;

   
}
{
   n0=OpCode()
   (
      { n4 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      n3=Operand()
      { n2.addNode(n3); }
      (
         { n9 = new NodeOptional(); }
         { n5 = new NodeSequence(3); }
         n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
         n8=Operand()
         { n5.addNode(n8); }
         (
            { n10 = new NodeSequence(2); }
            n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
            n13=Operand()
            { n10.addNode(n13); }
            { n9.addNode(n10); }
         )?
         { n5.addNode(n9); }
         { n4.addNode(n5); }
      )?
      { n2.addNode(n4); }
      { n1.addNode(n2); }
   )?
   
   { return new Instruction(n0,n1); }
}

Operand Operand() :
{
   NodeChoice n0;
   Register n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Register n5;
   NodeToken n6;
   Token n7;
   FloatRegister n8;
   NodeSequence n9;
   AddrImmed n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Register n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;

   
}
{
   (
      n1=Register()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD("(" Register() ")")
      { n2 = new NodeSequence(4); }
      n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Register()
      { n2.addNode(n5); }
      n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n0 = new NodeChoice(n2, 1); }
   |
      n8=FloatRegister()
      { n0 = new NodeChoice(n8, 2); }
   |
      { n9 = new NodeSequence(2); }
      n10=AddrImmed()
      { n9.addNode(n10); }
      (
         { n12 = new NodeSequence(3); }
         n14="(" { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
         n15=Register()
         { n12.addNode(n15); }
         n17=")" { n16 = JTBToolkit.makeNodeToken(n17); }
         { n12.addNode(n16); }
         { n11.addNode(n12); }
      )?
      { n9.addNode(n11); }
      { n0 = new NodeChoice(n9, 3); }
   |
      n19=<FLOAT> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n0 = new NodeChoice(n18, 4); }
   )
   
   { return new Operand(n0); }
}

Register Register() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   RegisterName n3;
   DollarRegisterName n4;

   
}
{
   (
      n2=<DOLLAR_DECIMAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n3=RegisterName()
      { n0 = new NodeChoice(n3, 1); }
   |
      n4=DollarRegisterName()
      { n0 = new NodeChoice(n4, 2); }
   )
   
   { return new Register(n0); }
}

FloatRegister FloatRegister() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<DOLLAR_F_DECIMAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FloatRegister(n0); }
}

AddrImmed AddrImmed() :
{
   NodeChoice n0;
   NodeSequence n1;
   LabelExpr n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   Expr n10;
   Expr n11;

   
}
{
   (
      LOOKAHEAD(LabelExpr())
      { n1 = new NodeSequence(3); }
      n2=LabelExpr()
      { n1.addNode(n2); }
      (
         { n4 = new NodeSequence(2); }
         (
            (
               n7="+" { n6 = JTBToolkit.makeNodeToken(n7); }
               { n5 = new NodeChoice(n6, 0); }
            |
               n9="-" { n8 = JTBToolkit.makeNodeToken(n9); }
               { n5 = new NodeChoice(n8, 1); }
            )
            
         )
         { n4.addNode(n5); }
         n10=Expr()
         { n4.addNode(n10); }
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n11=Expr()
      { n0 = new NodeChoice(n11, 1); }
   )
   
   { return new AddrImmed(n0); }
}

LabelExpr LabelExpr() :
{
   LabelRef n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LabelRef n5;

   
}
{
   n0=LabelRef()
   (
      LOOKAHEAD("-")
      { n2 = new NodeSequence(2); }
      n4="-" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=LabelRef()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new LabelExpr(n0,n1); }
}

LabelRef LabelRef() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2=<DECIMAL_B> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<DECIMAL_F> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="." { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new LabelRef(n0); }
}

Data Data() :
{
   NodeChoice n0;
   NodeSequence n1;
   DataMode n2;
   DataList n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   Expr n17;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=DataMode()
      { n1.addNode(n2); }
      n3=DataList()
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n4 = new NodeSequence(2); }
      n6=".ascii" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n8=<STRING> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n4.addNode(n7); }
      { n0 = new NodeChoice(n4, 1); }
   |
      { n9 = new NodeSequence(2); }
      n11=".asciiz" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n13=<STRING> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9.addNode(n12); }
      { n0 = new NodeChoice(n9, 2); }
   |
      { n14 = new NodeSequence(2); }
      n16=".space" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      n17=Expr()
      { n14.addNode(n17); }
      { n0 = new NodeChoice(n14, 3); }
   )
   
   { return new Data(n0); }
}

DataMode DataMode() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2=".byte" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=".half" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=".word" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=".float" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=".double" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new DataMode(n0); }
}

DataList DataList() :
{
   DataExpr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   DataList n5;

   
}
{
   n0=DataExpr()
   (
      LOOKAHEAD(",")
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=DataList()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new DataList(n0,n1); }
}

DataExpr DataExpr() :
{
   NodeChoice n0;
   NodeSequence n1;
   Expr n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Expr n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=Expr()
      { n1.addNode(n2); }
      (
         LOOKAHEAD(":")
         { n4 = new NodeSequence(2); }
         n6=":" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n7=Expr()
         { n4.addNode(n7); }
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n8 = new NodeSequence(2); }
      n10=<FLOAT> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      (
         LOOKAHEAD(":")
         { n12 = new NodeSequence(2); }
         n14=":" { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
         n16=<FLOAT> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n12.addNode(n15); }
         { n11.addNode(n12); }
      )?
      { n8.addNode(n11); }
      { n0 = new NodeChoice(n8, 1); }
   )
   
   { return new DataExpr(n0); }
}

SymDef SymDef() :
{
   NodeToken n0;
   Token n1;
   Expr n2;

   
}
{
   n1=<IDENTIFIER_EQUAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expr()
   
   { return new SymDef(n0,n2); }
}

Directive Directive() :
{
   NodeChoice n0;
   SetDir n1;
   SegmentDir n2;
   AlignDir n3;
   SymbolDir n4;
   BlockDir n5;
   CompilerDir n6;

   
}
{
   (
      n1=SetDir()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SegmentDir()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=AlignDir()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=SymbolDir()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=BlockDir()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=CompilerDir()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new Directive(n0); }
}

SetDir SetDir() :
{
   NodeToken n0;
   Token n1;
   SetDirArgs n2;

   
}
{
   n1=".set" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SetDirArgs()
   
   { return new SetDir(n0,n2); }
}

SetDirArgs SetDirArgs() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;

   
}
{
   (
      n2="volatile" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="novolatile" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="reorder" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="noreorder" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="at" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="noat" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="macro" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="nomacro" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18="bopt" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20="nobopt" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22="move" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24="nomove" { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   )
   
   { return new SetDirArgs(n0); }
}

SegmentDir SegmentDir() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2=".text" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=".data" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=".rdata" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=".sdata" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new SegmentDir(n0); }
}

AlignDir AlignDir() :
{
   NodeToken n0;
   Token n1;
   Expr n2;

   
}
{
   n1=".align" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expr()
   
   { return new AlignDir(n0,n2); }
}

SymbolDir SymbolDir() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   Constant n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   Constant n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   Constant n29;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n3=".globl" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<IDENTIFIER> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n6 = new NodeSequence(4); }
      n8=".extern" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n10=<IDENTIFIER> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n6.addNode(n9); }
      n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
      { n6.addNode(n11); }
      n13=Constant()
      { n6.addNode(n13); }
      { n0 = new NodeChoice(n6, 1); }
   |
      { n14 = new NodeSequence(4); }
      n16=".comm" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      n18=<IDENTIFIER> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n14.addNode(n17); }
      n20="," { n19 = JTBToolkit.makeNodeToken(n20); }
      { n14.addNode(n19); }
      n21=Constant()
      { n14.addNode(n21); }
      { n0 = new NodeChoice(n14, 2); }
   |
      { n22 = new NodeSequence(4); }
      n24=".lcomm" { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      n26=<IDENTIFIER> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n22.addNode(n25); }
      n28="," { n27 = JTBToolkit.makeNodeToken(n28); }
      { n22.addNode(n27); }
      n29=Constant()
      { n22.addNode(n29); }
      { n0 = new NodeChoice(n22, 3); }
   )
   
   { return new SymbolDir(n0); }
}

BlockDir BlockDir() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Constant n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   Constant n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   Expr n22;
   NodeToken n23;
   Token n24;
   Expr n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   Expr n29;
   NodeToken n30;
   Token n31;
   Expr n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   Register n36;
   NodeToken n37;
   Token n38;
   Expr n39;
   NodeToken n40;
   Token n41;
   Register n42;
   NodeSequence n43;
   NodeToken n44;
   Token n45;
   NodeOptional n46 = new NodeOptional();
   NodeToken n47;
   Token n48;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=".ent" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<IDENTIFIER> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      (
         LOOKAHEAD(",")
         { n7 = new NodeSequence(2); }
         n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=Constant()
         { n7.addNode(n10); }
         { n6.addNode(n7); }
      )?
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n11 = new NodeSequence(4); }
      n13=".aent" { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      n15=<IDENTIFIER> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n11.addNode(n14); }
      n17="," { n16 = JTBToolkit.makeNodeToken(n17); }
      { n11.addNode(n16); }
      n18=Constant()
      { n11.addNode(n18); }
      { n0 = new NodeChoice(n11, 1); }
   |
      { n19 = new NodeSequence(4); }
      n21=".mask" { n20 = JTBToolkit.makeNodeToken(n21); }
      { n19.addNode(n20); }
      n22=Expr()
      { n19.addNode(n22); }
      n24="," { n23 = JTBToolkit.makeNodeToken(n24); }
      { n19.addNode(n23); }
      n25=Expr()
      { n19.addNode(n25); }
      { n0 = new NodeChoice(n19, 2); }
   |
      { n26 = new NodeSequence(4); }
      n28=".fmask" { n27 = JTBToolkit.makeNodeToken(n28); }
      { n26.addNode(n27); }
      n29=Expr()
      { n26.addNode(n29); }
      n31="," { n30 = JTBToolkit.makeNodeToken(n31); }
      { n26.addNode(n30); }
      n32=Expr()
      { n26.addNode(n32); }
      { n0 = new NodeChoice(n26, 3); }
   |
      { n33 = new NodeSequence(6); }
      n35=".frame" { n34 = JTBToolkit.makeNodeToken(n35); }
      { n33.addNode(n34); }
      n36=Register()
      { n33.addNode(n36); }
      n38="," { n37 = JTBToolkit.makeNodeToken(n38); }
      { n33.addNode(n37); }
      n39=Expr()
      { n33.addNode(n39); }
      n41="," { n40 = JTBToolkit.makeNodeToken(n41); }
      { n33.addNode(n40); }
      n42=Register()
      { n33.addNode(n42); }
      { n0 = new NodeChoice(n33, 4); }
   |
      { n43 = new NodeSequence(2); }
      n45=".end" { n44 = JTBToolkit.makeNodeToken(n45); }
      { n43.addNode(n44); }
      (
         LOOKAHEAD(<IDENTIFIER>)
         n48=<IDENTIFIER> { n47 = JTBToolkit.makeNodeToken(n48); }
         { n46.addNode(n47); }
      )?
      { n43.addNode(n46); }
      { n0 = new NodeChoice(n43, 5); }
   )
   
   { return new BlockDir(n0); }
}

CompilerDir CompilerDir() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Register n4;
   NodeToken n5;
   Token n6;
   Register n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   Expr n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Expr n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   Constant n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeSequence n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   Expr n36;
   NodeToken n37;
   Token n38;
   Expr n39;
   NodeSequence n40;
   NodeToken n41;
   Token n42;
   Register n43;
   NodeToken n44;
   Token n45;
   Register n46;
   NodeSequence n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;
   NodeSequence n52;
   NodeToken n53;
   Token n54;
   Constant n55;
   Constant n56;
   NodeSequence n57;
   NodeToken n58;
   Token n59;
   Expr n60;
   NodeToken n61;
   Token n62;
   Expr n63;

   
}
{
   (
      { n1 = new NodeSequence(4); }
      n3=".alias" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Register()
      { n1.addNode(n4); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      n7=Register()
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n8 = new NodeSequence(2); }
      n10=".bgnb" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n11=Expr()
      { n8.addNode(n11); }
      { n0 = new NodeChoice(n8, 1); }
   |
      { n12 = new NodeSequence(2); }
      n14=".endb" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=Expr()
      { n12.addNode(n15); }
      { n0 = new NodeChoice(n12, 2); }
   |
      { n16 = new NodeSequence(3); }
      n18=".file" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      n19=Constant()
      { n16.addNode(n19); }
      n21=<STRING> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n16.addNode(n20); }
      { n0 = new NodeChoice(n16, 3); }
   |
      n23=".galive" { n22 = JTBToolkit.makeNodeToken(n23); }
      { n0 = new NodeChoice(n22, 4); }
   |
      n25=".gjaldef" { n24 = JTBToolkit.makeNodeToken(n25); }
      { n0 = new NodeChoice(n24, 5); }
   |
      n27=".gjrlive" { n26 = JTBToolkit.makeNodeToken(n27); }
      { n0 = new NodeChoice(n26, 6); }
   |
      { n28 = new NodeSequence(2); }
      n30=".lab" { n29 = JTBToolkit.makeNodeToken(n30); }
      { n28.addNode(n29); }
      n32=<IDENTIFIER> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n28.addNode(n31); }
      { n0 = new NodeChoice(n28, 7); }
   |
      { n33 = new NodeSequence(4); }
      n35=".livereg" { n34 = JTBToolkit.makeNodeToken(n35); }
      { n33.addNode(n34); }
      n36=Expr()
      { n33.addNode(n36); }
      n38="," { n37 = JTBToolkit.makeNodeToken(n38); }
      { n33.addNode(n37); }
      n39=Expr()
      { n33.addNode(n39); }
      { n0 = new NodeChoice(n33, 8); }
   |
      { n40 = new NodeSequence(4); }
      n42=".noalias" { n41 = JTBToolkit.makeNodeToken(n42); }
      { n40.addNode(n41); }
      n43=Register()
      { n40.addNode(n43); }
      n45="," { n44 = JTBToolkit.makeNodeToken(n45); }
      { n40.addNode(n44); }
      n46=Register()
      { n40.addNode(n46); }
      { n0 = new NodeChoice(n40, 9); }
   |
      { n47 = new NodeSequence(2); }
      n49=".option" { n48 = JTBToolkit.makeNodeToken(n49); }
      { n47.addNode(n48); }
      n51="flag" { n50 = JTBToolkit.makeNodeToken(n51); }
      { n47.addNode(n50); }
      { n0 = new NodeChoice(n47, 10); }
   |
      { n52 = new NodeSequence(3); }
      n54=".verstamp" { n53 = JTBToolkit.makeNodeToken(n54); }
      { n52.addNode(n53); }
      n55=Constant()
      { n52.addNode(n55); }
      n56=Constant()
      { n52.addNode(n56); }
      { n0 = new NodeChoice(n52, 11); }
   |
      { n57 = new NodeSequence(4); }
      n59=".vreg" { n58 = JTBToolkit.makeNodeToken(n59); }
      { n57.addNode(n58); }
      n60=Expr()
      { n57.addNode(n60); }
      n62="," { n61 = JTBToolkit.makeNodeToken(n62); }
      { n57.addNode(n61); }
      n63=Expr()
      { n57.addNode(n63); }
      { n0 = new NodeChoice(n57, 12); }
   )
   
   { return new CompilerDir(n0); }
}

Expr Expr() :
{
   Term n0;
   Expr_ n1;

   
}
{
   n0=Term()
   n1=Expr_()
   
   { return new Expr(n0,n1); }
}

Expr_ Expr_() :
{
   NodeListOptional n0 = new NodeListOptional();
   NodeSequence n1;
   BinaryOp n2;
   Expr n3;
   Expr_ n4;

   
}
{
   (
      LOOKAHEAD(BinaryOp() Expr())
      { n1 = new NodeSequence(3); }
      n2=BinaryOp()
      { n1.addNode(n2); }
      n3=Expr()
      { n1.addNode(n3); }
      n4=Expr_()
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new Expr_(n0); }
}

Term Term() :
{
   NodeChoice n0;
   NodeSequence n1;
   UnaryOp n2;
   Term n3;
   Primary n4;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=UnaryOp()
      { n1.addNode(n2); }
      n3=Term()
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=Primary()
      { n0 = new NodeChoice(n4, 1); }
   )
   
   { return new Term(n0); }
}

Primary Primary() :
{
   NodeChoice n0;
   Constant n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expr n5;
   NodeToken n6;
   Token n7;

   
}
{
   (
      n1=Constant()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(3); }
      n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Expr()
      { n2.addNode(n5); }
      n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Primary(n0); }
}

BinaryOp BinaryOp() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;

   
}
{
   (
      n2="*" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="/" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="%" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="+" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="-" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="<<" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=">>" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="&" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18="^" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20="|" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   )
   
   { return new BinaryOp(n0); }
}

UnaryOp UnaryOp() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2="+" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="-" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="~" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="!" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new UnaryOp(n0); }
}

Constant Constant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2=<DECIMAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<HEXADECIMAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<OCTAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<CHARACTER> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<IDENTIFIER> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new Constant(n0); }
}

RegisterName RegisterName() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;

   
}
{
   (
      n2="zero" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="at" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="v0" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="v1" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="a0" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="a1" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="a2" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="a3" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18="t0" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20="t1" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22="t2" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24="t3" { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26="t4" { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   |
      n28="t5" { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13); }
   |
      n30="t6" { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14); }
   |
      n32="t7" { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15); }
   |
      n34="s0" { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16); }
   |
      n36="s1" { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17); }
   |
      n38="s2" { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18); }
   |
      n40="s3" { n39 = JTBToolkit.makeNodeToken(n40); }
      { n0 = new NodeChoice(n39, 19); }
   |
      n42="s4" { n41 = JTBToolkit.makeNodeToken(n42); }
      { n0 = new NodeChoice(n41, 20); }
   |
      n44="s5" { n43 = JTBToolkit.makeNodeToken(n44); }
      { n0 = new NodeChoice(n43, 21); }
   |
      n46="s6" { n45 = JTBToolkit.makeNodeToken(n46); }
      { n0 = new NodeChoice(n45, 22); }
   |
      n48="s7" { n47 = JTBToolkit.makeNodeToken(n48); }
      { n0 = new NodeChoice(n47, 23); }
   |
      n50="t8" { n49 = JTBToolkit.makeNodeToken(n50); }
      { n0 = new NodeChoice(n49, 24); }
   |
      n52="t9" { n51 = JTBToolkit.makeNodeToken(n52); }
      { n0 = new NodeChoice(n51, 25); }
   |
      n54="k0" { n53 = JTBToolkit.makeNodeToken(n54); }
      { n0 = new NodeChoice(n53, 26); }
   |
      n56="k1" { n55 = JTBToolkit.makeNodeToken(n56); }
      { n0 = new NodeChoice(n55, 27); }
   |
      n58="gp" { n57 = JTBToolkit.makeNodeToken(n58); }
      { n0 = new NodeChoice(n57, 28); }
   |
      n60="sp" { n59 = JTBToolkit.makeNodeToken(n60); }
      { n0 = new NodeChoice(n59, 29); }
   |
      n62="s8" { n61 = JTBToolkit.makeNodeToken(n62); }
      { n0 = new NodeChoice(n61, 30); }
   |
      n64="fp" { n63 = JTBToolkit.makeNodeToken(n64); }
      { n0 = new NodeChoice(n63, 31); }
   |
      n66="ra" { n65 = JTBToolkit.makeNodeToken(n66); }
      { n0 = new NodeChoice(n65, 32); }
   )
   
   { return new RegisterName(n0); }
}

DollarRegisterName DollarRegisterName() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;

   
}
{
   (
      n2="$zero" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="$at" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="$v0" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="$v1" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="$a0" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="$a1" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="$a2" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="$a3" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18="$t0" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20="$t1" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22="$t2" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24="$t3" { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26="$t4" { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   |
      n28="$t5" { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13); }
   |
      n30="$t6" { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14); }
   |
      n32="$t7" { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15); }
   |
      n34="$s0" { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16); }
   |
      n36="$s1" { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17); }
   |
      n38="$s2" { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18); }
   |
      n40="$s3" { n39 = JTBToolkit.makeNodeToken(n40); }
      { n0 = new NodeChoice(n39, 19); }
   |
      n42="$s4" { n41 = JTBToolkit.makeNodeToken(n42); }
      { n0 = new NodeChoice(n41, 20); }
   |
      n44="$s5" { n43 = JTBToolkit.makeNodeToken(n44); }
      { n0 = new NodeChoice(n43, 21); }
   |
      n46="$s6" { n45 = JTBToolkit.makeNodeToken(n46); }
      { n0 = new NodeChoice(n45, 22); }
   |
      n48="$s7" { n47 = JTBToolkit.makeNodeToken(n48); }
      { n0 = new NodeChoice(n47, 23); }
   |
      n50="$t8" { n49 = JTBToolkit.makeNodeToken(n50); }
      { n0 = new NodeChoice(n49, 24); }
   |
      n52="$t9" { n51 = JTBToolkit.makeNodeToken(n52); }
      { n0 = new NodeChoice(n51, 25); }
   |
      n54="$k0" { n53 = JTBToolkit.makeNodeToken(n54); }
      { n0 = new NodeChoice(n53, 26); }
   |
      n56="$k1" { n55 = JTBToolkit.makeNodeToken(n56); }
      { n0 = new NodeChoice(n55, 27); }
   |
      n58="$gp" { n57 = JTBToolkit.makeNodeToken(n58); }
      { n0 = new NodeChoice(n57, 28); }
   |
      n60="$sp" { n59 = JTBToolkit.makeNodeToken(n60); }
      { n0 = new NodeChoice(n59, 29); }
   |
      n62="$s8" { n61 = JTBToolkit.makeNodeToken(n62); }
      { n0 = new NodeChoice(n61, 30); }
   |
      n64="$fp" { n63 = JTBToolkit.makeNodeToken(n64); }
      { n0 = new NodeChoice(n63, 31); }
   |
      n66="$ra" { n65 = JTBToolkit.makeNodeToken(n66); }
      { n0 = new NodeChoice(n65, 32); }
   )
   
   { return new DollarRegisterName(n0); }
}

OpCode OpCode() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;
   NodeToken n75;
   Token n76;
   NodeToken n77;
   Token n78;
   NodeToken n79;
   Token n80;
   NodeToken n81;
   Token n82;
   NodeToken n83;
   Token n84;
   NodeToken n85;
   Token n86;
   NodeToken n87;
   Token n88;
   NodeToken n89;
   Token n90;
   NodeToken n91;
   Token n92;
   NodeToken n93;
   Token n94;
   NodeToken n95;
   Token n96;
   NodeToken n97;
   Token n98;
   NodeToken n99;
   Token n100;
   NodeToken n101;
   Token n102;
   NodeToken n103;
   Token n104;
   NodeToken n105;
   Token n106;
   NodeToken n107;
   Token n108;
   NodeToken n109;
   Token n110;
   NodeToken n111;
   Token n112;
   NodeToken n113;
   Token n114;
   NodeToken n115;
   Token n116;
   NodeToken n117;
   Token n118;
   NodeToken n119;
   Token n120;
   NodeToken n121;
   Token n122;
   NodeToken n123;
   Token n124;
   NodeToken n125;
   Token n126;
   NodeToken n127;
   Token n128;
   NodeToken n129;
   Token n130;
   NodeToken n131;
   Token n132;
   NodeToken n133;
   Token n134;
   NodeToken n135;
   Token n136;
   NodeToken n137;
   Token n138;
   NodeToken n139;
   Token n140;
   NodeToken n141;
   Token n142;
   NodeToken n143;
   Token n144;
   NodeToken n145;
   Token n146;
   NodeToken n147;
   Token n148;
   NodeToken n149;
   Token n150;
   NodeToken n151;
   Token n152;
   NodeToken n153;
   Token n154;
   NodeToken n155;
   Token n156;
   NodeToken n157;
   Token n158;
   NodeToken n159;
   Token n160;
   NodeToken n161;
   Token n162;
   NodeToken n163;
   Token n164;
   NodeToken n165;
   Token n166;
   NodeToken n167;
   Token n168;
   NodeToken n169;
   Token n170;
   NodeToken n171;
   Token n172;
   NodeToken n173;
   Token n174;
   NodeToken n175;
   Token n176;
   NodeToken n177;
   Token n178;
   NodeToken n179;
   Token n180;
   NodeToken n181;
   Token n182;
   NodeToken n183;
   Token n184;
   NodeToken n185;
   Token n186;
   NodeToken n187;
   Token n188;
   NodeToken n189;
   Token n190;
   NodeToken n191;
   Token n192;
   NodeToken n193;
   Token n194;
   NodeToken n195;
   Token n196;
   NodeToken n197;
   Token n198;
   NodeToken n199;
   Token n200;
   NodeToken n201;
   Token n202;
   NodeToken n203;
   Token n204;
   NodeToken n205;
   Token n206;
   NodeToken n207;
   Token n208;
   NodeToken n209;
   Token n210;
   NodeToken n211;
   Token n212;
   NodeToken n213;
   Token n214;
   NodeToken n215;
   Token n216;
   NodeToken n217;
   Token n218;
   NodeToken n219;
   Token n220;
   NodeToken n221;
   Token n222;
   NodeToken n223;
   Token n224;
   NodeToken n225;
   Token n226;
   NodeToken n227;
   Token n228;
   NodeToken n229;
   Token n230;
   NodeToken n231;
   Token n232;
   NodeToken n233;
   Token n234;
   NodeToken n235;
   Token n236;
   NodeToken n237;
   Token n238;
   NodeToken n239;
   Token n240;
   NodeToken n241;
   Token n242;
   NodeToken n243;
   Token n244;
   NodeToken n245;
   Token n246;
   NodeToken n247;
   Token n248;
   NodeToken n249;
   Token n250;
   NodeToken n251;
   Token n252;
   NodeToken n253;
   Token n254;
   NodeToken n255;
   Token n256;
   NodeToken n257;
   Token n258;
   NodeToken n259;
   Token n260;
   NodeToken n261;
   Token n262;
   NodeToken n263;
   Token n264;
   NodeToken n265;
   Token n266;
   NodeToken n267;
   Token n268;
   NodeToken n269;
   Token n270;
   NodeToken n271;
   Token n272;
   NodeToken n273;
   Token n274;
   NodeToken n275;
   Token n276;
   NodeToken n277;
   Token n278;
   NodeToken n279;
   Token n280;
   NodeToken n281;
   Token n282;
   NodeToken n283;
   Token n284;
   NodeToken n285;
   Token n286;
   NodeToken n287;
   Token n288;
   NodeToken n289;
   Token n290;
   NodeToken n291;
   Token n292;
   NodeToken n293;
   Token n294;
   NodeToken n295;
   Token n296;
   NodeToken n297;
   Token n298;
   NodeToken n299;
   Token n300;
   NodeToken n301;
   Token n302;
   NodeToken n303;
   Token n304;
   NodeToken n305;
   Token n306;
   NodeToken n307;
   Token n308;
   NodeToken n309;
   Token n310;
   NodeToken n311;
   Token n312;
   NodeToken n313;
   Token n314;
   NodeToken n315;
   Token n316;
   NodeToken n317;
   Token n318;
   NodeToken n319;
   Token n320;
   NodeToken n321;
   Token n322;
   NodeToken n323;
   Token n324;
   NodeToken n325;
   Token n326;
   NodeToken n327;
   Token n328;
   NodeToken n329;
   Token n330;
   NodeToken n331;
   Token n332;
   NodeToken n333;
   Token n334;
   NodeToken n335;
   Token n336;
   NodeToken n337;
   Token n338;
   NodeToken n339;
   Token n340;
   NodeToken n341;
   Token n342;
   NodeToken n343;
   Token n344;
   NodeToken n345;
   Token n346;
   NodeToken n347;
   Token n348;
   NodeToken n349;
   Token n350;
   NodeToken n351;
   Token n352;
   NodeToken n353;
   Token n354;
   NodeToken n355;
   Token n356;
   NodeToken n357;
   Token n358;
   NodeToken n359;
   Token n360;
   NodeToken n361;
   Token n362;
   NodeToken n363;
   Token n364;
   NodeToken n365;
   Token n366;
   NodeToken n367;
   Token n368;
   NodeToken n369;
   Token n370;
   NodeToken n371;
   Token n372;
   NodeToken n373;
   Token n374;
   NodeToken n375;
   Token n376;
   NodeToken n377;
   Token n378;
   NodeToken n379;
   Token n380;
   NodeToken n381;
   Token n382;
   NodeToken n383;
   Token n384;
   NodeToken n385;
   Token n386;
   NodeToken n387;
   Token n388;
   NodeToken n389;
   Token n390;
   NodeToken n391;
   Token n392;
   NodeToken n393;
   Token n394;
   NodeToken n395;
   Token n396;
   NodeToken n397;
   Token n398;
   NodeToken n399;
   Token n400;
   NodeToken n401;
   Token n402;
   NodeToken n403;
   Token n404;
   NodeToken n405;
   Token n406;
   NodeToken n407;
   Token n408;
   NodeToken n409;
   Token n410;
   NodeToken n411;
   Token n412;
   NodeToken n413;
   Token n414;
   NodeToken n415;
   Token n416;
   NodeToken n417;
   Token n418;
   NodeToken n419;
   Token n420;
   NodeToken n421;
   Token n422;
   NodeToken n423;
   Token n424;
   NodeToken n425;
   Token n426;
   NodeToken n427;
   Token n428;
   NodeToken n429;
   Token n430;
   NodeToken n431;
   Token n432;
   NodeToken n433;
   Token n434;
   NodeToken n435;
   Token n436;
   NodeToken n437;
   Token n438;
   NodeToken n439;
   Token n440;
   NodeToken n441;
   Token n442;
   NodeToken n443;
   Token n444;
   NodeToken n445;
   Token n446;
   NodeToken n447;
   Token n448;
   NodeToken n449;
   Token n450;
   NodeToken n451;
   Token n452;
   NodeToken n453;
   Token n454;
   NodeToken n455;
   Token n456;
   NodeToken n457;
   Token n458;
   NodeToken n459;
   Token n460;
   NodeToken n461;
   Token n462;
   NodeToken n463;
   Token n464;
   NodeToken n465;
   Token n466;
   NodeToken n467;
   Token n468;
   NodeToken n469;
   Token n470;
   NodeToken n471;
   Token n472;
   NodeToken n473;
   Token n474;
   NodeToken n475;
   Token n476;
   NodeToken n477;
   Token n478;
   NodeToken n479;
   Token n480;
   NodeToken n481;
   Token n482;
   NodeToken n483;
   Token n484;
   NodeToken n485;
   Token n486;
   NodeToken n487;
   Token n488;
   NodeToken n489;
   Token n490;
   NodeToken n491;
   Token n492;
   NodeToken n493;
   Token n494;
   NodeToken n495;
   Token n496;
   NodeToken n497;
   Token n498;
   NodeToken n499;
   Token n500;
   NodeToken n501;
   Token n502;
   NodeToken n503;
   Token n504;
   NodeToken n505;
   Token n506;
   NodeToken n507;
   Token n508;
   NodeToken n509;
   Token n510;
   NodeToken n511;
   Token n512;
   NodeToken n513;
   Token n514;
   NodeToken n515;
   Token n516;
   NodeToken n517;
   Token n518;
   NodeToken n519;
   Token n520;
   NodeToken n521;
   Token n522;
   NodeToken n523;
   Token n524;
   NodeToken n525;
   Token n526;
   NodeToken n527;
   Token n528;
   NodeToken n529;
   Token n530;
   NodeToken n531;
   Token n532;
   NodeToken n533;
   Token n534;
   NodeToken n535;
   Token n536;
   NodeToken n537;
   Token n538;
   NodeToken n539;
   Token n540;
   NodeToken n541;
   Token n542;
   NodeToken n543;
   Token n544;
   NodeToken n545;
   Token n546;
   NodeToken n547;
   Token n548;
   NodeToken n549;
   Token n550;
   NodeToken n551;
   Token n552;
   NodeToken n553;
   Token n554;
   NodeToken n555;
   Token n556;
   NodeToken n557;
   Token n558;
   NodeToken n559;
   Token n560;
   NodeToken n561;
   Token n562;
   NodeToken n563;
   Token n564;
   NodeToken n565;
   Token n566;
   NodeToken n567;
   Token n568;
   NodeToken n569;
   Token n570;
   NodeToken n571;
   Token n572;
   NodeToken n573;
   Token n574;
   NodeToken n575;
   Token n576;
   NodeToken n577;
   Token n578;
   NodeToken n579;
   Token n580;
   NodeToken n581;
   Token n582;
   NodeToken n583;
   Token n584;
   NodeToken n585;
   Token n586;
   NodeToken n587;
   Token n588;
   NodeToken n589;
   Token n590;
   NodeToken n591;
   Token n592;
   NodeToken n593;
   Token n594;
   NodeToken n595;
   Token n596;
   NodeToken n597;
   Token n598;
   NodeToken n599;
   Token n600;
   NodeToken n601;
   Token n602;
   NodeToken n603;
   Token n604;
   NodeToken n605;
   Token n606;
   NodeToken n607;
   Token n608;
   NodeToken n609;
   Token n610;
   NodeToken n611;
   Token n612;
   NodeToken n613;
   Token n614;
   NodeToken n615;
   Token n616;
   NodeToken n617;
   Token n618;
   NodeToken n619;
   Token n620;
   NodeToken n621;
   Token n622;
   NodeToken n623;
   Token n624;
   NodeToken n625;
   Token n626;

   
}
{
   (
      n2="abs" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="add" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="addciu" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="addu" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="and" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="b" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="bal" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="bc0f" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18="bc0fl" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20="bc0t" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22="bc0tlbc1f" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24="bc1fl" { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26="bc1t" { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   |
      n28="bc1tl" { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13); }
   |
      n30="bc2f" { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14); }
   |
      n32="bc2fl" { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15); }
   |
      n34="bc2t" { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16); }
   |
      n36="bc2tl" { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17); }
   |
      n38="beq" { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18); }
   |
      n40="beql" { n39 = JTBToolkit.makeNodeToken(n40); }
      { n0 = new NodeChoice(n39, 19); }
   |
      n42="beqz" { n41 = JTBToolkit.makeNodeToken(n42); }
      { n0 = new NodeChoice(n41, 20); }
   |
      n44="beqzl" { n43 = JTBToolkit.makeNodeToken(n44); }
      { n0 = new NodeChoice(n43, 21); }
   |
      n46="bge" { n45 = JTBToolkit.makeNodeToken(n46); }
      { n0 = new NodeChoice(n45, 22); }
   |
      n48="bgel" { n47 = JTBToolkit.makeNodeToken(n48); }
      { n0 = new NodeChoice(n47, 23); }
   |
      n50="bgeu" { n49 = JTBToolkit.makeNodeToken(n50); }
      { n0 = new NodeChoice(n49, 24); }
   |
      n52="bgeul" { n51 = JTBToolkit.makeNodeToken(n52); }
      { n0 = new NodeChoice(n51, 25); }
   |
      n54="bgez" { n53 = JTBToolkit.makeNodeToken(n54); }
      { n0 = new NodeChoice(n53, 26); }
   |
      n56="bgezal" { n55 = JTBToolkit.makeNodeToken(n56); }
      { n0 = new NodeChoice(n55, 27); }
   |
      n58="bgezall" { n57 = JTBToolkit.makeNodeToken(n58); }
      { n0 = new NodeChoice(n57, 28); }
   |
      n60="bgezl" { n59 = JTBToolkit.makeNodeToken(n60); }
      { n0 = new NodeChoice(n59, 29); }
   |
      n62="bgt" { n61 = JTBToolkit.makeNodeToken(n62); }
      { n0 = new NodeChoice(n61, 30); }
   |
      n64="bgtl" { n63 = JTBToolkit.makeNodeToken(n64); }
      { n0 = new NodeChoice(n63, 31); }
   |
      n66="bgtu" { n65 = JTBToolkit.makeNodeToken(n66); }
      { n0 = new NodeChoice(n65, 32); }
   |
      n68="bgtul" { n67 = JTBToolkit.makeNodeToken(n68); }
      { n0 = new NodeChoice(n67, 33); }
   |
      n70="bgtz" { n69 = JTBToolkit.makeNodeToken(n70); }
      { n0 = new NodeChoice(n69, 34); }
   |
      n72="bgtzl" { n71 = JTBToolkit.makeNodeToken(n72); }
      { n0 = new NodeChoice(n71, 35); }
   |
      n74="ble" { n73 = JTBToolkit.makeNodeToken(n74); }
      { n0 = new NodeChoice(n73, 36); }
   |
      n76="blel" { n75 = JTBToolkit.makeNodeToken(n76); }
      { n0 = new NodeChoice(n75, 37); }
   |
      n78="bleu" { n77 = JTBToolkit.makeNodeToken(n78); }
      { n0 = new NodeChoice(n77, 38); }
   |
      n80="bleul" { n79 = JTBToolkit.makeNodeToken(n80); }
      { n0 = new NodeChoice(n79, 39); }
   |
      n82="blez" { n81 = JTBToolkit.makeNodeToken(n82); }
      { n0 = new NodeChoice(n81, 40); }
   |
      n84="blezl" { n83 = JTBToolkit.makeNodeToken(n84); }
      { n0 = new NodeChoice(n83, 41); }
   |
      n86="blt" { n85 = JTBToolkit.makeNodeToken(n86); }
      { n0 = new NodeChoice(n85, 42); }
   |
      n88="bltl" { n87 = JTBToolkit.makeNodeToken(n88); }
      { n0 = new NodeChoice(n87, 43); }
   |
      n90="bltu" { n89 = JTBToolkit.makeNodeToken(n90); }
      { n0 = new NodeChoice(n89, 44); }
   |
      n92="bltul" { n91 = JTBToolkit.makeNodeToken(n92); }
      { n0 = new NodeChoice(n91, 45); }
   |
      n94="bltz" { n93 = JTBToolkit.makeNodeToken(n94); }
      { n0 = new NodeChoice(n93, 46); }
   |
      n96="bltzal" { n95 = JTBToolkit.makeNodeToken(n96); }
      { n0 = new NodeChoice(n95, 47); }
   |
      n98="bltzall" { n97 = JTBToolkit.makeNodeToken(n98); }
      { n0 = new NodeChoice(n97, 48); }
   |
      n100="bltzl" { n99 = JTBToolkit.makeNodeToken(n100); }
      { n0 = new NodeChoice(n99, 49); }
   |
      n102="bne" { n101 = JTBToolkit.makeNodeToken(n102); }
      { n0 = new NodeChoice(n101, 50); }
   |
      n104="bnel" { n103 = JTBToolkit.makeNodeToken(n104); }
      { n0 = new NodeChoice(n103, 51); }
   |
      n106="bnez" { n105 = JTBToolkit.makeNodeToken(n106); }
      { n0 = new NodeChoice(n105, 52); }
   |
      n108="bnezl" { n107 = JTBToolkit.makeNodeToken(n108); }
      { n0 = new NodeChoice(n107, 53); }
   |
      n110="break" { n109 = JTBToolkit.makeNodeToken(n110); }
      { n0 = new NodeChoice(n109, 54); }
   |
      n112="cache" { n111 = JTBToolkit.makeNodeToken(n112); }
      { n0 = new NodeChoice(n111, 55); }
   |
      n114="cfc0" { n113 = JTBToolkit.makeNodeToken(n114); }
      { n0 = new NodeChoice(n113, 56); }
   |
      n116="cfc1" { n115 = JTBToolkit.makeNodeToken(n116); }
      { n0 = new NodeChoice(n115, 57); }
   |
      n118="cfc2" { n117 = JTBToolkit.makeNodeToken(n118); }
      { n0 = new NodeChoice(n117, 58); }
   |
      n120="ctc0" { n119 = JTBToolkit.makeNodeToken(n120); }
      { n0 = new NodeChoice(n119, 59); }
   |
      n122="ctc1" { n121 = JTBToolkit.makeNodeToken(n122); }
      { n0 = new NodeChoice(n121, 60); }
   |
      n124="ctc2" { n123 = JTBToolkit.makeNodeToken(n124); }
      { n0 = new NodeChoice(n123, 61); }
   |
      n126="dabs" { n125 = JTBToolkit.makeNodeToken(n126); }
      { n0 = new NodeChoice(n125, 62); }
   |
      n128="dadd" { n127 = JTBToolkit.makeNodeToken(n128); }
      { n0 = new NodeChoice(n127, 63); }
   |
      n130="daddi" { n129 = JTBToolkit.makeNodeToken(n130); }
      { n0 = new NodeChoice(n129, 64); }
   |
      n132="daddiu" { n131 = JTBToolkit.makeNodeToken(n132); }
      { n0 = new NodeChoice(n131, 65); }
   |
      n134="daddu" { n133 = JTBToolkit.makeNodeToken(n134); }
      { n0 = new NodeChoice(n133, 66); }
   |
      n136="ddiv" { n135 = JTBToolkit.makeNodeToken(n136); }
      { n0 = new NodeChoice(n135, 67); }
   |
      n138="ddivd" { n137 = JTBToolkit.makeNodeToken(n138); }
      { n0 = new NodeChoice(n137, 68); }
   |
      n140="ddivdu" { n139 = JTBToolkit.makeNodeToken(n140); }
      { n0 = new NodeChoice(n139, 69); }
   |
      n142="ddivu" { n141 = JTBToolkit.makeNodeToken(n142); }
      { n0 = new NodeChoice(n141, 70); }
   |
      n144="div" { n143 = JTBToolkit.makeNodeToken(n144); }
      { n0 = new NodeChoice(n143, 71); }
   |
      n146="divd" { n145 = JTBToolkit.makeNodeToken(n146); }
      { n0 = new NodeChoice(n145, 72); }
   |
      n148="divdu" { n147 = JTBToolkit.makeNodeToken(n148); }
      { n0 = new NodeChoice(n147, 73); }
   |
      n150="divo" { n149 = JTBToolkit.makeNodeToken(n150); }
      { n0 = new NodeChoice(n149, 74); }
   |
      n152="divou" { n151 = JTBToolkit.makeNodeToken(n152); }
      { n0 = new NodeChoice(n151, 75); }
   |
      n154="divu" { n153 = JTBToolkit.makeNodeToken(n154); }
      { n0 = new NodeChoice(n153, 76); }
   |
      n156="dla" { n155 = JTBToolkit.makeNodeToken(n156); }
      { n0 = new NodeChoice(n155, 77); }
   |
      n158="dli" { n157 = JTBToolkit.makeNodeToken(n158); }
      { n0 = new NodeChoice(n157, 78); }
   |
      n160="dmadd16" { n159 = JTBToolkit.makeNodeToken(n160); }
      { n0 = new NodeChoice(n159, 79); }
   |
      n162="dmfc0" { n161 = JTBToolkit.makeNodeToken(n162); }
      { n0 = new NodeChoice(n161, 80); }
   |
      n164="dmfc1" { n163 = JTBToolkit.makeNodeToken(n164); }
      { n0 = new NodeChoice(n163, 81); }
   |
      n166="dmfc2" { n165 = JTBToolkit.makeNodeToken(n166); }
      { n0 = new NodeChoice(n165, 82); }
   |
      n168="dmtc0" { n167 = JTBToolkit.makeNodeToken(n168); }
      { n0 = new NodeChoice(n167, 83); }
   |
      n170="dmtc1" { n169 = JTBToolkit.makeNodeToken(n170); }
      { n0 = new NodeChoice(n169, 84); }
   |
      n172="dmtc2" { n171 = JTBToolkit.makeNodeToken(n172); }
      { n0 = new NodeChoice(n171, 85); }
   |
      n174="dmul" { n173 = JTBToolkit.makeNodeToken(n174); }
      { n0 = new NodeChoice(n173, 86); }
   |
      n176="dmulo" { n175 = JTBToolkit.makeNodeToken(n176); }
      { n0 = new NodeChoice(n175, 87); }
   |
      n178="dmulou" { n177 = JTBToolkit.makeNodeToken(n178); }
      { n0 = new NodeChoice(n177, 88); }
   |
      n180="dmult" { n179 = JTBToolkit.makeNodeToken(n180); }
      { n0 = new NodeChoice(n179, 89); }
   |
      n182="dmultu" { n181 = JTBToolkit.makeNodeToken(n182); }
      { n0 = new NodeChoice(n181, 90); }
   |
      n184="dneg" { n183 = JTBToolkit.makeNodeToken(n184); }
      { n0 = new NodeChoice(n183, 91); }
   |
      n186="dnegu" { n185 = JTBToolkit.makeNodeToken(n186); }
      { n0 = new NodeChoice(n185, 92); }
   |
      n188="drem" { n187 = JTBToolkit.makeNodeToken(n188); }
      { n0 = new NodeChoice(n187, 93); }
   |
      n190="dremu" { n189 = JTBToolkit.makeNodeToken(n190); }
      { n0 = new NodeChoice(n189, 94); }
   |
      n192="dret" { n191 = JTBToolkit.makeNodeToken(n192); }
      { n0 = new NodeChoice(n191, 95); }
   |
      n194="drol" { n193 = JTBToolkit.makeNodeToken(n194); }
      { n0 = new NodeChoice(n193, 96); }
   |
      n196="dror" { n195 = JTBToolkit.makeNodeToken(n196); }
      { n0 = new NodeChoice(n195, 97); }
   |
      n198="dsll" { n197 = JTBToolkit.makeNodeToken(n198); }
      { n0 = new NodeChoice(n197, 98); }
   |
      n200="dsllv" { n199 = JTBToolkit.makeNodeToken(n200); }
      { n0 = new NodeChoice(n199, 99); }
   |
      n202="dsll32" { n201 = JTBToolkit.makeNodeToken(n202); }
      { n0 = new NodeChoice(n201, 100); }
   |
      n204="dsra" { n203 = JTBToolkit.makeNodeToken(n204); }
      { n0 = new NodeChoice(n203, 101); }
   |
      n206="dsra32" { n205 = JTBToolkit.makeNodeToken(n206); }
      { n0 = new NodeChoice(n205, 102); }
   |
      n208="dsrl" { n207 = JTBToolkit.makeNodeToken(n208); }
      { n0 = new NodeChoice(n207, 103); }
   |
      n210="dsrlv" { n209 = JTBToolkit.makeNodeToken(n210); }
      { n0 = new NodeChoice(n209, 104); }
   |
      n212="dsrl32" { n211 = JTBToolkit.makeNodeToken(n212); }
      { n0 = new NodeChoice(n211, 105); }
   |
      n214="dsub" { n213 = JTBToolkit.makeNodeToken(n214); }
      { n0 = new NodeChoice(n213, 106); }
   |
      n216="dsubu" { n215 = JTBToolkit.makeNodeToken(n216); }
      { n0 = new NodeChoice(n215, 107); }
   |
      n218="eret" { n217 = JTBToolkit.makeNodeToken(n218); }
      { n0 = new NodeChoice(n217, 108); }
   |
      n220="ffc" { n219 = JTBToolkit.makeNodeToken(n220); }
      { n0 = new NodeChoice(n219, 109); }
   |
      n222="ffs" { n221 = JTBToolkit.makeNodeToken(n222); }
      { n0 = new NodeChoice(n221, 110); }
   |
      n224="flushd" { n223 = JTBToolkit.makeNodeToken(n224); }
      { n0 = new NodeChoice(n223, 111); }
   |
      n226="j" { n225 = JTBToolkit.makeNodeToken(n226); }
      { n0 = new NodeChoice(n225, 112); }
   |
      n228="jr" { n227 = JTBToolkit.makeNodeToken(n228); }
      { n0 = new NodeChoice(n227, 113); }
   |
      n230="jal" { n229 = JTBToolkit.makeNodeToken(n230); }
      { n0 = new NodeChoice(n229, 114); }
   |
      n232="jalr" { n231 = JTBToolkit.makeNodeToken(n232); }
      { n0 = new NodeChoice(n231, 115); }
   |
      n234="la" { n233 = JTBToolkit.makeNodeToken(n234); }
      { n0 = new NodeChoice(n233, 116); }
   |
      n236="lb" { n235 = JTBToolkit.makeNodeToken(n236); }
      { n0 = new NodeChoice(n235, 117); }
   |
      n238="lbu" { n237 = JTBToolkit.makeNodeToken(n238); }
      { n0 = new NodeChoice(n237, 118); }
   |
      n240="ld" { n239 = JTBToolkit.makeNodeToken(n240); }
      { n0 = new NodeChoice(n239, 119); }
   |
      n242="ldl" { n241 = JTBToolkit.makeNodeToken(n242); }
      { n0 = new NodeChoice(n241, 120); }
   |
      n244="ldr" { n243 = JTBToolkit.makeNodeToken(n244); }
      { n0 = new NodeChoice(n243, 121); }
   |
      n246="ldxc1" { n245 = JTBToolkit.makeNodeToken(n246); }
      { n0 = new NodeChoice(n245, 122); }
   |
      n248="lh" { n247 = JTBToolkit.makeNodeToken(n248); }
      { n0 = new NodeChoice(n247, 123); }
   |
      n250="lhu" { n249 = JTBToolkit.makeNodeToken(n250); }
      { n0 = new NodeChoice(n249, 124); }
   |
      n252="li" { n251 = JTBToolkit.makeNodeToken(n252); }
      { n0 = new NodeChoice(n251, 125); }
   |
      n254="ll" { n253 = JTBToolkit.makeNodeToken(n254); }
      { n0 = new NodeChoice(n253, 126); }
   |
      n256="lld" { n255 = JTBToolkit.makeNodeToken(n256); }
      { n0 = new NodeChoice(n255, 127); }
   |
      n258="lui" { n257 = JTBToolkit.makeNodeToken(n258); }
      { n0 = new NodeChoice(n257, 128); }
   |
      n260="lw" { n259 = JTBToolkit.makeNodeToken(n260); }
      { n0 = new NodeChoice(n259, 129); }
   |
      n262="lwc1" { n261 = JTBToolkit.makeNodeToken(n262); }
      { n0 = new NodeChoice(n261, 130); }
   |
      n264="lwl" { n263 = JTBToolkit.makeNodeToken(n264); }
      { n0 = new NodeChoice(n263, 131); }
   |
      n266="lwr" { n265 = JTBToolkit.makeNodeToken(n266); }
      { n0 = new NodeChoice(n265, 132); }
   |
      n268="lwu" { n267 = JTBToolkit.makeNodeToken(n268); }
      { n0 = new NodeChoice(n267, 133); }
   |
      n270="lwxc1" { n269 = JTBToolkit.makeNodeToken(n270); }
      { n0 = new NodeChoice(n269, 134); }
   |
      n272="madd" { n271 = JTBToolkit.makeNodeToken(n272); }
      { n0 = new NodeChoice(n271, 135); }
   |
      n274="maddu" { n273 = JTBToolkit.makeNodeToken(n274); }
      { n0 = new NodeChoice(n273, 136); }
   |
      n276="mad" { n275 = JTBToolkit.makeNodeToken(n276); }
      { n0 = new NodeChoice(n275, 137); }
   |
      n278="madu" { n277 = JTBToolkit.makeNodeToken(n278); }
      { n0 = new NodeChoice(n277, 138); }
   |
      n280="madd16" { n279 = JTBToolkit.makeNodeToken(n280); }
      { n0 = new NodeChoice(n279, 139); }
   |
      n282="max" { n281 = JTBToolkit.makeNodeToken(n282); }
      { n0 = new NodeChoice(n281, 140); }
   |
      n284="mfc0" { n283 = JTBToolkit.makeNodeToken(n284); }
      { n0 = new NodeChoice(n283, 141); }
   |
      n286="mfc1" { n285 = JTBToolkit.makeNodeToken(n286); }
      { n0 = new NodeChoice(n285, 142); }
   |
      n288="mfc2" { n287 = JTBToolkit.makeNodeToken(n288); }
      { n0 = new NodeChoice(n287, 143); }
   |
      n290="mfhi" { n289 = JTBToolkit.makeNodeToken(n290); }
      { n0 = new NodeChoice(n289, 144); }
   |
      n292="mflo" { n291 = JTBToolkit.makeNodeToken(n292); }
      { n0 = new NodeChoice(n291, 145); }
   |
      n294="min" { n293 = JTBToolkit.makeNodeToken(n294); }
      { n0 = new NodeChoice(n293, 146); }
   |
      n296="move" { n295 = JTBToolkit.makeNodeToken(n296); }
      { n0 = new NodeChoice(n295, 147); }
   |
      n298="movf" { n297 = JTBToolkit.makeNodeToken(n298); }
      { n0 = new NodeChoice(n297, 148); }
   |
      n300="movn" { n299 = JTBToolkit.makeNodeToken(n300); }
      { n0 = new NodeChoice(n299, 149); }
   |
      n302="movt" { n301 = JTBToolkit.makeNodeToken(n302); }
      { n0 = new NodeChoice(n301, 150); }
   |
      n304="movz" { n303 = JTBToolkit.makeNodeToken(n304); }
      { n0 = new NodeChoice(n303, 151); }
   |
      n306="msub" { n305 = JTBToolkit.makeNodeToken(n306); }
      { n0 = new NodeChoice(n305, 152); }
   |
      n308="msubu" { n307 = JTBToolkit.makeNodeToken(n308); }
      { n0 = new NodeChoice(n307, 153); }
   |
      n310="mtc0" { n309 = JTBToolkit.makeNodeToken(n310); }
      { n0 = new NodeChoice(n309, 154); }
   |
      n312="mtc1" { n311 = JTBToolkit.makeNodeToken(n312); }
      { n0 = new NodeChoice(n311, 155); }
   |
      n314="mtc2" { n313 = JTBToolkit.makeNodeToken(n314); }
      { n0 = new NodeChoice(n313, 156); }
   |
      n316="mthi" { n315 = JTBToolkit.makeNodeToken(n316); }
      { n0 = new NodeChoice(n315, 157); }
   |
      n318="mtlo" { n317 = JTBToolkit.makeNodeToken(n318); }
      { n0 = new NodeChoice(n317, 158); }
   |
      n320="mul" { n319 = JTBToolkit.makeNodeToken(n320); }
      { n0 = new NodeChoice(n319, 159); }
   |
      n322="mulu" { n321 = JTBToolkit.makeNodeToken(n322); }
      { n0 = new NodeChoice(n321, 160); }
   |
      n324="mulo" { n323 = JTBToolkit.makeNodeToken(n324); }
      { n0 = new NodeChoice(n323, 161); }
   |
      n326="mulou" { n325 = JTBToolkit.makeNodeToken(n326); }
      { n0 = new NodeChoice(n325, 162); }
   |
      n328="mult" { n327 = JTBToolkit.makeNodeToken(n328); }
      { n0 = new NodeChoice(n327, 163); }
   |
      n330="multu" { n329 = JTBToolkit.makeNodeToken(n330); }
      { n0 = new NodeChoice(n329, 164); }
   |
      n332="neg" { n331 = JTBToolkit.makeNodeToken(n332); }
      { n0 = new NodeChoice(n331, 165); }
   |
      n334="negu" { n333 = JTBToolkit.makeNodeToken(n334); }
      { n0 = new NodeChoice(n333, 166); }
   |
      n336="nop" { n335 = JTBToolkit.makeNodeToken(n336); }
      { n0 = new NodeChoice(n335, 167); }
   |
      n338="nor" { n337 = JTBToolkit.makeNodeToken(n338); }
      { n0 = new NodeChoice(n337, 168); }
   |
      n340="not" { n339 = JTBToolkit.makeNodeToken(n340); }
      { n0 = new NodeChoice(n339, 169); }
   |
      n342="or" { n341 = JTBToolkit.makeNodeToken(n342); }
      { n0 = new NodeChoice(n341, 170); }
   |
      n344="ori" { n343 = JTBToolkit.makeNodeToken(n344); }
      { n0 = new NodeChoice(n343, 171); }
   |
      n346="pref" { n345 = JTBToolkit.makeNodeToken(n346); }
      { n0 = new NodeChoice(n345, 172); }
   |
      n348="prefx" { n347 = JTBToolkit.makeNodeToken(n348); }
      { n0 = new NodeChoice(n347, 173); }
   |
      n350="r2u" { n349 = JTBToolkit.makeNodeToken(n350); }
      { n0 = new NodeChoice(n349, 174); }
   |
      n352="radd" { n351 = JTBToolkit.makeNodeToken(n352); }
      { n0 = new NodeChoice(n351, 175); }
   |
      n354="rem" { n353 = JTBToolkit.makeNodeToken(n354); }
      { n0 = new NodeChoice(n353, 176); }
   |
      n356="remu" { n355 = JTBToolkit.makeNodeToken(n356); }
      { n0 = new NodeChoice(n355, 177); }
   |
      n358="rfe" { n357 = JTBToolkit.makeNodeToken(n358); }
      { n0 = new NodeChoice(n357, 178); }
   |
      n360="rmul" { n359 = JTBToolkit.makeNodeToken(n360); }
      { n0 = new NodeChoice(n359, 179); }
   |
      n362="rol" { n361 = JTBToolkit.makeNodeToken(n362); }
      { n0 = new NodeChoice(n361, 180); }
   |
      n364="ror" { n363 = JTBToolkit.makeNodeToken(n364); }
      { n0 = new NodeChoice(n363, 181); }
   |
      n366="rsub" { n365 = JTBToolkit.makeNodeToken(n366); }
      { n0 = new NodeChoice(n365, 182); }
   |
      n368="sb" { n367 = JTBToolkit.makeNodeToken(n368); }
      { n0 = new NodeChoice(n367, 183); }
   |
      n370="sc" { n369 = JTBToolkit.makeNodeToken(n370); }
      { n0 = new NodeChoice(n369, 184); }
   |
      n372="scd" { n371 = JTBToolkit.makeNodeToken(n372); }
      { n0 = new NodeChoice(n371, 185); }
   |
      n374="sd" { n373 = JTBToolkit.makeNodeToken(n374); }
      { n0 = new NodeChoice(n373, 186); }
   |
      n376="sdbbp" { n375 = JTBToolkit.makeNodeToken(n376); }
      { n0 = new NodeChoice(n375, 187); }
   |
      n378="sdc1" { n377 = JTBToolkit.makeNodeToken(n378); }
      { n0 = new NodeChoice(n377, 188); }
   |
      n380="sdl" { n379 = JTBToolkit.makeNodeToken(n380); }
      { n0 = new NodeChoice(n379, 189); }
   |
      n382="sdr" { n381 = JTBToolkit.makeNodeToken(n382); }
      { n0 = new NodeChoice(n381, 190); }
   |
      n384="sdxc1" { n383 = JTBToolkit.makeNodeToken(n384); }
      { n0 = new NodeChoice(n383, 191); }
   |
      n386="selsl" { n385 = JTBToolkit.makeNodeToken(n386); }
      { n0 = new NodeChoice(n385, 192); }
   |
      n388="selsr" { n387 = JTBToolkit.makeNodeToken(n388); }
      { n0 = new NodeChoice(n387, 193); }
   |
      n390="seq" { n389 = JTBToolkit.makeNodeToken(n390); }
      { n0 = new NodeChoice(n389, 194); }
   |
      n392="sge" { n391 = JTBToolkit.makeNodeToken(n392); }
      { n0 = new NodeChoice(n391, 195); }
   |
      n394="sgeu" { n393 = JTBToolkit.makeNodeToken(n394); }
      { n0 = new NodeChoice(n393, 196); }
   |
      n396="sgt" { n395 = JTBToolkit.makeNodeToken(n396); }
      { n0 = new NodeChoice(n395, 197); }
   |
      n398="sgtu" { n397 = JTBToolkit.makeNodeToken(n398); }
      { n0 = new NodeChoice(n397, 198); }
   |
      n400="sh" { n399 = JTBToolkit.makeNodeToken(n400); }
      { n0 = new NodeChoice(n399, 199); }
   |
      n402="sle" { n401 = JTBToolkit.makeNodeToken(n402); }
      { n0 = new NodeChoice(n401, 200); }
   |
      n404="sleu" { n403 = JTBToolkit.makeNodeToken(n404); }
      { n0 = new NodeChoice(n403, 201); }
   |
      n406="sll" { n405 = JTBToolkit.makeNodeToken(n406); }
      { n0 = new NodeChoice(n405, 202); }
   |
      n408="sllv" { n407 = JTBToolkit.makeNodeToken(n408); }
      { n0 = new NodeChoice(n407, 203); }
   |
      n410="slt" { n409 = JTBToolkit.makeNodeToken(n410); }
      { n0 = new NodeChoice(n409, 204); }
   |
      n412="slti" { n411 = JTBToolkit.makeNodeToken(n412); }
      { n0 = new NodeChoice(n411, 205); }
   |
      n414="sltiu" { n413 = JTBToolkit.makeNodeToken(n414); }
      { n0 = new NodeChoice(n413, 206); }
   |
      n416="sltu" { n415 = JTBToolkit.makeNodeToken(n416); }
      { n0 = new NodeChoice(n415, 207); }
   |
      n418="sne" { n417 = JTBToolkit.makeNodeToken(n418); }
      { n0 = new NodeChoice(n417, 208); }
   |
      n420="sra" { n419 = JTBToolkit.makeNodeToken(n420); }
      { n0 = new NodeChoice(n419, 209); }
   |
      n422="srav" { n421 = JTBToolkit.makeNodeToken(n422); }
      { n0 = new NodeChoice(n421, 210); }
   |
      n424="srl" { n423 = JTBToolkit.makeNodeToken(n424); }
      { n0 = new NodeChoice(n423, 211); }
   |
      n426="srlv" { n425 = JTBToolkit.makeNodeToken(n426); }
      { n0 = new NodeChoice(n425, 212); }
   |
      n428="standby" { n427 = JTBToolkit.makeNodeToken(n428); }
      { n0 = new NodeChoice(n427, 213); }
   |
      n430="sub" { n429 = JTBToolkit.makeNodeToken(n430); }
      { n0 = new NodeChoice(n429, 214); }
   |
      n432="subu" { n431 = JTBToolkit.makeNodeToken(n432); }
      { n0 = new NodeChoice(n431, 215); }
   |
      n434="suspend" { n433 = JTBToolkit.makeNodeToken(n434); }
      { n0 = new NodeChoice(n433, 216); }
   |
      n436="sw" { n435 = JTBToolkit.makeNodeToken(n436); }
      { n0 = new NodeChoice(n435, 217); }
   |
      n438="swc1" { n437 = JTBToolkit.makeNodeToken(n438); }
      { n0 = new NodeChoice(n437, 218); }
   |
      n440="swl" { n439 = JTBToolkit.makeNodeToken(n440); }
      { n0 = new NodeChoice(n439, 219); }
   |
      n442="swr" { n441 = JTBToolkit.makeNodeToken(n442); }
      { n0 = new NodeChoice(n441, 220); }
   |
      n444="swxc1" { n443 = JTBToolkit.makeNodeToken(n444); }
      { n0 = new NodeChoice(n443, 221); }
   |
      n446="sync" { n445 = JTBToolkit.makeNodeToken(n446); }
      { n0 = new NodeChoice(n445, 222); }
   |
      n448="syscall" { n447 = JTBToolkit.makeNodeToken(n448); }
      { n0 = new NodeChoice(n447, 223); }
   |
      n450="teq" { n449 = JTBToolkit.makeNodeToken(n450); }
      { n0 = new NodeChoice(n449, 224); }
   |
      n452="teqi" { n451 = JTBToolkit.makeNodeToken(n452); }
      { n0 = new NodeChoice(n451, 225); }
   |
      n454="tge" { n453 = JTBToolkit.makeNodeToken(n454); }
      { n0 = new NodeChoice(n453, 226); }
   |
      n456="tgei" { n455 = JTBToolkit.makeNodeToken(n456); }
      { n0 = new NodeChoice(n455, 227); }
   |
      n458="tgeiu" { n457 = JTBToolkit.makeNodeToken(n458); }
      { n0 = new NodeChoice(n457, 228); }
   |
      n460="tgeu" { n459 = JTBToolkit.makeNodeToken(n460); }
      { n0 = new NodeChoice(n459, 229); }
   |
      n462="tlbp" { n461 = JTBToolkit.makeNodeToken(n462); }
      { n0 = new NodeChoice(n461, 230); }
   |
      n464="tlbr" { n463 = JTBToolkit.makeNodeToken(n464); }
      { n0 = new NodeChoice(n463, 231); }
   |
      n466="tlbwi" { n465 = JTBToolkit.makeNodeToken(n466); }
      { n0 = new NodeChoice(n465, 232); }
   |
      n468="tlbwr" { n467 = JTBToolkit.makeNodeToken(n468); }
      { n0 = new NodeChoice(n467, 233); }
   |
      n470="tlt" { n469 = JTBToolkit.makeNodeToken(n470); }
      { n0 = new NodeChoice(n469, 234); }
   |
      n472="tlti" { n471 = JTBToolkit.makeNodeToken(n472); }
      { n0 = new NodeChoice(n471, 235); }
   |
      n474="tltiu" { n473 = JTBToolkit.makeNodeToken(n474); }
      { n0 = new NodeChoice(n473, 236); }
   |
      n476="tltu" { n475 = JTBToolkit.makeNodeToken(n476); }
      { n0 = new NodeChoice(n475, 237); }
   |
      n478="tne" { n477 = JTBToolkit.makeNodeToken(n478); }
      { n0 = new NodeChoice(n477, 238); }
   |
      n480="tnei" { n479 = JTBToolkit.makeNodeToken(n480); }
      { n0 = new NodeChoice(n479, 239); }
   |
      n482="u2r" { n481 = JTBToolkit.makeNodeToken(n482); }
      { n0 = new NodeChoice(n481, 240); }
   |
      n484="uld" { n483 = JTBToolkit.makeNodeToken(n484); }
      { n0 = new NodeChoice(n483, 241); }
   |
      n486="ulh" { n485 = JTBToolkit.makeNodeToken(n486); }
      { n0 = new NodeChoice(n485, 242); }
   |
      n488="ulhu" { n487 = JTBToolkit.makeNodeToken(n488); }
      { n0 = new NodeChoice(n487, 243); }
   |
      n490="ulw" { n489 = JTBToolkit.makeNodeToken(n490); }
      { n0 = new NodeChoice(n489, 244); }
   |
      n492="usd" { n491 = JTBToolkit.makeNodeToken(n492); }
      { n0 = new NodeChoice(n491, 245); }
   |
      n494="ushusw" { n493 = JTBToolkit.makeNodeToken(n494); }
      { n0 = new NodeChoice(n493, 246); }
   |
      n496="waiti" { n495 = JTBToolkit.makeNodeToken(n496); }
      { n0 = new NodeChoice(n495, 247); }
   |
      n498="wb" { n497 = JTBToolkit.makeNodeToken(n498); }
      { n0 = new NodeChoice(n497, 248); }
   |
      n500="xor" { n499 = JTBToolkit.makeNodeToken(n500); }
      { n0 = new NodeChoice(n499, 249); }
   |
      n502="xori" { n501 = JTBToolkit.makeNodeToken(n502); }
      { n0 = new NodeChoice(n501, 250); }
   |
      n504="abs.s" { n503 = JTBToolkit.makeNodeToken(n504); }
      { n0 = new NodeChoice(n503, 251); }
   |
      n506="add.s" { n505 = JTBToolkit.makeNodeToken(n506); }
      { n0 = new NodeChoice(n505, 252); }
   |
      n508="c.eq.s" { n507 = JTBToolkit.makeNodeToken(n508); }
      { n0 = new NodeChoice(n507, 253); }
   |
      n510="c.f.s" { n509 = JTBToolkit.makeNodeToken(n510); }
      { n0 = new NodeChoice(n509, 254); }
   |
      n512="c.le.s" { n511 = JTBToolkit.makeNodeToken(n512); }
      { n0 = new NodeChoice(n511, 255); }
   |
      n514="c.lt.s" { n513 = JTBToolkit.makeNodeToken(n514); }
      { n0 = new NodeChoice(n513, 256); }
   |
      n516="c.nge.s" { n515 = JTBToolkit.makeNodeToken(n516); }
      { n0 = new NodeChoice(n515, 257); }
   |
      n518="c.ngl.s" { n517 = JTBToolkit.makeNodeToken(n518); }
      { n0 = new NodeChoice(n517, 258); }
   |
      n520="c.ngt.s" { n519 = JTBToolkit.makeNodeToken(n520); }
      { n0 = new NodeChoice(n519, 259); }
   |
      n522="c.ole.s" { n521 = JTBToolkit.makeNodeToken(n522); }
      { n0 = new NodeChoice(n521, 260); }
   |
      n524="c.olt.s" { n523 = JTBToolkit.makeNodeToken(n524); }
      { n0 = new NodeChoice(n523, 261); }
   |
      n526="c.seq.s" { n525 = JTBToolkit.makeNodeToken(n526); }
      { n0 = new NodeChoice(n525, 262); }
   |
      n528="c.sf.s" { n527 = JTBToolkit.makeNodeToken(n528); }
      { n0 = new NodeChoice(n527, 263); }
   |
      n530="c.ueq.s" { n529 = JTBToolkit.makeNodeToken(n530); }
      { n0 = new NodeChoice(n529, 264); }
   |
      n532="c.ule.s" { n531 = JTBToolkit.makeNodeToken(n532); }
      { n0 = new NodeChoice(n531, 265); }
   |
      n534="c.ult.s" { n533 = JTBToolkit.makeNodeToken(n534); }
      { n0 = new NodeChoice(n533, 266); }
   |
      n536="c.un.s" { n535 = JTBToolkit.makeNodeToken(n536); }
      { n0 = new NodeChoice(n535, 267); }
   |
      n538="ceil.l.d" { n537 = JTBToolkit.makeNodeToken(n538); }
      { n0 = new NodeChoice(n537, 268); }
   |
      n540="ceil.l.s" { n539 = JTBToolkit.makeNodeToken(n540); }
      { n0 = new NodeChoice(n539, 269); }
   |
      n542="ceil.w.d" { n541 = JTBToolkit.makeNodeToken(n542); }
      { n0 = new NodeChoice(n541, 270); }
   |
      n544="ceil.w.s" { n543 = JTBToolkit.makeNodeToken(n544); }
      { n0 = new NodeChoice(n543, 271); }
   |
      n546="cvt.d.l" { n545 = JTBToolkit.makeNodeToken(n546); }
      { n0 = new NodeChoice(n545, 272); }
   |
      n548="cvt.d.s" { n547 = JTBToolkit.makeNodeToken(n548); }
      { n0 = new NodeChoice(n547, 273); }
   |
      n550="cvt.d.w" { n549 = JTBToolkit.makeNodeToken(n550); }
      { n0 = new NodeChoice(n549, 274); }
   |
      n552="cvt.l.d" { n551 = JTBToolkit.makeNodeToken(n552); }
      { n0 = new NodeChoice(n551, 275); }
   |
      n554="cvt.l.s" { n553 = JTBToolkit.makeNodeToken(n554); }
      { n0 = new NodeChoice(n553, 276); }
   |
      n556="cvt.s.d" { n555 = JTBToolkit.makeNodeToken(n556); }
      { n0 = new NodeChoice(n555, 277); }
   |
      n558="cvt.s.l" { n557 = JTBToolkit.makeNodeToken(n558); }
      { n0 = new NodeChoice(n557, 278); }
   |
      n560="cvt.s.w" { n559 = JTBToolkit.makeNodeToken(n560); }
      { n0 = new NodeChoice(n559, 279); }
   |
      n562="cvt.w.d" { n561 = JTBToolkit.makeNodeToken(n562); }
      { n0 = new NodeChoice(n561, 280); }
   |
      n564="cvt.w.s" { n563 = JTBToolkit.makeNodeToken(n564); }
      { n0 = new NodeChoice(n563, 281); }
   |
      n566="div.s" { n565 = JTBToolkit.makeNodeToken(n566); }
      { n0 = new NodeChoice(n565, 282); }
   |
      n568="floor.l.d" { n567 = JTBToolkit.makeNodeToken(n568); }
      { n0 = new NodeChoice(n567, 283); }
   |
      n570="floor.l.s" { n569 = JTBToolkit.makeNodeToken(n570); }
      { n0 = new NodeChoice(n569, 284); }
   |
      n572="floor.w.d" { n571 = JTBToolkit.makeNodeToken(n572); }
      { n0 = new NodeChoice(n571, 285); }
   |
      n574="floor.w.s" { n573 = JTBToolkit.makeNodeToken(n574); }
      { n0 = new NodeChoice(n573, 286); }
   |
      n576="l.d" { n575 = JTBToolkit.makeNodeToken(n576); }
      { n0 = new NodeChoice(n575, 287); }
   |
      n578="l.s" { n577 = JTBToolkit.makeNodeToken(n578); }
      { n0 = new NodeChoice(n577, 288); }
   |
      n580="ldc1" { n579 = JTBToolkit.makeNodeToken(n580); }
      { n0 = new NodeChoice(n579, 289); }
   |
      n582="madd.s" { n581 = JTBToolkit.makeNodeToken(n582); }
      { n0 = new NodeChoice(n581, 290); }
   |
      n584="mov.s" { n583 = JTBToolkit.makeNodeToken(n584); }
      { n0 = new NodeChoice(n583, 291); }
   |
      n586="movf.s" { n585 = JTBToolkit.makeNodeToken(n586); }
      { n0 = new NodeChoice(n585, 292); }
   |
      n588="movn.s" { n587 = JTBToolkit.makeNodeToken(n588); }
      { n0 = new NodeChoice(n587, 293); }
   |
      n590="movt.s" { n589 = JTBToolkit.makeNodeToken(n590); }
      { n0 = new NodeChoice(n589, 294); }
   |
      n592="movz.s" { n591 = JTBToolkit.makeNodeToken(n592); }
      { n0 = new NodeChoice(n591, 295); }
   |
      n594="msub.s" { n593 = JTBToolkit.makeNodeToken(n594); }
      { n0 = new NodeChoice(n593, 296); }
   |
      n596="mul.s" { n595 = JTBToolkit.makeNodeToken(n596); }
      { n0 = new NodeChoice(n595, 297); }
   |
      n598="neg.s" { n597 = JTBToolkit.makeNodeToken(n598); }
      { n0 = new NodeChoice(n597, 298); }
   |
      n600="nmadd.s" { n599 = JTBToolkit.makeNodeToken(n600); }
      { n0 = new NodeChoice(n599, 299); }
   |
      n602="nmsub.s" { n601 = JTBToolkit.makeNodeToken(n602); }
      { n0 = new NodeChoice(n601, 300); }
   |
      n604="recip.s" { n603 = JTBToolkit.makeNodeToken(n604); }
      { n0 = new NodeChoice(n603, 301); }
   |
      n606="round.l.d" { n605 = JTBToolkit.makeNodeToken(n606); }
      { n0 = new NodeChoice(n605, 302); }
   |
      n608="round.l.s" { n607 = JTBToolkit.makeNodeToken(n608); }
      { n0 = new NodeChoice(n607, 303); }
   |
      n610="round.w.d" { n609 = JTBToolkit.makeNodeToken(n610); }
      { n0 = new NodeChoice(n609, 304); }
   |
      n612="round.w.s" { n611 = JTBToolkit.makeNodeToken(n612); }
      { n0 = new NodeChoice(n611, 305); }
   |
      n614="rsqrt.s" { n613 = JTBToolkit.makeNodeToken(n614); }
      { n0 = new NodeChoice(n613, 306); }
   |
      n616="s.d" { n615 = JTBToolkit.makeNodeToken(n616); }
      { n0 = new NodeChoice(n615, 307); }
   |
      n618="s.s" { n617 = JTBToolkit.makeNodeToken(n618); }
      { n0 = new NodeChoice(n617, 308); }
   |
      n620="sqrt.s" { n619 = JTBToolkit.makeNodeToken(n620); }
      { n0 = new NodeChoice(n619, 309); }
   |
      n622="sub.s" { n621 = JTBToolkit.makeNodeToken(n622); }
      { n0 = new NodeChoice(n621, 310); }
   |
      n624="trunc.l.d" { n623 = JTBToolkit.makeNodeToken(n624); }
      { n0 = new NodeChoice(n623, 311); }
   |
      n626="trunc.l.s" { n625 = JTBToolkit.makeNodeToken(n626); }
      { n0 = new NodeChoice(n625, 312); }
   )
   
   { return new OpCode(n0); }
}
