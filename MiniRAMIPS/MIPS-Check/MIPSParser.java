/* Generated By:JavaCC: Do not edit this line. MIPSParser.java */
import syntaxtree.*;
import java.util.Vector;


public class MIPSParser implements MIPSParserConstants {

  static final public Goal Goal() throws ParseException {
   StmtList n0;
   NodeToken n1;
   Token n2;
    n0 = StmtList();
    n2 = jj_consume_token(0);
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new Goal(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public StmtList StmtList() throws ParseException {
   Stmt n0;
   NodeOptional n1 = new NodeOptional();
   StmtList n2;
    n0 = Stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABS:
    case ADD:
    case ADDCIU:
    case ADDU:
    case AND:
    case B:
    case BAL:
    case BC0F:
    case BC0FL:
    case BC0T:
    case BC0TLBC1F:
    case BC1FL:
    case BC1T:
    case BC1TL:
    case BC2F:
    case BC2FL:
    case BC2T:
    case BC2TL:
    case BEQ:
    case BEQL:
    case BEQZ:
    case BEQZL:
    case BGE:
    case BGEL:
    case BGEU:
    case BGEUL:
    case BGEZ:
    case BGEZAL:
    case BGEZALL:
    case BGEZL:
    case BGT:
    case BGTL:
    case BGTU:
    case BGTUL:
    case BGTZ:
    case BGTZL:
    case BLE:
    case BLEL:
    case BLEU:
    case BLEUL:
    case BLEZ:
    case BLEZL:
    case BLT:
    case BLTL:
    case BLTU:
    case BLTUL:
    case BLTZ:
    case BLTZAL:
    case BLTZALL:
    case BLTZL:
    case BNE:
    case BNEL:
    case BNEZ:
    case BNEZL:
    case BREAK:
    case CACHE:
    case CFC0:
    case CFC1:
    case CFC2:
    case CTC0:
    case CTC1:
    case CTC2:
    case DABS:
    case DADD:
    case DADDI:
    case DADDIU:
    case DADDU:
    case DDIV:
    case DDIVD:
    case DDIVDU:
    case DDIVU:
    case DIV:
    case DIVD:
    case DIVDU:
    case DIVO:
    case DIVOU:
    case DIVU:
    case DLA:
    case DLI:
    case DMADD16:
    case DMFC0:
    case DMFC1:
    case DMFC2:
    case DMTC0:
    case DMTC1:
    case DMTC2:
    case DMUL:
    case DMULO:
    case DMULOU:
    case DMULT:
    case DMULTU:
    case DNEG:
    case DNEGU:
    case DREM:
    case DREMU:
    case DRET:
    case DROL:
    case DROR:
    case DSLL:
    case DSLLV:
    case DSLL32:
    case DSRA:
    case DSRA32:
    case DSRL:
    case DSRLV:
    case DSRL32:
    case DSUB:
    case DSUBU:
    case ERET:
    case FFC:
    case FFS:
    case FLUSHD:
    case J:
    case JR:
    case JAL:
    case JALR:
    case LA:
    case LB:
    case LBU:
    case LD:
    case LDL:
    case LDR:
    case LDXC1:
    case LH:
    case LHU:
    case LI:
    case LL:
    case LLD:
    case LUI:
    case LW:
    case LWC1:
    case LWL:
    case LWR:
    case LWU:
    case LWXC1:
    case MADD:
    case MADDU:
    case MAD:
    case MADU:
    case MADD16:
    case MAX:
    case MFC0:
    case MFC1:
    case MFC2:
    case MFHI:
    case MFLO:
    case MIN:
    case MOVE:
    case MOVF:
    case MOVN:
    case MOVT:
    case MOVZ:
    case MSUB:
    case MSUBU:
    case MTC0:
    case MTC1:
    case MTC2:
    case MTHI:
    case MTLO:
    case MUL:
    case MULU:
    case MULO:
    case MULOU:
    case MULT:
    case MULTU:
    case NEG:
    case NEGU:
    case NOP:
    case NOR:
    case NOT:
    case OR:
    case ORI:
    case PREF:
    case PREFX:
    case R2U:
    case RADD:
    case REM:
    case REMU:
    case RFE:
    case RMUL:
    case ROL:
    case ROR:
    case RSUB:
    case SB:
    case SC:
    case SCD:
    case SD:
    case SDBBP:
    case SDC1:
    case SDL:
    case SDR:
    case SDXC1:
    case SELSL:
    case SELSR:
    case SEQ:
    case SGE:
    case SGEU:
    case SGT:
    case SGTU:
    case SH:
    case SLE:
    case SLEU:
    case SLL:
    case SLLV:
    case SLT:
    case SLTI:
    case SLTIU:
    case SLTU:
    case SNE:
    case SRA:
    case SRAV:
    case SRL:
    case SRLV:
    case STANDBY:
    case SUB:
    case SUBU:
    case SUSPEND:
    case SW:
    case SWC1:
    case SWL:
    case SWR:
    case SWXC1:
    case SYNC:
    case SYSCALL:
    case TEQ:
    case TEQI:
    case TGE:
    case TGEI:
    case TGEIU:
    case TGEU:
    case TLBP:
    case TLBR:
    case TLBWI:
    case TLBWR:
    case TLT:
    case TLTI:
    case TLTIU:
    case TLTU:
    case TNE:
    case TNEI:
    case U2R:
    case ULD:
    case ULH:
    case ULHU:
    case ULW:
    case USD:
    case USHUSW:
    case WAITI:
    case WB:
    case XOR:
    case XORI:
    case ABS_S:
    case ADD_S:
    case C_EQ_S:
    case C_F_S:
    case C_LE_S:
    case C_LT_S:
    case C_NGE_S:
    case C_NGL_S:
    case C_NGT_S:
    case C_OLE_S:
    case C_OLT_S:
    case C_SEQ_S:
    case C_SF_S:
    case C_UEQ_S:
    case C_ULE_S:
    case C_ULT_S:
    case C_UN_S:
    case CEIL_L_D:
    case CEIL_L_S:
    case CEIL_W_D:
    case CEIL_W_S:
    case CVT_D_L:
    case CVT_D_S:
    case CVT_D_W:
    case CVT_L_D:
    case CVT_L_S:
    case CVT_S_D:
    case CVT_S_L:
    case CVT_S_W:
    case CVT_W_D:
    case CVT_W_S:
    case DIV_S:
    case FLOOR_L_D:
    case FLOOR_L_S:
    case FLOOR_W_D:
    case FLOOR_W_S:
    case L_D:
    case L_S:
    case LDC1:
    case MADD_S:
    case MOV_S:
    case MOVF_S:
    case MOVN_S:
    case MOVT_S:
    case MOVZ_S:
    case MSUB_S:
    case MUL_S:
    case NEG_S:
    case NMADD_S:
    case NMSUB_S:
    case RECIP_S:
    case ROUND_L_D:
    case ROUND_L_S:
    case ROUND_W_D:
    case ROUND_W_S:
    case RSQRT_S:
    case S_D:
    case S_S:
    case SQRT_S:
    case SUB_S:
    case TRUNC_L_D:
    case TRUNC_L_S:
    case ASCII:
    case ASCIIZ:
    case SPACE:
    case BYTE:
    case HALF:
    case WORD:
    case DOUBLE:
    case FLOAT2:
    case SET:
    case TEXT:
    case DATA:
    case RDATA:
    case SDATA:
    case ALIGN:
    case GLOBL:
    case EXTERN:
    case COMM:
    case LCOMM:
    case ENT:
    case AENT:
    case MASK:
    case FMASK:
    case FRAME:
    case END:
    case ALIAS:
    case BGNB:
    case ENDB:
    case FILE:
    case GALIVE:
    case GJALDEF:
    case GJRLIVE:
    case LAB:
    case LIVEREG:
    case NOALIAS:
    case OPTION:
    case VERSTAMP:
    case VREG:
    case IDENTIFIER_COLON:
    case IDENTIFIER_EQUAL:
    case DECIMAL_COLON:
      n2 = StmtList();
        n1.addNode(n2);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
     {if (true) return new StmtList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Stmt Stmt() throws ParseException {
   Stat n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;
    n0 = Stat();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      n3 = jj_consume_token(SEMI);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
     {if (true) return new Stmt(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Stat Stat() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   Label n2;
   Instruction n3;
   NodeSequence n4;
   Label n5;
   Data n6;
   Label n7;
   Instruction n8;
   Data n9;
   SymDef n10;
   Directive n11;
    if (jj_2_1(2147483647)) {
        n1 = new NodeSequence(3);
      n2 = Label();
        n1.addNode(n2);
      n3 = Instruction();
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_2(2147483647)) {
        n4 = new NodeSequence(3);
      n5 = Label();
        n4.addNode(n5);
      n6 = Data();
        n4.addNode(n6);
        n0 = new NodeChoice(n4, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER_COLON:
      case DECIMAL_COLON:
        n7 = Label();
        n0 = new NodeChoice(n7, 2);
        break;
      case ABS:
      case ADD:
      case ADDCIU:
      case ADDU:
      case AND:
      case B:
      case BAL:
      case BC0F:
      case BC0FL:
      case BC0T:
      case BC0TLBC1F:
      case BC1FL:
      case BC1T:
      case BC1TL:
      case BC2F:
      case BC2FL:
      case BC2T:
      case BC2TL:
      case BEQ:
      case BEQL:
      case BEQZ:
      case BEQZL:
      case BGE:
      case BGEL:
      case BGEU:
      case BGEUL:
      case BGEZ:
      case BGEZAL:
      case BGEZALL:
      case BGEZL:
      case BGT:
      case BGTL:
      case BGTU:
      case BGTUL:
      case BGTZ:
      case BGTZL:
      case BLE:
      case BLEL:
      case BLEU:
      case BLEUL:
      case BLEZ:
      case BLEZL:
      case BLT:
      case BLTL:
      case BLTU:
      case BLTUL:
      case BLTZ:
      case BLTZAL:
      case BLTZALL:
      case BLTZL:
      case BNE:
      case BNEL:
      case BNEZ:
      case BNEZL:
      case BREAK:
      case CACHE:
      case CFC0:
      case CFC1:
      case CFC2:
      case CTC0:
      case CTC1:
      case CTC2:
      case DABS:
      case DADD:
      case DADDI:
      case DADDIU:
      case DADDU:
      case DDIV:
      case DDIVD:
      case DDIVDU:
      case DDIVU:
      case DIV:
      case DIVD:
      case DIVDU:
      case DIVO:
      case DIVOU:
      case DIVU:
      case DLA:
      case DLI:
      case DMADD16:
      case DMFC0:
      case DMFC1:
      case DMFC2:
      case DMTC0:
      case DMTC1:
      case DMTC2:
      case DMUL:
      case DMULO:
      case DMULOU:
      case DMULT:
      case DMULTU:
      case DNEG:
      case DNEGU:
      case DREM:
      case DREMU:
      case DRET:
      case DROL:
      case DROR:
      case DSLL:
      case DSLLV:
      case DSLL32:
      case DSRA:
      case DSRA32:
      case DSRL:
      case DSRLV:
      case DSRL32:
      case DSUB:
      case DSUBU:
      case ERET:
      case FFC:
      case FFS:
      case FLUSHD:
      case J:
      case JR:
      case JAL:
      case JALR:
      case LA:
      case LB:
      case LBU:
      case LD:
      case LDL:
      case LDR:
      case LDXC1:
      case LH:
      case LHU:
      case LI:
      case LL:
      case LLD:
      case LUI:
      case LW:
      case LWC1:
      case LWL:
      case LWR:
      case LWU:
      case LWXC1:
      case MADD:
      case MADDU:
      case MAD:
      case MADU:
      case MADD16:
      case MAX:
      case MFC0:
      case MFC1:
      case MFC2:
      case MFHI:
      case MFLO:
      case MIN:
      case MOVE:
      case MOVF:
      case MOVN:
      case MOVT:
      case MOVZ:
      case MSUB:
      case MSUBU:
      case MTC0:
      case MTC1:
      case MTC2:
      case MTHI:
      case MTLO:
      case MUL:
      case MULU:
      case MULO:
      case MULOU:
      case MULT:
      case MULTU:
      case NEG:
      case NEGU:
      case NOP:
      case NOR:
      case NOT:
      case OR:
      case ORI:
      case PREF:
      case PREFX:
      case R2U:
      case RADD:
      case REM:
      case REMU:
      case RFE:
      case RMUL:
      case ROL:
      case ROR:
      case RSUB:
      case SB:
      case SC:
      case SCD:
      case SD:
      case SDBBP:
      case SDC1:
      case SDL:
      case SDR:
      case SDXC1:
      case SELSL:
      case SELSR:
      case SEQ:
      case SGE:
      case SGEU:
      case SGT:
      case SGTU:
      case SH:
      case SLE:
      case SLEU:
      case SLL:
      case SLLV:
      case SLT:
      case SLTI:
      case SLTIU:
      case SLTU:
      case SNE:
      case SRA:
      case SRAV:
      case SRL:
      case SRLV:
      case STANDBY:
      case SUB:
      case SUBU:
      case SUSPEND:
      case SW:
      case SWC1:
      case SWL:
      case SWR:
      case SWXC1:
      case SYNC:
      case SYSCALL:
      case TEQ:
      case TEQI:
      case TGE:
      case TGEI:
      case TGEIU:
      case TGEU:
      case TLBP:
      case TLBR:
      case TLBWI:
      case TLBWR:
      case TLT:
      case TLTI:
      case TLTIU:
      case TLTU:
      case TNE:
      case TNEI:
      case U2R:
      case ULD:
      case ULH:
      case ULHU:
      case ULW:
      case USD:
      case USHUSW:
      case WAITI:
      case WB:
      case XOR:
      case XORI:
      case ABS_S:
      case ADD_S:
      case C_EQ_S:
      case C_F_S:
      case C_LE_S:
      case C_LT_S:
      case C_NGE_S:
      case C_NGL_S:
      case C_NGT_S:
      case C_OLE_S:
      case C_OLT_S:
      case C_SEQ_S:
      case C_SF_S:
      case C_UEQ_S:
      case C_ULE_S:
      case C_ULT_S:
      case C_UN_S:
      case CEIL_L_D:
      case CEIL_L_S:
      case CEIL_W_D:
      case CEIL_W_S:
      case CVT_D_L:
      case CVT_D_S:
      case CVT_D_W:
      case CVT_L_D:
      case CVT_L_S:
      case CVT_S_D:
      case CVT_S_L:
      case CVT_S_W:
      case CVT_W_D:
      case CVT_W_S:
      case DIV_S:
      case FLOOR_L_D:
      case FLOOR_L_S:
      case FLOOR_W_D:
      case FLOOR_W_S:
      case L_D:
      case L_S:
      case LDC1:
      case MADD_S:
      case MOV_S:
      case MOVF_S:
      case MOVN_S:
      case MOVT_S:
      case MOVZ_S:
      case MSUB_S:
      case MUL_S:
      case NEG_S:
      case NMADD_S:
      case NMSUB_S:
      case RECIP_S:
      case ROUND_L_D:
      case ROUND_L_S:
      case ROUND_W_D:
      case ROUND_W_S:
      case RSQRT_S:
      case S_D:
      case S_S:
      case SQRT_S:
      case SUB_S:
      case TRUNC_L_D:
      case TRUNC_L_S:
        n8 = Instruction();
        n0 = new NodeChoice(n8, 3);
        break;
      case ASCII:
      case ASCIIZ:
      case SPACE:
      case BYTE:
      case HALF:
      case WORD:
      case DOUBLE:
      case FLOAT2:
        n9 = Data();
        n0 = new NodeChoice(n9, 4);
        break;
      case IDENTIFIER_EQUAL:
        n10 = SymDef();
        n0 = new NodeChoice(n10, 5);
        break;
      case SET:
      case TEXT:
      case DATA:
      case RDATA:
      case SDATA:
      case ALIGN:
      case GLOBL:
      case EXTERN:
      case COMM:
      case LCOMM:
      case ENT:
      case AENT:
      case MASK:
      case FMASK:
      case FRAME:
      case END:
      case ALIAS:
      case BGNB:
      case ENDB:
      case FILE:
      case GALIVE:
      case GJALDEF:
      case GJRLIVE:
      case LAB:
      case LIVEREG:
      case NOALIAS:
      case OPTION:
      case VERSTAMP:
      case VREG:
        n11 = Directive();
        n0 = new NodeChoice(n11, 6);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Stat(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Label Label() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER_COLON:
      n2 = jj_consume_token(IDENTIFIER_COLON);
                              n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case DECIMAL_COLON:
      n4 = jj_consume_token(DECIMAL_COLON);
                           n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Label(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Instruction Instruction() throws ParseException {
   OpCode n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   Operand n3;
   NodeOptional n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Operand n8;
   NodeOptional n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Operand n13;
    n0 = OpCode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case LPAREN:
    case PLUS:
    case MINUS:
    case TILDE:
    case BANG:
    case ZERO:
    case AT:
    case V0:
    case V1:
    case A0:
    case A1:
    case A2:
    case A3:
    case T0:
    case T1:
    case T2:
    case T3:
    case T4:
    case T5:
    case T6:
    case T7:
    case S0:
    case S1:
    case S2:
    case S3:
    case S4:
    case S5:
    case S6:
    case S7:
    case T8:
    case T9:
    case K0:
    case K1:
    case GP:
    case SP:
    case S8:
    case FP:
    case RA:
    case DZERO:
    case DAT:
    case DV0:
    case DV1:
    case DA0:
    case DA1:
    case DA2:
    case DA3:
    case DT0:
    case DT1:
    case DT2:
    case DT3:
    case DT4:
    case DT5:
    case DT6:
    case DT7:
    case DS0:
    case DS1:
    case DS2:
    case DS3:
    case DS4:
    case DS5:
    case DS6:
    case DS7:
    case DT8:
    case DT9:
    case DK0:
    case DK1:
    case DGP:
    case DSP:
    case DS8:
    case DFP:
    case DRA:
    case DECIMAL:
    case FLOAT:
    case HEXADECIMAL:
    case OCTAL:
    case CHARACTER:
    case DOLLAR_DECIMAL:
    case DOLLAR_F_DECIMAL:
    case IDENTIFIER:
    case DECIMAL_B:
    case DECIMAL_F:
        n4 = new NodeOptional();
        n2 = new NodeSequence(2);
      n3 = Operand();
        n2.addNode(n3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
           n9 = new NodeOptional();
           n5 = new NodeSequence(3);
        n7 = jj_consume_token(COMMA);
                  n6 = JTBToolkit.makeNodeToken(n7);
           n5.addNode(n6);
        n8 = Operand();
           n5.addNode(n8);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
              n10 = new NodeSequence(2);
          n12 = jj_consume_token(COMMA);
                      n11 = JTBToolkit.makeNodeToken(n12);
              n10.addNode(n11);
          n13 = Operand();
              n10.addNode(n13);
              n9.addNode(n10);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
           n5.addNode(n9);
           n4.addNode(n5);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
        n2.addNode(n4);
        n1.addNode(n2);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
     {if (true) return new Instruction(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Operand Operand() throws ParseException {
   NodeChoice n0;
   Register n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Register n5;
   NodeToken n6;
   Token n7;
   FloatRegister n8;
   NodeSequence n9;
   AddrImmed n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Register n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ZERO:
    case AT:
    case V0:
    case V1:
    case A0:
    case A1:
    case A2:
    case A3:
    case T0:
    case T1:
    case T2:
    case T3:
    case T4:
    case T5:
    case T6:
    case T7:
    case S0:
    case S1:
    case S2:
    case S3:
    case S4:
    case S5:
    case S6:
    case S7:
    case T8:
    case T9:
    case K0:
    case K1:
    case GP:
    case SP:
    case S8:
    case FP:
    case RA:
    case DZERO:
    case DAT:
    case DV0:
    case DV1:
    case DA0:
    case DA1:
    case DA2:
    case DA3:
    case DT0:
    case DT1:
    case DT2:
    case DT3:
    case DT4:
    case DT5:
    case DT6:
    case DT7:
    case DS0:
    case DS1:
    case DS2:
    case DS3:
    case DS4:
    case DS5:
    case DS6:
    case DS7:
    case DT8:
    case DT9:
    case DK0:
    case DK1:
    case DGP:
    case DSP:
    case DS8:
    case DFP:
    case DRA:
    case DOLLAR_DECIMAL:
      n1 = Register();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[8] = jj_gen;
      if (jj_2_3(2147483647)) {
        n2 = new NodeSequence(4);
        n4 = jj_consume_token(LPAREN);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
        n5 = Register();
        n2.addNode(n5);
        n7 = jj_consume_token(RPAREN);
               n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
        n0 = new NodeChoice(n2, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLLAR_F_DECIMAL:
          n8 = FloatRegister();
        n0 = new NodeChoice(n8, 2);
          break;
        case DOT:
        case LPAREN:
        case PLUS:
        case MINUS:
        case TILDE:
        case BANG:
        case DECIMAL:
        case HEXADECIMAL:
        case OCTAL:
        case CHARACTER:
        case IDENTIFIER:
        case DECIMAL_B:
        case DECIMAL_F:
        n9 = new NodeSequence(2);
          n10 = AddrImmed();
        n9.addNode(n10);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
           n12 = new NodeSequence(3);
            n14 = jj_consume_token(LPAREN);
                   n13 = JTBToolkit.makeNodeToken(n14);
           n12.addNode(n13);
            n15 = Register();
           n12.addNode(n15);
            n17 = jj_consume_token(RPAREN);
                   n16 = JTBToolkit.makeNodeToken(n17);
           n12.addNode(n16);
           n11.addNode(n12);
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
        n9.addNode(n11);
        n0 = new NodeChoice(n9, 3);
          break;
        case FLOAT:
          n19 = jj_consume_token(FLOAT);
                    n18 = JTBToolkit.makeNodeToken(n19);
        n0 = new NodeChoice(n18, 4);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new Operand(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Register Register() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   RegisterName n3;
   DollarRegisterName n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR_DECIMAL:
      n2 = jj_consume_token(DOLLAR_DECIMAL);
                            n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case ZERO:
    case AT:
    case V0:
    case V1:
    case A0:
    case A1:
    case A2:
    case A3:
    case T0:
    case T1:
    case T2:
    case T3:
    case T4:
    case T5:
    case T6:
    case T7:
    case S0:
    case S1:
    case S2:
    case S3:
    case S4:
    case S5:
    case S6:
    case S7:
    case T8:
    case T9:
    case K0:
    case K1:
    case GP:
    case SP:
    case S8:
    case FP:
    case RA:
      n3 = RegisterName();
        n0 = new NodeChoice(n3, 1);
      break;
    case DZERO:
    case DAT:
    case DV0:
    case DV1:
    case DA0:
    case DA1:
    case DA2:
    case DA3:
    case DT0:
    case DT1:
    case DT2:
    case DT3:
    case DT4:
    case DT5:
    case DT6:
    case DT7:
    case DS0:
    case DS1:
    case DS2:
    case DS3:
    case DS4:
    case DS5:
    case DS6:
    case DS7:
    case DT8:
    case DT9:
    case DK0:
    case DK1:
    case DGP:
    case DSP:
    case DS8:
    case DFP:
    case DRA:
      n4 = DollarRegisterName();
        n0 = new NodeChoice(n4, 2);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Register(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FloatRegister FloatRegister() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(DOLLAR_F_DECIMAL);
                           n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FloatRegister(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public AddrImmed AddrImmed() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   LabelExpr n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   Expr n10;
   Expr n11;
    if (jj_2_4(2147483647)) {
        n1 = new NodeSequence(3);
      n2 = LabelExpr();
        n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
           n4 = new NodeSequence(2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          n7 = jj_consume_token(PLUS);
                        n6 = JTBToolkit.makeNodeToken(n7);
                 n5 = new NodeChoice(n6, 0);
          break;
        case MINUS:
          n9 = jj_consume_token(MINUS);
                        n8 = JTBToolkit.makeNodeToken(n9);
                 n5 = new NodeChoice(n8, 1);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           n4.addNode(n5);
        n10 = Expr();
           n4.addNode(n10);
           n3.addNode(n4);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case PLUS:
      case MINUS:
      case TILDE:
      case BANG:
      case DECIMAL:
      case HEXADECIMAL:
      case OCTAL:
      case CHARACTER:
      case IDENTIFIER:
        n11 = Expr();
        n0 = new NodeChoice(n11, 1);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new AddrImmed(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LabelExpr LabelExpr() throws ParseException {
   LabelRef n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LabelRef n5;
    n0 = LabelRef();
    if (jj_2_5(2147483647)) {
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(MINUS);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = LabelRef();
        n2.addNode(n5);
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new LabelExpr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public LabelRef LabelRef() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_B:
      n2 = jj_consume_token(DECIMAL_B);
                       n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case DECIMAL_F:
      n4 = jj_consume_token(DECIMAL_F);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case IDENTIFIER:
      n6 = jj_consume_token(IDENTIFIER);
                        n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case DOT:
      n8 = jj_consume_token(DOT);
               n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new LabelRef(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Data Data() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   DataMode n2;
   DataList n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   Expr n17;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BYTE:
    case HALF:
    case WORD:
    case DOUBLE:
    case FLOAT2:
        n1 = new NodeSequence(2);
      n2 = DataMode();
        n1.addNode(n2);
      n3 = DataList();
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case ASCII:
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(ASCII);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n8 = jj_consume_token(STRING);
                    n7 = JTBToolkit.makeNodeToken(n8);
        n4.addNode(n7);
        n0 = new NodeChoice(n4, 1);
      break;
    case ASCIIZ:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(ASCIIZ);
                      n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n13 = jj_consume_token(STRING);
                     n12 = JTBToolkit.makeNodeToken(n13);
        n9.addNode(n12);
        n0 = new NodeChoice(n9, 2);
      break;
    case SPACE:
        n14 = new NodeSequence(2);
      n16 = jj_consume_token(SPACE);
                     n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      n17 = Expr();
        n14.addNode(n17);
        n0 = new NodeChoice(n14, 3);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Data(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DataMode DataMode() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BYTE:
      n2 = jj_consume_token(BYTE);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case HALF:
      n4 = jj_consume_token(HALF);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case WORD:
      n6 = jj_consume_token(WORD);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case FLOAT2:
      n8 = jj_consume_token(FLOAT2);
                    n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case DOUBLE:
      n10 = jj_consume_token(DOUBLE);
                      n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new DataMode(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DataList DataList() throws ParseException {
   DataExpr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   DataList n5;
    n0 = DataExpr();
    label_1:
    while (true) {
      if (jj_2_6(2147483647)) {
        ;
      } else {
        break label_1;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = DataList();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new DataList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public DataExpr DataExpr() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   Expr n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Expr n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case PLUS:
    case MINUS:
    case TILDE:
    case BANG:
    case DECIMAL:
    case HEXADECIMAL:
    case OCTAL:
    case CHARACTER:
    case IDENTIFIER:
        n1 = new NodeSequence(2);
      n2 = Expr();
        n1.addNode(n2);
      if (jj_2_7(2147483647)) {
           n4 = new NodeSequence(2);
        n6 = jj_consume_token(COLON);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        n7 = Expr();
           n4.addNode(n7);
           n3.addNode(n4);
      } else {
        ;
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case FLOAT:
        n8 = new NodeSequence(2);
      n10 = jj_consume_token(FLOAT);
                    n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      if (jj_2_8(2147483647)) {
           n12 = new NodeSequence(2);
        n14 = jj_consume_token(COLON);
                   n13 = JTBToolkit.makeNodeToken(n14);
           n12.addNode(n13);
        n16 = jj_consume_token(FLOAT);
                       n15 = JTBToolkit.makeNodeToken(n16);
           n12.addNode(n15);
           n11.addNode(n12);
      } else {
        ;
      }
        n8.addNode(n11);
        n0 = new NodeChoice(n8, 1);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new DataExpr(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public SymDef SymDef() throws ParseException {
   NodeToken n0;
   Token n1;
   Expr n2;
    n1 = jj_consume_token(IDENTIFIER_EQUAL);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expr();
     {if (true) return new SymDef(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Directive Directive() throws ParseException {
   NodeChoice n0;
   SetDir n1;
   SegmentDir n2;
   AlignDir n3;
   SymbolDir n4;
   BlockDir n5;
   CompilerDir n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SET:
      n1 = SetDir();
        n0 = new NodeChoice(n1, 0);
      break;
    case TEXT:
    case DATA:
    case RDATA:
    case SDATA:
      n2 = SegmentDir();
        n0 = new NodeChoice(n2, 1);
      break;
    case ALIGN:
      n3 = AlignDir();
        n0 = new NodeChoice(n3, 2);
      break;
    case GLOBL:
    case EXTERN:
    case COMM:
    case LCOMM:
      n4 = SymbolDir();
        n0 = new NodeChoice(n4, 3);
      break;
    case ENT:
    case AENT:
    case MASK:
    case FMASK:
    case FRAME:
    case END:
      n5 = BlockDir();
        n0 = new NodeChoice(n5, 4);
      break;
    case ALIAS:
    case BGNB:
    case ENDB:
    case FILE:
    case GALIVE:
    case GJALDEF:
    case GJRLIVE:
    case LAB:
    case LIVEREG:
    case NOALIAS:
    case OPTION:
    case VERSTAMP:
    case VREG:
      n6 = CompilerDir();
        n0 = new NodeChoice(n6, 5);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Directive(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public SetDir SetDir() throws ParseException {
   NodeToken n0;
   Token n1;
   SetDirArgs n2;
    n1 = jj_consume_token(SET);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SetDirArgs();
     {if (true) return new SetDir(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public SetDirArgs SetDirArgs() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOLATILE:
      n2 = jj_consume_token(VOLATILE);
                      n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case NOVOLATILE:
      n4 = jj_consume_token(NOVOLATILE);
                        n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case REORDER:
      n6 = jj_consume_token(REORDER);
                     n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case NOREORDER:
      n8 = jj_consume_token(NOREORDER);
                       n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case AT:
      n10 = jj_consume_token(AT);
                 n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case NOAT:
      n12 = jj_consume_token(NOAT);
                   n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case MACRO:
      n14 = jj_consume_token(MACRO);
                    n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case NOMACRO:
      n16 = jj_consume_token(NOMACRO);
                      n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case BOPT:
      n18 = jj_consume_token(BOPT);
                   n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case NOBOPT:
      n20 = jj_consume_token(NOBOPT);
                     n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    case MOVE:
      n22 = jj_consume_token(MOVE);
                   n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
      break;
    case NOMOVE:
      n24 = jj_consume_token(NOMOVE);
                     n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SetDirArgs(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public SegmentDir SegmentDir() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      n2 = jj_consume_token(TEXT);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case DATA:
      n4 = jj_consume_token(DATA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case RDATA:
      n6 = jj_consume_token(RDATA);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case SDATA:
      n8 = jj_consume_token(SDATA);
                    n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SegmentDir(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public AlignDir AlignDir() throws ParseException {
   NodeToken n0;
   Token n1;
   Expr n2;
    n1 = jj_consume_token(ALIGN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expr();
     {if (true) return new AlignDir(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public SymbolDir SymbolDir() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   Constant n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   Constant n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   Constant n29;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GLOBL:
        n1 = new NodeSequence(2);
      n3 = jj_consume_token(GLOBL);
                    n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(IDENTIFIER);
                        n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
      break;
    case EXTERN:
        n6 = new NodeSequence(4);
      n8 = jj_consume_token(EXTERN);
                     n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n10 = jj_consume_token(IDENTIFIER);
                         n9 = JTBToolkit.makeNodeToken(n10);
        n6.addNode(n9);
      n12 = jj_consume_token(COMMA);
                n11 = JTBToolkit.makeNodeToken(n12);
        n6.addNode(n11);
      n13 = Constant();
        n6.addNode(n13);
        n0 = new NodeChoice(n6, 1);
      break;
    case COMM:
        n14 = new NodeSequence(4);
      n16 = jj_consume_token(COMM);
                    n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      n18 = jj_consume_token(IDENTIFIER);
                         n17 = JTBToolkit.makeNodeToken(n18);
        n14.addNode(n17);
      n20 = jj_consume_token(COMMA);
                n19 = JTBToolkit.makeNodeToken(n20);
        n14.addNode(n19);
      n21 = Constant();
        n14.addNode(n21);
        n0 = new NodeChoice(n14, 2);
      break;
    case LCOMM:
        n22 = new NodeSequence(4);
      n24 = jj_consume_token(LCOMM);
                     n23 = JTBToolkit.makeNodeToken(n24);
        n22.addNode(n23);
      n26 = jj_consume_token(IDENTIFIER);
                         n25 = JTBToolkit.makeNodeToken(n26);
        n22.addNode(n25);
      n28 = jj_consume_token(COMMA);
                n27 = JTBToolkit.makeNodeToken(n28);
        n22.addNode(n27);
      n29 = Constant();
        n22.addNode(n29);
        n0 = new NodeChoice(n22, 3);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SymbolDir(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public BlockDir BlockDir() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Constant n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   Constant n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   Expr n22;
   NodeToken n23;
   Token n24;
   Expr n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   Expr n29;
   NodeToken n30;
   Token n31;
   Expr n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   Register n36;
   NodeToken n37;
   Token n38;
   Expr n39;
   NodeToken n40;
   Token n41;
   Register n42;
   NodeSequence n43;
   NodeToken n44;
   Token n45;
   NodeOptional n46 = new NodeOptional();
   NodeToken n47;
   Token n48;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENT:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(ENT);
                  n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(IDENTIFIER);
                        n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      if (jj_2_9(2147483647)) {
           n7 = new NodeSequence(2);
        n9 = jj_consume_token(COMMA);
                  n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
        n10 = Constant();
           n7.addNode(n10);
           n6.addNode(n7);
      } else {
        ;
      }
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0);
      break;
    case AENT:
        n11 = new NodeSequence(4);
      n13 = jj_consume_token(AENT);
                    n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      n15 = jj_consume_token(IDENTIFIER);
                         n14 = JTBToolkit.makeNodeToken(n15);
        n11.addNode(n14);
      n17 = jj_consume_token(COMMA);
                n16 = JTBToolkit.makeNodeToken(n17);
        n11.addNode(n16);
      n18 = Constant();
        n11.addNode(n18);
        n0 = new NodeChoice(n11, 1);
      break;
    case MASK:
        n19 = new NodeSequence(4);
      n21 = jj_consume_token(MASK);
                    n20 = JTBToolkit.makeNodeToken(n21);
        n19.addNode(n20);
      n22 = Expr();
        n19.addNode(n22);
      n24 = jj_consume_token(COMMA);
                n23 = JTBToolkit.makeNodeToken(n24);
        n19.addNode(n23);
      n25 = Expr();
        n19.addNode(n25);
        n0 = new NodeChoice(n19, 2);
      break;
    case FMASK:
        n26 = new NodeSequence(4);
      n28 = jj_consume_token(FMASK);
                     n27 = JTBToolkit.makeNodeToken(n28);
        n26.addNode(n27);
      n29 = Expr();
        n26.addNode(n29);
      n31 = jj_consume_token(COMMA);
                n30 = JTBToolkit.makeNodeToken(n31);
        n26.addNode(n30);
      n32 = Expr();
        n26.addNode(n32);
        n0 = new NodeChoice(n26, 3);
      break;
    case FRAME:
        n33 = new NodeSequence(6);
      n35 = jj_consume_token(FRAME);
                     n34 = JTBToolkit.makeNodeToken(n35);
        n33.addNode(n34);
      n36 = Register();
        n33.addNode(n36);
      n38 = jj_consume_token(COMMA);
                n37 = JTBToolkit.makeNodeToken(n38);
        n33.addNode(n37);
      n39 = Expr();
        n33.addNode(n39);
      n41 = jj_consume_token(COMMA);
                n40 = JTBToolkit.makeNodeToken(n41);
        n33.addNode(n40);
      n42 = Register();
        n33.addNode(n42);
        n0 = new NodeChoice(n33, 4);
      break;
    case END:
        n43 = new NodeSequence(2);
      n45 = jj_consume_token(END);
                   n44 = JTBToolkit.makeNodeToken(n45);
        n43.addNode(n44);
      if (jj_2_10(2147483647)) {
        n48 = jj_consume_token(IDENTIFIER);
                            n47 = JTBToolkit.makeNodeToken(n48);
           n46.addNode(n47);
      } else {
        ;
      }
        n43.addNode(n46);
        n0 = new NodeChoice(n43, 5);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new BlockDir(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public CompilerDir CompilerDir() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Register n4;
   NodeToken n5;
   Token n6;
   Register n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   Expr n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Expr n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   Constant n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeSequence n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   Expr n36;
   NodeToken n37;
   Token n38;
   Expr n39;
   NodeSequence n40;
   NodeToken n41;
   Token n42;
   Register n43;
   NodeToken n44;
   Token n45;
   Register n46;
   NodeSequence n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;
   NodeSequence n52;
   NodeToken n53;
   Token n54;
   Constant n55;
   Constant n56;
   NodeSequence n57;
   NodeToken n58;
   Token n59;
   Expr n60;
   NodeToken n61;
   Token n62;
   Expr n63;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALIAS:
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(ALIAS);
                    n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = Register();
        n1.addNode(n4);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
      n7 = Register();
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
      break;
    case BGNB:
        n8 = new NodeSequence(2);
      n10 = jj_consume_token(BGNB);
                    n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      n11 = Expr();
        n8.addNode(n11);
        n0 = new NodeChoice(n8, 1);
      break;
    case ENDB:
        n12 = new NodeSequence(2);
      n14 = jj_consume_token(ENDB);
                    n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = Expr();
        n12.addNode(n15);
        n0 = new NodeChoice(n12, 2);
      break;
    case FILE:
        n16 = new NodeSequence(3);
      n18 = jj_consume_token(FILE);
                    n17 = JTBToolkit.makeNodeToken(n18);
        n16.addNode(n17);
      n19 = Constant();
        n16.addNode(n19);
      n21 = jj_consume_token(STRING);
                     n20 = JTBToolkit.makeNodeToken(n21);
        n16.addNode(n20);
        n0 = new NodeChoice(n16, 3);
      break;
    case GALIVE:
      n23 = jj_consume_token(GALIVE);
                      n22 = JTBToolkit.makeNodeToken(n23);
        n0 = new NodeChoice(n22, 4);
      break;
    case GJALDEF:
      n25 = jj_consume_token(GJALDEF);
                       n24 = JTBToolkit.makeNodeToken(n25);
        n0 = new NodeChoice(n24, 5);
      break;
    case GJRLIVE:
      n27 = jj_consume_token(GJRLIVE);
                       n26 = JTBToolkit.makeNodeToken(n27);
        n0 = new NodeChoice(n26, 6);
      break;
    case LAB:
        n28 = new NodeSequence(2);
      n30 = jj_consume_token(LAB);
                   n29 = JTBToolkit.makeNodeToken(n30);
        n28.addNode(n29);
      n32 = jj_consume_token(IDENTIFIER);
                         n31 = JTBToolkit.makeNodeToken(n32);
        n28.addNode(n31);
        n0 = new NodeChoice(n28, 7);
      break;
    case LIVEREG:
        n33 = new NodeSequence(4);
      n35 = jj_consume_token(LIVEREG);
                       n34 = JTBToolkit.makeNodeToken(n35);
        n33.addNode(n34);
      n36 = Expr();
        n33.addNode(n36);
      n38 = jj_consume_token(COMMA);
                n37 = JTBToolkit.makeNodeToken(n38);
        n33.addNode(n37);
      n39 = Expr();
        n33.addNode(n39);
        n0 = new NodeChoice(n33, 8);
      break;
    case NOALIAS:
        n40 = new NodeSequence(4);
      n42 = jj_consume_token(NOALIAS);
                       n41 = JTBToolkit.makeNodeToken(n42);
        n40.addNode(n41);
      n43 = Register();
        n40.addNode(n43);
      n45 = jj_consume_token(COMMA);
                n44 = JTBToolkit.makeNodeToken(n45);
        n40.addNode(n44);
      n46 = Register();
        n40.addNode(n46);
        n0 = new NodeChoice(n40, 9);
      break;
    case OPTION:
        n47 = new NodeSequence(2);
      n49 = jj_consume_token(OPTION);
                      n48 = JTBToolkit.makeNodeToken(n49);
        n47.addNode(n48);
      n51 = jj_consume_token(FLAG);
                   n50 = JTBToolkit.makeNodeToken(n51);
        n47.addNode(n50);
        n0 = new NodeChoice(n47, 10);
      break;
    case VERSTAMP:
        n52 = new NodeSequence(3);
      n54 = jj_consume_token(VERSTAMP);
                        n53 = JTBToolkit.makeNodeToken(n54);
        n52.addNode(n53);
      n55 = Constant();
        n52.addNode(n55);
      n56 = Constant();
        n52.addNode(n56);
        n0 = new NodeChoice(n52, 11);
      break;
    case VREG:
        n57 = new NodeSequence(4);
      n59 = jj_consume_token(VREG);
                    n58 = JTBToolkit.makeNodeToken(n59);
        n57.addNode(n58);
      n60 = Expr();
        n57.addNode(n60);
      n62 = jj_consume_token(COMMA);
                n61 = JTBToolkit.makeNodeToken(n62);
        n57.addNode(n61);
      n63 = Expr();
        n57.addNode(n63);
        n0 = new NodeChoice(n57, 12);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new CompilerDir(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr() throws ParseException {
   Term n0;
   Expr_ n1;
    n0 = Term();
    n1 = Expr_();
     {if (true) return new Expr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Expr_ Expr_() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   NodeSequence n1;
   BinaryOp n2;
   Expr n3;
   Expr_ n4;
    label_2:
    while (true) {
      if (jj_2_11(2147483647)) {
        ;
      } else {
        break label_2;
      }
        n1 = new NodeSequence(3);
      n2 = BinaryOp();
        n1.addNode(n2);
      n3 = Expr();
        n1.addNode(n3);
      n4 = Expr_();
        n1.addNode(n4);
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new Expr_(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Term Term() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   UnaryOp n2;
   Term n3;
   Primary n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case TILDE:
    case BANG:
        n1 = new NodeSequence(2);
      n2 = UnaryOp();
        n1.addNode(n2);
      n3 = Term();
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case LPAREN:
    case DECIMAL:
    case HEXADECIMAL:
    case OCTAL:
    case CHARACTER:
    case IDENTIFIER:
      n4 = Primary();
        n0 = new NodeChoice(n4, 1);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Term(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Primary Primary() throws ParseException {
   NodeChoice n0;
   Constant n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expr n5;
   NodeToken n6;
   Token n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL:
    case HEXADECIMAL:
    case OCTAL:
    case CHARACTER:
    case IDENTIFIER:
      n1 = Constant();
        n0 = new NodeChoice(n1, 0);
      break;
    case LPAREN:
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(LPAREN);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Expr();
        n2.addNode(n5);
      n7 = jj_consume_token(RPAREN);
               n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Primary(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public BinaryOp BinaryOp() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
      n2 = jj_consume_token(TIMES);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case BY:
      n4 = jj_consume_token(BY);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case MOD:
      n6 = jj_consume_token(MOD);
               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case PLUS:
      n8 = jj_consume_token(PLUS);
               n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case MINUS:
      n10 = jj_consume_token(MINUS);
                n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case LSHIFT:
      n12 = jj_consume_token(LSHIFT);
                 n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case RSHIFT:
      n14 = jj_consume_token(RSHIFT);
                 n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case AMP:
      n16 = jj_consume_token(AMP);
                n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case CARET:
      n18 = jj_consume_token(CARET);
                n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case PIPE:
      n20 = jj_consume_token(PIPE);
                n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new BinaryOp(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryOp UnaryOp() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      n2 = jj_consume_token(PLUS);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case MINUS:
      n4 = jj_consume_token(MINUS);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case TILDE:
      n6 = jj_consume_token(TILDE);
               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case BANG:
      n8 = jj_consume_token(BANG);
               n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new UnaryOp(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Constant Constant() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL:
      n2 = jj_consume_token(DECIMAL);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case HEXADECIMAL:
      n4 = jj_consume_token(HEXADECIMAL);
                         n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case OCTAL:
      n6 = jj_consume_token(OCTAL);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case CHARACTER:
      n8 = jj_consume_token(CHARACTER);
                       n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case IDENTIFIER:
      n10 = jj_consume_token(IDENTIFIER);
                         n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Constant(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public RegisterName RegisterName() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ZERO:
      n2 = jj_consume_token(ZERO);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case AT:
      n4 = jj_consume_token(AT);
                n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case V0:
      n6 = jj_consume_token(V0);
                n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case V1:
      n8 = jj_consume_token(V1);
                n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case A0:
      n10 = jj_consume_token(A0);
                 n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case A1:
      n12 = jj_consume_token(A1);
                 n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case A2:
      n14 = jj_consume_token(A2);
                 n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case A3:
      n16 = jj_consume_token(A3);
                 n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case T0:
      n18 = jj_consume_token(T0);
                 n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case T1:
      n20 = jj_consume_token(T1);
                 n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    case T2:
      n22 = jj_consume_token(T2);
                 n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
      break;
    case T3:
      n24 = jj_consume_token(T3);
                 n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
      break;
    case T4:
      n26 = jj_consume_token(T4);
                 n25 = JTBToolkit.makeNodeToken(n26);
        n0 = new NodeChoice(n25, 12);
      break;
    case T5:
      n28 = jj_consume_token(T5);
                 n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 13);
      break;
    case T6:
      n30 = jj_consume_token(T6);
                 n29 = JTBToolkit.makeNodeToken(n30);
        n0 = new NodeChoice(n29, 14);
      break;
    case T7:
      n32 = jj_consume_token(T7);
                 n31 = JTBToolkit.makeNodeToken(n32);
        n0 = new NodeChoice(n31, 15);
      break;
    case S0:
      n34 = jj_consume_token(S0);
                 n33 = JTBToolkit.makeNodeToken(n34);
        n0 = new NodeChoice(n33, 16);
      break;
    case S1:
      n36 = jj_consume_token(S1);
                 n35 = JTBToolkit.makeNodeToken(n36);
        n0 = new NodeChoice(n35, 17);
      break;
    case S2:
      n38 = jj_consume_token(S2);
                 n37 = JTBToolkit.makeNodeToken(n38);
        n0 = new NodeChoice(n37, 18);
      break;
    case S3:
      n40 = jj_consume_token(S3);
                 n39 = JTBToolkit.makeNodeToken(n40);
        n0 = new NodeChoice(n39, 19);
      break;
    case S4:
      n42 = jj_consume_token(S4);
                 n41 = JTBToolkit.makeNodeToken(n42);
        n0 = new NodeChoice(n41, 20);
      break;
    case S5:
      n44 = jj_consume_token(S5);
                 n43 = JTBToolkit.makeNodeToken(n44);
        n0 = new NodeChoice(n43, 21);
      break;
    case S6:
      n46 = jj_consume_token(S6);
                 n45 = JTBToolkit.makeNodeToken(n46);
        n0 = new NodeChoice(n45, 22);
      break;
    case S7:
      n48 = jj_consume_token(S7);
                 n47 = JTBToolkit.makeNodeToken(n48);
        n0 = new NodeChoice(n47, 23);
      break;
    case T8:
      n50 = jj_consume_token(T8);
                 n49 = JTBToolkit.makeNodeToken(n50);
        n0 = new NodeChoice(n49, 24);
      break;
    case T9:
      n52 = jj_consume_token(T9);
                 n51 = JTBToolkit.makeNodeToken(n52);
        n0 = new NodeChoice(n51, 25);
      break;
    case K0:
      n54 = jj_consume_token(K0);
                 n53 = JTBToolkit.makeNodeToken(n54);
        n0 = new NodeChoice(n53, 26);
      break;
    case K1:
      n56 = jj_consume_token(K1);
                 n55 = JTBToolkit.makeNodeToken(n56);
        n0 = new NodeChoice(n55, 27);
      break;
    case GP:
      n58 = jj_consume_token(GP);
                 n57 = JTBToolkit.makeNodeToken(n58);
        n0 = new NodeChoice(n57, 28);
      break;
    case SP:
      n60 = jj_consume_token(SP);
                 n59 = JTBToolkit.makeNodeToken(n60);
        n0 = new NodeChoice(n59, 29);
      break;
    case S8:
      n62 = jj_consume_token(S8);
                 n61 = JTBToolkit.makeNodeToken(n62);
        n0 = new NodeChoice(n61, 30);
      break;
    case FP:
      n64 = jj_consume_token(FP);
                 n63 = JTBToolkit.makeNodeToken(n64);
        n0 = new NodeChoice(n63, 31);
      break;
    case RA:
      n66 = jj_consume_token(RA);
                 n65 = JTBToolkit.makeNodeToken(n66);
        n0 = new NodeChoice(n65, 32);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new RegisterName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DollarRegisterName DollarRegisterName() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DZERO:
      n2 = jj_consume_token(DZERO);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case DAT:
      n4 = jj_consume_token(DAT);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case DV0:
      n6 = jj_consume_token(DV0);
                 n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case DV1:
      n8 = jj_consume_token(DV1);
                 n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case DA0:
      n10 = jj_consume_token(DA0);
                  n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case DA1:
      n12 = jj_consume_token(DA1);
                  n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case DA2:
      n14 = jj_consume_token(DA2);
                  n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case DA3:
      n16 = jj_consume_token(DA3);
                  n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case DT0:
      n18 = jj_consume_token(DT0);
                  n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case DT1:
      n20 = jj_consume_token(DT1);
                  n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    case DT2:
      n22 = jj_consume_token(DT2);
                  n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
      break;
    case DT3:
      n24 = jj_consume_token(DT3);
                  n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
      break;
    case DT4:
      n26 = jj_consume_token(DT4);
                  n25 = JTBToolkit.makeNodeToken(n26);
        n0 = new NodeChoice(n25, 12);
      break;
    case DT5:
      n28 = jj_consume_token(DT5);
                  n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 13);
      break;
    case DT6:
      n30 = jj_consume_token(DT6);
                  n29 = JTBToolkit.makeNodeToken(n30);
        n0 = new NodeChoice(n29, 14);
      break;
    case DT7:
      n32 = jj_consume_token(DT7);
                  n31 = JTBToolkit.makeNodeToken(n32);
        n0 = new NodeChoice(n31, 15);
      break;
    case DS0:
      n34 = jj_consume_token(DS0);
                  n33 = JTBToolkit.makeNodeToken(n34);
        n0 = new NodeChoice(n33, 16);
      break;
    case DS1:
      n36 = jj_consume_token(DS1);
                  n35 = JTBToolkit.makeNodeToken(n36);
        n0 = new NodeChoice(n35, 17);
      break;
    case DS2:
      n38 = jj_consume_token(DS2);
                  n37 = JTBToolkit.makeNodeToken(n38);
        n0 = new NodeChoice(n37, 18);
      break;
    case DS3:
      n40 = jj_consume_token(DS3);
                  n39 = JTBToolkit.makeNodeToken(n40);
        n0 = new NodeChoice(n39, 19);
      break;
    case DS4:
      n42 = jj_consume_token(DS4);
                  n41 = JTBToolkit.makeNodeToken(n42);
        n0 = new NodeChoice(n41, 20);
      break;
    case DS5:
      n44 = jj_consume_token(DS5);
                  n43 = JTBToolkit.makeNodeToken(n44);
        n0 = new NodeChoice(n43, 21);
      break;
    case DS6:
      n46 = jj_consume_token(DS6);
                  n45 = JTBToolkit.makeNodeToken(n46);
        n0 = new NodeChoice(n45, 22);
      break;
    case DS7:
      n48 = jj_consume_token(DS7);
                  n47 = JTBToolkit.makeNodeToken(n48);
        n0 = new NodeChoice(n47, 23);
      break;
    case DT8:
      n50 = jj_consume_token(DT8);
                  n49 = JTBToolkit.makeNodeToken(n50);
        n0 = new NodeChoice(n49, 24);
      break;
    case DT9:
      n52 = jj_consume_token(DT9);
                  n51 = JTBToolkit.makeNodeToken(n52);
        n0 = new NodeChoice(n51, 25);
      break;
    case DK0:
      n54 = jj_consume_token(DK0);
                  n53 = JTBToolkit.makeNodeToken(n54);
        n0 = new NodeChoice(n53, 26);
      break;
    case DK1:
      n56 = jj_consume_token(DK1);
                  n55 = JTBToolkit.makeNodeToken(n56);
        n0 = new NodeChoice(n55, 27);
      break;
    case DGP:
      n58 = jj_consume_token(DGP);
                  n57 = JTBToolkit.makeNodeToken(n58);
        n0 = new NodeChoice(n57, 28);
      break;
    case DSP:
      n60 = jj_consume_token(DSP);
                  n59 = JTBToolkit.makeNodeToken(n60);
        n0 = new NodeChoice(n59, 29);
      break;
    case DS8:
      n62 = jj_consume_token(DS8);
                  n61 = JTBToolkit.makeNodeToken(n62);
        n0 = new NodeChoice(n61, 30);
      break;
    case DFP:
      n64 = jj_consume_token(DFP);
                  n63 = JTBToolkit.makeNodeToken(n64);
        n0 = new NodeChoice(n63, 31);
      break;
    case DRA:
      n66 = jj_consume_token(DRA);
                  n65 = JTBToolkit.makeNodeToken(n66);
        n0 = new NodeChoice(n65, 32);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new DollarRegisterName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public OpCode OpCode() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;
   NodeToken n75;
   Token n76;
   NodeToken n77;
   Token n78;
   NodeToken n79;
   Token n80;
   NodeToken n81;
   Token n82;
   NodeToken n83;
   Token n84;
   NodeToken n85;
   Token n86;
   NodeToken n87;
   Token n88;
   NodeToken n89;
   Token n90;
   NodeToken n91;
   Token n92;
   NodeToken n93;
   Token n94;
   NodeToken n95;
   Token n96;
   NodeToken n97;
   Token n98;
   NodeToken n99;
   Token n100;
   NodeToken n101;
   Token n102;
   NodeToken n103;
   Token n104;
   NodeToken n105;
   Token n106;
   NodeToken n107;
   Token n108;
   NodeToken n109;
   Token n110;
   NodeToken n111;
   Token n112;
   NodeToken n113;
   Token n114;
   NodeToken n115;
   Token n116;
   NodeToken n117;
   Token n118;
   NodeToken n119;
   Token n120;
   NodeToken n121;
   Token n122;
   NodeToken n123;
   Token n124;
   NodeToken n125;
   Token n126;
   NodeToken n127;
   Token n128;
   NodeToken n129;
   Token n130;
   NodeToken n131;
   Token n132;
   NodeToken n133;
   Token n134;
   NodeToken n135;
   Token n136;
   NodeToken n137;
   Token n138;
   NodeToken n139;
   Token n140;
   NodeToken n141;
   Token n142;
   NodeToken n143;
   Token n144;
   NodeToken n145;
   Token n146;
   NodeToken n147;
   Token n148;
   NodeToken n149;
   Token n150;
   NodeToken n151;
   Token n152;
   NodeToken n153;
   Token n154;
   NodeToken n155;
   Token n156;
   NodeToken n157;
   Token n158;
   NodeToken n159;
   Token n160;
   NodeToken n161;
   Token n162;
   NodeToken n163;
   Token n164;
   NodeToken n165;
   Token n166;
   NodeToken n167;
   Token n168;
   NodeToken n169;
   Token n170;
   NodeToken n171;
   Token n172;
   NodeToken n173;
   Token n174;
   NodeToken n175;
   Token n176;
   NodeToken n177;
   Token n178;
   NodeToken n179;
   Token n180;
   NodeToken n181;
   Token n182;
   NodeToken n183;
   Token n184;
   NodeToken n185;
   Token n186;
   NodeToken n187;
   Token n188;
   NodeToken n189;
   Token n190;
   NodeToken n191;
   Token n192;
   NodeToken n193;
   Token n194;
   NodeToken n195;
   Token n196;
   NodeToken n197;
   Token n198;
   NodeToken n199;
   Token n200;
   NodeToken n201;
   Token n202;
   NodeToken n203;
   Token n204;
   NodeToken n205;
   Token n206;
   NodeToken n207;
   Token n208;
   NodeToken n209;
   Token n210;
   NodeToken n211;
   Token n212;
   NodeToken n213;
   Token n214;
   NodeToken n215;
   Token n216;
   NodeToken n217;
   Token n218;
   NodeToken n219;
   Token n220;
   NodeToken n221;
   Token n222;
   NodeToken n223;
   Token n224;
   NodeToken n225;
   Token n226;
   NodeToken n227;
   Token n228;
   NodeToken n229;
   Token n230;
   NodeToken n231;
   Token n232;
   NodeToken n233;
   Token n234;
   NodeToken n235;
   Token n236;
   NodeToken n237;
   Token n238;
   NodeToken n239;
   Token n240;
   NodeToken n241;
   Token n242;
   NodeToken n243;
   Token n244;
   NodeToken n245;
   Token n246;
   NodeToken n247;
   Token n248;
   NodeToken n249;
   Token n250;
   NodeToken n251;
   Token n252;
   NodeToken n253;
   Token n254;
   NodeToken n255;
   Token n256;
   NodeToken n257;
   Token n258;
   NodeToken n259;
   Token n260;
   NodeToken n261;
   Token n262;
   NodeToken n263;
   Token n264;
   NodeToken n265;
   Token n266;
   NodeToken n267;
   Token n268;
   NodeToken n269;
   Token n270;
   NodeToken n271;
   Token n272;
   NodeToken n273;
   Token n274;
   NodeToken n275;
   Token n276;
   NodeToken n277;
   Token n278;
   NodeToken n279;
   Token n280;
   NodeToken n281;
   Token n282;
   NodeToken n283;
   Token n284;
   NodeToken n285;
   Token n286;
   NodeToken n287;
   Token n288;
   NodeToken n289;
   Token n290;
   NodeToken n291;
   Token n292;
   NodeToken n293;
   Token n294;
   NodeToken n295;
   Token n296;
   NodeToken n297;
   Token n298;
   NodeToken n299;
   Token n300;
   NodeToken n301;
   Token n302;
   NodeToken n303;
   Token n304;
   NodeToken n305;
   Token n306;
   NodeToken n307;
   Token n308;
   NodeToken n309;
   Token n310;
   NodeToken n311;
   Token n312;
   NodeToken n313;
   Token n314;
   NodeToken n315;
   Token n316;
   NodeToken n317;
   Token n318;
   NodeToken n319;
   Token n320;
   NodeToken n321;
   Token n322;
   NodeToken n323;
   Token n324;
   NodeToken n325;
   Token n326;
   NodeToken n327;
   Token n328;
   NodeToken n329;
   Token n330;
   NodeToken n331;
   Token n332;
   NodeToken n333;
   Token n334;
   NodeToken n335;
   Token n336;
   NodeToken n337;
   Token n338;
   NodeToken n339;
   Token n340;
   NodeToken n341;
   Token n342;
   NodeToken n343;
   Token n344;
   NodeToken n345;
   Token n346;
   NodeToken n347;
   Token n348;
   NodeToken n349;
   Token n350;
   NodeToken n351;
   Token n352;
   NodeToken n353;
   Token n354;
   NodeToken n355;
   Token n356;
   NodeToken n357;
   Token n358;
   NodeToken n359;
   Token n360;
   NodeToken n361;
   Token n362;
   NodeToken n363;
   Token n364;
   NodeToken n365;
   Token n366;
   NodeToken n367;
   Token n368;
   NodeToken n369;
   Token n370;
   NodeToken n371;
   Token n372;
   NodeToken n373;
   Token n374;
   NodeToken n375;
   Token n376;
   NodeToken n377;
   Token n378;
   NodeToken n379;
   Token n380;
   NodeToken n381;
   Token n382;
   NodeToken n383;
   Token n384;
   NodeToken n385;
   Token n386;
   NodeToken n387;
   Token n388;
   NodeToken n389;
   Token n390;
   NodeToken n391;
   Token n392;
   NodeToken n393;
   Token n394;
   NodeToken n395;
   Token n396;
   NodeToken n397;
   Token n398;
   NodeToken n399;
   Token n400;
   NodeToken n401;
   Token n402;
   NodeToken n403;
   Token n404;
   NodeToken n405;
   Token n406;
   NodeToken n407;
   Token n408;
   NodeToken n409;
   Token n410;
   NodeToken n411;
   Token n412;
   NodeToken n413;
   Token n414;
   NodeToken n415;
   Token n416;
   NodeToken n417;
   Token n418;
   NodeToken n419;
   Token n420;
   NodeToken n421;
   Token n422;
   NodeToken n423;
   Token n424;
   NodeToken n425;
   Token n426;
   NodeToken n427;
   Token n428;
   NodeToken n429;
   Token n430;
   NodeToken n431;
   Token n432;
   NodeToken n433;
   Token n434;
   NodeToken n435;
   Token n436;
   NodeToken n437;
   Token n438;
   NodeToken n439;
   Token n440;
   NodeToken n441;
   Token n442;
   NodeToken n443;
   Token n444;
   NodeToken n445;
   Token n446;
   NodeToken n447;
   Token n448;
   NodeToken n449;
   Token n450;
   NodeToken n451;
   Token n452;
   NodeToken n453;
   Token n454;
   NodeToken n455;
   Token n456;
   NodeToken n457;
   Token n458;
   NodeToken n459;
   Token n460;
   NodeToken n461;
   Token n462;
   NodeToken n463;
   Token n464;
   NodeToken n465;
   Token n466;
   NodeToken n467;
   Token n468;
   NodeToken n469;
   Token n470;
   NodeToken n471;
   Token n472;
   NodeToken n473;
   Token n474;
   NodeToken n475;
   Token n476;
   NodeToken n477;
   Token n478;
   NodeToken n479;
   Token n480;
   NodeToken n481;
   Token n482;
   NodeToken n483;
   Token n484;
   NodeToken n485;
   Token n486;
   NodeToken n487;
   Token n488;
   NodeToken n489;
   Token n490;
   NodeToken n491;
   Token n492;
   NodeToken n493;
   Token n494;
   NodeToken n495;
   Token n496;
   NodeToken n497;
   Token n498;
   NodeToken n499;
   Token n500;
   NodeToken n501;
   Token n502;
   NodeToken n503;
   Token n504;
   NodeToken n505;
   Token n506;
   NodeToken n507;
   Token n508;
   NodeToken n509;
   Token n510;
   NodeToken n511;
   Token n512;
   NodeToken n513;
   Token n514;
   NodeToken n515;
   Token n516;
   NodeToken n517;
   Token n518;
   NodeToken n519;
   Token n520;
   NodeToken n521;
   Token n522;
   NodeToken n523;
   Token n524;
   NodeToken n525;
   Token n526;
   NodeToken n527;
   Token n528;
   NodeToken n529;
   Token n530;
   NodeToken n531;
   Token n532;
   NodeToken n533;
   Token n534;
   NodeToken n535;
   Token n536;
   NodeToken n537;
   Token n538;
   NodeToken n539;
   Token n540;
   NodeToken n541;
   Token n542;
   NodeToken n543;
   Token n544;
   NodeToken n545;
   Token n546;
   NodeToken n547;
   Token n548;
   NodeToken n549;
   Token n550;
   NodeToken n551;
   Token n552;
   NodeToken n553;
   Token n554;
   NodeToken n555;
   Token n556;
   NodeToken n557;
   Token n558;
   NodeToken n559;
   Token n560;
   NodeToken n561;
   Token n562;
   NodeToken n563;
   Token n564;
   NodeToken n565;
   Token n566;
   NodeToken n567;
   Token n568;
   NodeToken n569;
   Token n570;
   NodeToken n571;
   Token n572;
   NodeToken n573;
   Token n574;
   NodeToken n575;
   Token n576;
   NodeToken n577;
   Token n578;
   NodeToken n579;
   Token n580;
   NodeToken n581;
   Token n582;
   NodeToken n583;
   Token n584;
   NodeToken n585;
   Token n586;
   NodeToken n587;
   Token n588;
   NodeToken n589;
   Token n590;
   NodeToken n591;
   Token n592;
   NodeToken n593;
   Token n594;
   NodeToken n595;
   Token n596;
   NodeToken n597;
   Token n598;
   NodeToken n599;
   Token n600;
   NodeToken n601;
   Token n602;
   NodeToken n603;
   Token n604;
   NodeToken n605;
   Token n606;
   NodeToken n607;
   Token n608;
   NodeToken n609;
   Token n610;
   NodeToken n611;
   Token n612;
   NodeToken n613;
   Token n614;
   NodeToken n615;
   Token n616;
   NodeToken n617;
   Token n618;
   NodeToken n619;
   Token n620;
   NodeToken n621;
   Token n622;
   NodeToken n623;
   Token n624;
   NodeToken n625;
   Token n626;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABS:
      n2 = jj_consume_token(ABS);
                 n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case ADD:
      n4 = jj_consume_token(ADD);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case ADDCIU:
      n6 = jj_consume_token(ADDCIU);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case ADDU:
      n8 = jj_consume_token(ADDU);
                  n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case AND:
      n10 = jj_consume_token(AND);
                  n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case B:
      n12 = jj_consume_token(B);
                n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case BAL:
      n14 = jj_consume_token(BAL);
                  n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case BC0F:
      n16 = jj_consume_token(BC0F);
                   n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case BC0FL:
      n18 = jj_consume_token(BC0FL);
                    n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case BC0T:
      n20 = jj_consume_token(BC0T);
                   n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    case BC0TLBC1F:
      n22 = jj_consume_token(BC0TLBC1F);
                        n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
      break;
    case BC1FL:
      n24 = jj_consume_token(BC1FL);
                    n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
      break;
    case BC1T:
      n26 = jj_consume_token(BC1T);
                   n25 = JTBToolkit.makeNodeToken(n26);
        n0 = new NodeChoice(n25, 12);
      break;
    case BC1TL:
      n28 = jj_consume_token(BC1TL);
                    n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 13);
      break;
    case BC2F:
      n30 = jj_consume_token(BC2F);
                   n29 = JTBToolkit.makeNodeToken(n30);
        n0 = new NodeChoice(n29, 14);
      break;
    case BC2FL:
      n32 = jj_consume_token(BC2FL);
                    n31 = JTBToolkit.makeNodeToken(n32);
        n0 = new NodeChoice(n31, 15);
      break;
    case BC2T:
      n34 = jj_consume_token(BC2T);
                   n33 = JTBToolkit.makeNodeToken(n34);
        n0 = new NodeChoice(n33, 16);
      break;
    case BC2TL:
      n36 = jj_consume_token(BC2TL);
                    n35 = JTBToolkit.makeNodeToken(n36);
        n0 = new NodeChoice(n35, 17);
      break;
    case BEQ:
      n38 = jj_consume_token(BEQ);
                  n37 = JTBToolkit.makeNodeToken(n38);
        n0 = new NodeChoice(n37, 18);
      break;
    case BEQL:
      n40 = jj_consume_token(BEQL);
                   n39 = JTBToolkit.makeNodeToken(n40);
        n0 = new NodeChoice(n39, 19);
      break;
    case BEQZ:
      n42 = jj_consume_token(BEQZ);
                   n41 = JTBToolkit.makeNodeToken(n42);
        n0 = new NodeChoice(n41, 20);
      break;
    case BEQZL:
      n44 = jj_consume_token(BEQZL);
                    n43 = JTBToolkit.makeNodeToken(n44);
        n0 = new NodeChoice(n43, 21);
      break;
    case BGE:
      n46 = jj_consume_token(BGE);
                  n45 = JTBToolkit.makeNodeToken(n46);
        n0 = new NodeChoice(n45, 22);
      break;
    case BGEL:
      n48 = jj_consume_token(BGEL);
                   n47 = JTBToolkit.makeNodeToken(n48);
        n0 = new NodeChoice(n47, 23);
      break;
    case BGEU:
      n50 = jj_consume_token(BGEU);
                   n49 = JTBToolkit.makeNodeToken(n50);
        n0 = new NodeChoice(n49, 24);
      break;
    case BGEUL:
      n52 = jj_consume_token(BGEUL);
                    n51 = JTBToolkit.makeNodeToken(n52);
        n0 = new NodeChoice(n51, 25);
      break;
    case BGEZ:
      n54 = jj_consume_token(BGEZ);
                   n53 = JTBToolkit.makeNodeToken(n54);
        n0 = new NodeChoice(n53, 26);
      break;
    case BGEZAL:
      n56 = jj_consume_token(BGEZAL);
                     n55 = JTBToolkit.makeNodeToken(n56);
        n0 = new NodeChoice(n55, 27);
      break;
    case BGEZALL:
      n58 = jj_consume_token(BGEZALL);
                      n57 = JTBToolkit.makeNodeToken(n58);
        n0 = new NodeChoice(n57, 28);
      break;
    case BGEZL:
      n60 = jj_consume_token(BGEZL);
                    n59 = JTBToolkit.makeNodeToken(n60);
        n0 = new NodeChoice(n59, 29);
      break;
    case BGT:
      n62 = jj_consume_token(BGT);
                  n61 = JTBToolkit.makeNodeToken(n62);
        n0 = new NodeChoice(n61, 30);
      break;
    case BGTL:
      n64 = jj_consume_token(BGTL);
                   n63 = JTBToolkit.makeNodeToken(n64);
        n0 = new NodeChoice(n63, 31);
      break;
    case BGTU:
      n66 = jj_consume_token(BGTU);
                   n65 = JTBToolkit.makeNodeToken(n66);
        n0 = new NodeChoice(n65, 32);
      break;
    case BGTUL:
      n68 = jj_consume_token(BGTUL);
                    n67 = JTBToolkit.makeNodeToken(n68);
        n0 = new NodeChoice(n67, 33);
      break;
    case BGTZ:
      n70 = jj_consume_token(BGTZ);
                   n69 = JTBToolkit.makeNodeToken(n70);
        n0 = new NodeChoice(n69, 34);
      break;
    case BGTZL:
      n72 = jj_consume_token(BGTZL);
                    n71 = JTBToolkit.makeNodeToken(n72);
        n0 = new NodeChoice(n71, 35);
      break;
    case BLE:
      n74 = jj_consume_token(BLE);
                  n73 = JTBToolkit.makeNodeToken(n74);
        n0 = new NodeChoice(n73, 36);
      break;
    case BLEL:
      n76 = jj_consume_token(BLEL);
                   n75 = JTBToolkit.makeNodeToken(n76);
        n0 = new NodeChoice(n75, 37);
      break;
    case BLEU:
      n78 = jj_consume_token(BLEU);
                   n77 = JTBToolkit.makeNodeToken(n78);
        n0 = new NodeChoice(n77, 38);
      break;
    case BLEUL:
      n80 = jj_consume_token(BLEUL);
                    n79 = JTBToolkit.makeNodeToken(n80);
        n0 = new NodeChoice(n79, 39);
      break;
    case BLEZ:
      n82 = jj_consume_token(BLEZ);
                   n81 = JTBToolkit.makeNodeToken(n82);
        n0 = new NodeChoice(n81, 40);
      break;
    case BLEZL:
      n84 = jj_consume_token(BLEZL);
                    n83 = JTBToolkit.makeNodeToken(n84);
        n0 = new NodeChoice(n83, 41);
      break;
    case BLT:
      n86 = jj_consume_token(BLT);
                  n85 = JTBToolkit.makeNodeToken(n86);
        n0 = new NodeChoice(n85, 42);
      break;
    case BLTL:
      n88 = jj_consume_token(BLTL);
                   n87 = JTBToolkit.makeNodeToken(n88);
        n0 = new NodeChoice(n87, 43);
      break;
    case BLTU:
      n90 = jj_consume_token(BLTU);
                   n89 = JTBToolkit.makeNodeToken(n90);
        n0 = new NodeChoice(n89, 44);
      break;
    case BLTUL:
      n92 = jj_consume_token(BLTUL);
                    n91 = JTBToolkit.makeNodeToken(n92);
        n0 = new NodeChoice(n91, 45);
      break;
    case BLTZ:
      n94 = jj_consume_token(BLTZ);
                   n93 = JTBToolkit.makeNodeToken(n94);
        n0 = new NodeChoice(n93, 46);
      break;
    case BLTZAL:
      n96 = jj_consume_token(BLTZAL);
                     n95 = JTBToolkit.makeNodeToken(n96);
        n0 = new NodeChoice(n95, 47);
      break;
    case BLTZALL:
      n98 = jj_consume_token(BLTZALL);
                      n97 = JTBToolkit.makeNodeToken(n98);
        n0 = new NodeChoice(n97, 48);
      break;
    case BLTZL:
      n100 = jj_consume_token(BLTZL);
                     n99 = JTBToolkit.makeNodeToken(n100);
        n0 = new NodeChoice(n99, 49);
      break;
    case BNE:
      n102 = jj_consume_token(BNE);
                   n101 = JTBToolkit.makeNodeToken(n102);
        n0 = new NodeChoice(n101, 50);
      break;
    case BNEL:
      n104 = jj_consume_token(BNEL);
                    n103 = JTBToolkit.makeNodeToken(n104);
        n0 = new NodeChoice(n103, 51);
      break;
    case BNEZ:
      n106 = jj_consume_token(BNEZ);
                    n105 = JTBToolkit.makeNodeToken(n106);
        n0 = new NodeChoice(n105, 52);
      break;
    case BNEZL:
      n108 = jj_consume_token(BNEZL);
                     n107 = JTBToolkit.makeNodeToken(n108);
        n0 = new NodeChoice(n107, 53);
      break;
    case BREAK:
      n110 = jj_consume_token(BREAK);
                     n109 = JTBToolkit.makeNodeToken(n110);
        n0 = new NodeChoice(n109, 54);
      break;
    case CACHE:
      n112 = jj_consume_token(CACHE);
                     n111 = JTBToolkit.makeNodeToken(n112);
        n0 = new NodeChoice(n111, 55);
      break;
    case CFC0:
      n114 = jj_consume_token(CFC0);
                    n113 = JTBToolkit.makeNodeToken(n114);
        n0 = new NodeChoice(n113, 56);
      break;
    case CFC1:
      n116 = jj_consume_token(CFC1);
                    n115 = JTBToolkit.makeNodeToken(n116);
        n0 = new NodeChoice(n115, 57);
      break;
    case CFC2:
      n118 = jj_consume_token(CFC2);
                    n117 = JTBToolkit.makeNodeToken(n118);
        n0 = new NodeChoice(n117, 58);
      break;
    case CTC0:
      n120 = jj_consume_token(CTC0);
                    n119 = JTBToolkit.makeNodeToken(n120);
        n0 = new NodeChoice(n119, 59);
      break;
    case CTC1:
      n122 = jj_consume_token(CTC1);
                    n121 = JTBToolkit.makeNodeToken(n122);
        n0 = new NodeChoice(n121, 60);
      break;
    case CTC2:
      n124 = jj_consume_token(CTC2);
                    n123 = JTBToolkit.makeNodeToken(n124);
        n0 = new NodeChoice(n123, 61);
      break;
    case DABS:
      n126 = jj_consume_token(DABS);
                    n125 = JTBToolkit.makeNodeToken(n126);
        n0 = new NodeChoice(n125, 62);
      break;
    case DADD:
      n128 = jj_consume_token(DADD);
                    n127 = JTBToolkit.makeNodeToken(n128);
        n0 = new NodeChoice(n127, 63);
      break;
    case DADDI:
      n130 = jj_consume_token(DADDI);
                     n129 = JTBToolkit.makeNodeToken(n130);
        n0 = new NodeChoice(n129, 64);
      break;
    case DADDIU:
      n132 = jj_consume_token(DADDIU);
                      n131 = JTBToolkit.makeNodeToken(n132);
        n0 = new NodeChoice(n131, 65);
      break;
    case DADDU:
      n134 = jj_consume_token(DADDU);
                     n133 = JTBToolkit.makeNodeToken(n134);
        n0 = new NodeChoice(n133, 66);
      break;
    case DDIV:
      n136 = jj_consume_token(DDIV);
                    n135 = JTBToolkit.makeNodeToken(n136);
        n0 = new NodeChoice(n135, 67);
      break;
    case DDIVD:
      n138 = jj_consume_token(DDIVD);
                     n137 = JTBToolkit.makeNodeToken(n138);
        n0 = new NodeChoice(n137, 68);
      break;
    case DDIVDU:
      n140 = jj_consume_token(DDIVDU);
                      n139 = JTBToolkit.makeNodeToken(n140);
        n0 = new NodeChoice(n139, 69);
      break;
    case DDIVU:
      n142 = jj_consume_token(DDIVU);
                     n141 = JTBToolkit.makeNodeToken(n142);
        n0 = new NodeChoice(n141, 70);
      break;
    case DIV:
      n144 = jj_consume_token(DIV);
                   n143 = JTBToolkit.makeNodeToken(n144);
        n0 = new NodeChoice(n143, 71);
      break;
    case DIVD:
      n146 = jj_consume_token(DIVD);
                    n145 = JTBToolkit.makeNodeToken(n146);
        n0 = new NodeChoice(n145, 72);
      break;
    case DIVDU:
      n148 = jj_consume_token(DIVDU);
                     n147 = JTBToolkit.makeNodeToken(n148);
        n0 = new NodeChoice(n147, 73);
      break;
    case DIVO:
      n150 = jj_consume_token(DIVO);
                    n149 = JTBToolkit.makeNodeToken(n150);
        n0 = new NodeChoice(n149, 74);
      break;
    case DIVOU:
      n152 = jj_consume_token(DIVOU);
                     n151 = JTBToolkit.makeNodeToken(n152);
        n0 = new NodeChoice(n151, 75);
      break;
    case DIVU:
      n154 = jj_consume_token(DIVU);
                    n153 = JTBToolkit.makeNodeToken(n154);
        n0 = new NodeChoice(n153, 76);
      break;
    case DLA:
      n156 = jj_consume_token(DLA);
                   n155 = JTBToolkit.makeNodeToken(n156);
        n0 = new NodeChoice(n155, 77);
      break;
    case DLI:
      n158 = jj_consume_token(DLI);
                   n157 = JTBToolkit.makeNodeToken(n158);
        n0 = new NodeChoice(n157, 78);
      break;
    case DMADD16:
      n160 = jj_consume_token(DMADD16);
                       n159 = JTBToolkit.makeNodeToken(n160);
        n0 = new NodeChoice(n159, 79);
      break;
    case DMFC0:
      n162 = jj_consume_token(DMFC0);
                     n161 = JTBToolkit.makeNodeToken(n162);
        n0 = new NodeChoice(n161, 80);
      break;
    case DMFC1:
      n164 = jj_consume_token(DMFC1);
                     n163 = JTBToolkit.makeNodeToken(n164);
        n0 = new NodeChoice(n163, 81);
      break;
    case DMFC2:
      n166 = jj_consume_token(DMFC2);
                     n165 = JTBToolkit.makeNodeToken(n166);
        n0 = new NodeChoice(n165, 82);
      break;
    case DMTC0:
      n168 = jj_consume_token(DMTC0);
                     n167 = JTBToolkit.makeNodeToken(n168);
        n0 = new NodeChoice(n167, 83);
      break;
    case DMTC1:
      n170 = jj_consume_token(DMTC1);
                     n169 = JTBToolkit.makeNodeToken(n170);
        n0 = new NodeChoice(n169, 84);
      break;
    case DMTC2:
      n172 = jj_consume_token(DMTC2);
                     n171 = JTBToolkit.makeNodeToken(n172);
        n0 = new NodeChoice(n171, 85);
      break;
    case DMUL:
      n174 = jj_consume_token(DMUL);
                    n173 = JTBToolkit.makeNodeToken(n174);
        n0 = new NodeChoice(n173, 86);
      break;
    case DMULO:
      n176 = jj_consume_token(DMULO);
                     n175 = JTBToolkit.makeNodeToken(n176);
        n0 = new NodeChoice(n175, 87);
      break;
    case DMULOU:
      n178 = jj_consume_token(DMULOU);
                      n177 = JTBToolkit.makeNodeToken(n178);
        n0 = new NodeChoice(n177, 88);
      break;
    case DMULT:
      n180 = jj_consume_token(DMULT);
                     n179 = JTBToolkit.makeNodeToken(n180);
        n0 = new NodeChoice(n179, 89);
      break;
    case DMULTU:
      n182 = jj_consume_token(DMULTU);
                      n181 = JTBToolkit.makeNodeToken(n182);
        n0 = new NodeChoice(n181, 90);
      break;
    case DNEG:
      n184 = jj_consume_token(DNEG);
                    n183 = JTBToolkit.makeNodeToken(n184);
        n0 = new NodeChoice(n183, 91);
      break;
    case DNEGU:
      n186 = jj_consume_token(DNEGU);
                     n185 = JTBToolkit.makeNodeToken(n186);
        n0 = new NodeChoice(n185, 92);
      break;
    case DREM:
      n188 = jj_consume_token(DREM);
                    n187 = JTBToolkit.makeNodeToken(n188);
        n0 = new NodeChoice(n187, 93);
      break;
    case DREMU:
      n190 = jj_consume_token(DREMU);
                     n189 = JTBToolkit.makeNodeToken(n190);
        n0 = new NodeChoice(n189, 94);
      break;
    case DRET:
      n192 = jj_consume_token(DRET);
                    n191 = JTBToolkit.makeNodeToken(n192);
        n0 = new NodeChoice(n191, 95);
      break;
    case DROL:
      n194 = jj_consume_token(DROL);
                    n193 = JTBToolkit.makeNodeToken(n194);
        n0 = new NodeChoice(n193, 96);
      break;
    case DROR:
      n196 = jj_consume_token(DROR);
                    n195 = JTBToolkit.makeNodeToken(n196);
        n0 = new NodeChoice(n195, 97);
      break;
    case DSLL:
      n198 = jj_consume_token(DSLL);
                    n197 = JTBToolkit.makeNodeToken(n198);
        n0 = new NodeChoice(n197, 98);
      break;
    case DSLLV:
      n200 = jj_consume_token(DSLLV);
                     n199 = JTBToolkit.makeNodeToken(n200);
        n0 = new NodeChoice(n199, 99);
      break;
    case DSLL32:
      n202 = jj_consume_token(DSLL32);
                      n201 = JTBToolkit.makeNodeToken(n202);
        n0 = new NodeChoice(n201, 100);
      break;
    case DSRA:
      n204 = jj_consume_token(DSRA);
                    n203 = JTBToolkit.makeNodeToken(n204);
        n0 = new NodeChoice(n203, 101);
      break;
    case DSRA32:
      n206 = jj_consume_token(DSRA32);
                      n205 = JTBToolkit.makeNodeToken(n206);
        n0 = new NodeChoice(n205, 102);
      break;
    case DSRL:
      n208 = jj_consume_token(DSRL);
                    n207 = JTBToolkit.makeNodeToken(n208);
        n0 = new NodeChoice(n207, 103);
      break;
    case DSRLV:
      n210 = jj_consume_token(DSRLV);
                     n209 = JTBToolkit.makeNodeToken(n210);
        n0 = new NodeChoice(n209, 104);
      break;
    case DSRL32:
      n212 = jj_consume_token(DSRL32);
                      n211 = JTBToolkit.makeNodeToken(n212);
        n0 = new NodeChoice(n211, 105);
      break;
    case DSUB:
      n214 = jj_consume_token(DSUB);
                    n213 = JTBToolkit.makeNodeToken(n214);
        n0 = new NodeChoice(n213, 106);
      break;
    case DSUBU:
      n216 = jj_consume_token(DSUBU);
                     n215 = JTBToolkit.makeNodeToken(n216);
        n0 = new NodeChoice(n215, 107);
      break;
    case ERET:
      n218 = jj_consume_token(ERET);
                    n217 = JTBToolkit.makeNodeToken(n218);
        n0 = new NodeChoice(n217, 108);
      break;
    case FFC:
      n220 = jj_consume_token(FFC);
                   n219 = JTBToolkit.makeNodeToken(n220);
        n0 = new NodeChoice(n219, 109);
      break;
    case FFS:
      n222 = jj_consume_token(FFS);
                   n221 = JTBToolkit.makeNodeToken(n222);
        n0 = new NodeChoice(n221, 110);
      break;
    case FLUSHD:
      n224 = jj_consume_token(FLUSHD);
                      n223 = JTBToolkit.makeNodeToken(n224);
        n0 = new NodeChoice(n223, 111);
      break;
    case J:
      n226 = jj_consume_token(J);
                 n225 = JTBToolkit.makeNodeToken(n226);
        n0 = new NodeChoice(n225, 112);
      break;
    case JR:
      n228 = jj_consume_token(JR);
                  n227 = JTBToolkit.makeNodeToken(n228);
        n0 = new NodeChoice(n227, 113);
      break;
    case JAL:
      n230 = jj_consume_token(JAL);
                   n229 = JTBToolkit.makeNodeToken(n230);
        n0 = new NodeChoice(n229, 114);
      break;
    case JALR:
      n232 = jj_consume_token(JALR);
                    n231 = JTBToolkit.makeNodeToken(n232);
        n0 = new NodeChoice(n231, 115);
      break;
    case LA:
      n234 = jj_consume_token(LA);
                  n233 = JTBToolkit.makeNodeToken(n234);
        n0 = new NodeChoice(n233, 116);
      break;
    case LB:
      n236 = jj_consume_token(LB);
                  n235 = JTBToolkit.makeNodeToken(n236);
        n0 = new NodeChoice(n235, 117);
      break;
    case LBU:
      n238 = jj_consume_token(LBU);
                   n237 = JTBToolkit.makeNodeToken(n238);
        n0 = new NodeChoice(n237, 118);
      break;
    case LD:
      n240 = jj_consume_token(LD);
                  n239 = JTBToolkit.makeNodeToken(n240);
        n0 = new NodeChoice(n239, 119);
      break;
    case LDL:
      n242 = jj_consume_token(LDL);
                   n241 = JTBToolkit.makeNodeToken(n242);
        n0 = new NodeChoice(n241, 120);
      break;
    case LDR:
      n244 = jj_consume_token(LDR);
                   n243 = JTBToolkit.makeNodeToken(n244);
        n0 = new NodeChoice(n243, 121);
      break;
    case LDXC1:
      n246 = jj_consume_token(LDXC1);
                     n245 = JTBToolkit.makeNodeToken(n246);
        n0 = new NodeChoice(n245, 122);
      break;
    case LH:
      n248 = jj_consume_token(LH);
                  n247 = JTBToolkit.makeNodeToken(n248);
        n0 = new NodeChoice(n247, 123);
      break;
    case LHU:
      n250 = jj_consume_token(LHU);
                   n249 = JTBToolkit.makeNodeToken(n250);
        n0 = new NodeChoice(n249, 124);
      break;
    case LI:
      n252 = jj_consume_token(LI);
                  n251 = JTBToolkit.makeNodeToken(n252);
        n0 = new NodeChoice(n251, 125);
      break;
    case LL:
      n254 = jj_consume_token(LL);
                  n253 = JTBToolkit.makeNodeToken(n254);
        n0 = new NodeChoice(n253, 126);
      break;
    case LLD:
      n256 = jj_consume_token(LLD);
                   n255 = JTBToolkit.makeNodeToken(n256);
        n0 = new NodeChoice(n255, 127);
      break;
    case LUI:
      n258 = jj_consume_token(LUI);
                   n257 = JTBToolkit.makeNodeToken(n258);
        n0 = new NodeChoice(n257, 128);
      break;
    case LW:
      n260 = jj_consume_token(LW);
                  n259 = JTBToolkit.makeNodeToken(n260);
        n0 = new NodeChoice(n259, 129);
      break;
    case LWC1:
      n262 = jj_consume_token(LWC1);
                    n261 = JTBToolkit.makeNodeToken(n262);
        n0 = new NodeChoice(n261, 130);
      break;
    case LWL:
      n264 = jj_consume_token(LWL);
                   n263 = JTBToolkit.makeNodeToken(n264);
        n0 = new NodeChoice(n263, 131);
      break;
    case LWR:
      n266 = jj_consume_token(LWR);
                   n265 = JTBToolkit.makeNodeToken(n266);
        n0 = new NodeChoice(n265, 132);
      break;
    case LWU:
      n268 = jj_consume_token(LWU);
                   n267 = JTBToolkit.makeNodeToken(n268);
        n0 = new NodeChoice(n267, 133);
      break;
    case LWXC1:
      n270 = jj_consume_token(LWXC1);
                     n269 = JTBToolkit.makeNodeToken(n270);
        n0 = new NodeChoice(n269, 134);
      break;
    case MADD:
      n272 = jj_consume_token(MADD);
                    n271 = JTBToolkit.makeNodeToken(n272);
        n0 = new NodeChoice(n271, 135);
      break;
    case MADDU:
      n274 = jj_consume_token(MADDU);
                     n273 = JTBToolkit.makeNodeToken(n274);
        n0 = new NodeChoice(n273, 136);
      break;
    case MAD:
      n276 = jj_consume_token(MAD);
                   n275 = JTBToolkit.makeNodeToken(n276);
        n0 = new NodeChoice(n275, 137);
      break;
    case MADU:
      n278 = jj_consume_token(MADU);
                    n277 = JTBToolkit.makeNodeToken(n278);
        n0 = new NodeChoice(n277, 138);
      break;
    case MADD16:
      n280 = jj_consume_token(MADD16);
                      n279 = JTBToolkit.makeNodeToken(n280);
        n0 = new NodeChoice(n279, 139);
      break;
    case MAX:
      n282 = jj_consume_token(MAX);
                   n281 = JTBToolkit.makeNodeToken(n282);
        n0 = new NodeChoice(n281, 140);
      break;
    case MFC0:
      n284 = jj_consume_token(MFC0);
                    n283 = JTBToolkit.makeNodeToken(n284);
        n0 = new NodeChoice(n283, 141);
      break;
    case MFC1:
      n286 = jj_consume_token(MFC1);
                    n285 = JTBToolkit.makeNodeToken(n286);
        n0 = new NodeChoice(n285, 142);
      break;
    case MFC2:
      n288 = jj_consume_token(MFC2);
                    n287 = JTBToolkit.makeNodeToken(n288);
        n0 = new NodeChoice(n287, 143);
      break;
    case MFHI:
      n290 = jj_consume_token(MFHI);
                    n289 = JTBToolkit.makeNodeToken(n290);
        n0 = new NodeChoice(n289, 144);
      break;
    case MFLO:
      n292 = jj_consume_token(MFLO);
                    n291 = JTBToolkit.makeNodeToken(n292);
        n0 = new NodeChoice(n291, 145);
      break;
    case MIN:
      n294 = jj_consume_token(MIN);
                   n293 = JTBToolkit.makeNodeToken(n294);
        n0 = new NodeChoice(n293, 146);
      break;
    case MOVE:
      n296 = jj_consume_token(MOVE);
                    n295 = JTBToolkit.makeNodeToken(n296);
        n0 = new NodeChoice(n295, 147);
      break;
    case MOVF:
      n298 = jj_consume_token(MOVF);
                    n297 = JTBToolkit.makeNodeToken(n298);
        n0 = new NodeChoice(n297, 148);
      break;
    case MOVN:
      n300 = jj_consume_token(MOVN);
                    n299 = JTBToolkit.makeNodeToken(n300);
        n0 = new NodeChoice(n299, 149);
      break;
    case MOVT:
      n302 = jj_consume_token(MOVT);
                    n301 = JTBToolkit.makeNodeToken(n302);
        n0 = new NodeChoice(n301, 150);
      break;
    case MOVZ:
      n304 = jj_consume_token(MOVZ);
                    n303 = JTBToolkit.makeNodeToken(n304);
        n0 = new NodeChoice(n303, 151);
      break;
    case MSUB:
      n306 = jj_consume_token(MSUB);
                    n305 = JTBToolkit.makeNodeToken(n306);
        n0 = new NodeChoice(n305, 152);
      break;
    case MSUBU:
      n308 = jj_consume_token(MSUBU);
                     n307 = JTBToolkit.makeNodeToken(n308);
        n0 = new NodeChoice(n307, 153);
      break;
    case MTC0:
      n310 = jj_consume_token(MTC0);
                    n309 = JTBToolkit.makeNodeToken(n310);
        n0 = new NodeChoice(n309, 154);
      break;
    case MTC1:
      n312 = jj_consume_token(MTC1);
                    n311 = JTBToolkit.makeNodeToken(n312);
        n0 = new NodeChoice(n311, 155);
      break;
    case MTC2:
      n314 = jj_consume_token(MTC2);
                    n313 = JTBToolkit.makeNodeToken(n314);
        n0 = new NodeChoice(n313, 156);
      break;
    case MTHI:
      n316 = jj_consume_token(MTHI);
                    n315 = JTBToolkit.makeNodeToken(n316);
        n0 = new NodeChoice(n315, 157);
      break;
    case MTLO:
      n318 = jj_consume_token(MTLO);
                    n317 = JTBToolkit.makeNodeToken(n318);
        n0 = new NodeChoice(n317, 158);
      break;
    case MUL:
      n320 = jj_consume_token(MUL);
                   n319 = JTBToolkit.makeNodeToken(n320);
        n0 = new NodeChoice(n319, 159);
      break;
    case MULU:
      n322 = jj_consume_token(MULU);
                    n321 = JTBToolkit.makeNodeToken(n322);
        n0 = new NodeChoice(n321, 160);
      break;
    case MULO:
      n324 = jj_consume_token(MULO);
                    n323 = JTBToolkit.makeNodeToken(n324);
        n0 = new NodeChoice(n323, 161);
      break;
    case MULOU:
      n326 = jj_consume_token(MULOU);
                     n325 = JTBToolkit.makeNodeToken(n326);
        n0 = new NodeChoice(n325, 162);
      break;
    case MULT:
      n328 = jj_consume_token(MULT);
                    n327 = JTBToolkit.makeNodeToken(n328);
        n0 = new NodeChoice(n327, 163);
      break;
    case MULTU:
      n330 = jj_consume_token(MULTU);
                     n329 = JTBToolkit.makeNodeToken(n330);
        n0 = new NodeChoice(n329, 164);
      break;
    case NEG:
      n332 = jj_consume_token(NEG);
                   n331 = JTBToolkit.makeNodeToken(n332);
        n0 = new NodeChoice(n331, 165);
      break;
    case NEGU:
      n334 = jj_consume_token(NEGU);
                    n333 = JTBToolkit.makeNodeToken(n334);
        n0 = new NodeChoice(n333, 166);
      break;
    case NOP:
      n336 = jj_consume_token(NOP);
                   n335 = JTBToolkit.makeNodeToken(n336);
        n0 = new NodeChoice(n335, 167);
      break;
    case NOR:
      n338 = jj_consume_token(NOR);
                   n337 = JTBToolkit.makeNodeToken(n338);
        n0 = new NodeChoice(n337, 168);
      break;
    case NOT:
      n340 = jj_consume_token(NOT);
                   n339 = JTBToolkit.makeNodeToken(n340);
        n0 = new NodeChoice(n339, 169);
      break;
    case OR:
      n342 = jj_consume_token(OR);
                  n341 = JTBToolkit.makeNodeToken(n342);
        n0 = new NodeChoice(n341, 170);
      break;
    case ORI:
      n344 = jj_consume_token(ORI);
                   n343 = JTBToolkit.makeNodeToken(n344);
        n0 = new NodeChoice(n343, 171);
      break;
    case PREF:
      n346 = jj_consume_token(PREF);
                    n345 = JTBToolkit.makeNodeToken(n346);
        n0 = new NodeChoice(n345, 172);
      break;
    case PREFX:
      n348 = jj_consume_token(PREFX);
                     n347 = JTBToolkit.makeNodeToken(n348);
        n0 = new NodeChoice(n347, 173);
      break;
    case R2U:
      n350 = jj_consume_token(R2U);
                   n349 = JTBToolkit.makeNodeToken(n350);
        n0 = new NodeChoice(n349, 174);
      break;
    case RADD:
      n352 = jj_consume_token(RADD);
                    n351 = JTBToolkit.makeNodeToken(n352);
        n0 = new NodeChoice(n351, 175);
      break;
    case REM:
      n354 = jj_consume_token(REM);
                   n353 = JTBToolkit.makeNodeToken(n354);
        n0 = new NodeChoice(n353, 176);
      break;
    case REMU:
      n356 = jj_consume_token(REMU);
                    n355 = JTBToolkit.makeNodeToken(n356);
        n0 = new NodeChoice(n355, 177);
      break;
    case RFE:
      n358 = jj_consume_token(RFE);
                   n357 = JTBToolkit.makeNodeToken(n358);
        n0 = new NodeChoice(n357, 178);
      break;
    case RMUL:
      n360 = jj_consume_token(RMUL);
                    n359 = JTBToolkit.makeNodeToken(n360);
        n0 = new NodeChoice(n359, 179);
      break;
    case ROL:
      n362 = jj_consume_token(ROL);
                   n361 = JTBToolkit.makeNodeToken(n362);
        n0 = new NodeChoice(n361, 180);
      break;
    case ROR:
      n364 = jj_consume_token(ROR);
                   n363 = JTBToolkit.makeNodeToken(n364);
        n0 = new NodeChoice(n363, 181);
      break;
    case RSUB:
      n366 = jj_consume_token(RSUB);
                    n365 = JTBToolkit.makeNodeToken(n366);
        n0 = new NodeChoice(n365, 182);
      break;
    case SB:
      n368 = jj_consume_token(SB);
                  n367 = JTBToolkit.makeNodeToken(n368);
        n0 = new NodeChoice(n367, 183);
      break;
    case SC:
      n370 = jj_consume_token(SC);
                  n369 = JTBToolkit.makeNodeToken(n370);
        n0 = new NodeChoice(n369, 184);
      break;
    case SCD:
      n372 = jj_consume_token(SCD);
                   n371 = JTBToolkit.makeNodeToken(n372);
        n0 = new NodeChoice(n371, 185);
      break;
    case SD:
      n374 = jj_consume_token(SD);
                  n373 = JTBToolkit.makeNodeToken(n374);
        n0 = new NodeChoice(n373, 186);
      break;
    case SDBBP:
      n376 = jj_consume_token(SDBBP);
                     n375 = JTBToolkit.makeNodeToken(n376);
        n0 = new NodeChoice(n375, 187);
      break;
    case SDC1:
      n378 = jj_consume_token(SDC1);
                    n377 = JTBToolkit.makeNodeToken(n378);
        n0 = new NodeChoice(n377, 188);
      break;
    case SDL:
      n380 = jj_consume_token(SDL);
                   n379 = JTBToolkit.makeNodeToken(n380);
        n0 = new NodeChoice(n379, 189);
      break;
    case SDR:
      n382 = jj_consume_token(SDR);
                   n381 = JTBToolkit.makeNodeToken(n382);
        n0 = new NodeChoice(n381, 190);
      break;
    case SDXC1:
      n384 = jj_consume_token(SDXC1);
                     n383 = JTBToolkit.makeNodeToken(n384);
        n0 = new NodeChoice(n383, 191);
      break;
    case SELSL:
      n386 = jj_consume_token(SELSL);
                     n385 = JTBToolkit.makeNodeToken(n386);
        n0 = new NodeChoice(n385, 192);
      break;
    case SELSR:
      n388 = jj_consume_token(SELSR);
                     n387 = JTBToolkit.makeNodeToken(n388);
        n0 = new NodeChoice(n387, 193);
      break;
    case SEQ:
      n390 = jj_consume_token(SEQ);
                   n389 = JTBToolkit.makeNodeToken(n390);
        n0 = new NodeChoice(n389, 194);
      break;
    case SGE:
      n392 = jj_consume_token(SGE);
                   n391 = JTBToolkit.makeNodeToken(n392);
        n0 = new NodeChoice(n391, 195);
      break;
    case SGEU:
      n394 = jj_consume_token(SGEU);
                    n393 = JTBToolkit.makeNodeToken(n394);
        n0 = new NodeChoice(n393, 196);
      break;
    case SGT:
      n396 = jj_consume_token(SGT);
                   n395 = JTBToolkit.makeNodeToken(n396);
        n0 = new NodeChoice(n395, 197);
      break;
    case SGTU:
      n398 = jj_consume_token(SGTU);
                    n397 = JTBToolkit.makeNodeToken(n398);
        n0 = new NodeChoice(n397, 198);
      break;
    case SH:
      n400 = jj_consume_token(SH);
                  n399 = JTBToolkit.makeNodeToken(n400);
        n0 = new NodeChoice(n399, 199);
      break;
    case SLE:
      n402 = jj_consume_token(SLE);
                   n401 = JTBToolkit.makeNodeToken(n402);
        n0 = new NodeChoice(n401, 200);
      break;
    case SLEU:
      n404 = jj_consume_token(SLEU);
                    n403 = JTBToolkit.makeNodeToken(n404);
        n0 = new NodeChoice(n403, 201);
      break;
    case SLL:
      n406 = jj_consume_token(SLL);
                   n405 = JTBToolkit.makeNodeToken(n406);
        n0 = new NodeChoice(n405, 202);
      break;
    case SLLV:
      n408 = jj_consume_token(SLLV);
                    n407 = JTBToolkit.makeNodeToken(n408);
        n0 = new NodeChoice(n407, 203);
      break;
    case SLT:
      n410 = jj_consume_token(SLT);
                   n409 = JTBToolkit.makeNodeToken(n410);
        n0 = new NodeChoice(n409, 204);
      break;
    case SLTI:
      n412 = jj_consume_token(SLTI);
                    n411 = JTBToolkit.makeNodeToken(n412);
        n0 = new NodeChoice(n411, 205);
      break;
    case SLTIU:
      n414 = jj_consume_token(SLTIU);
                     n413 = JTBToolkit.makeNodeToken(n414);
        n0 = new NodeChoice(n413, 206);
      break;
    case SLTU:
      n416 = jj_consume_token(SLTU);
                    n415 = JTBToolkit.makeNodeToken(n416);
        n0 = new NodeChoice(n415, 207);
      break;
    case SNE:
      n418 = jj_consume_token(SNE);
                   n417 = JTBToolkit.makeNodeToken(n418);
        n0 = new NodeChoice(n417, 208);
      break;
    case SRA:
      n420 = jj_consume_token(SRA);
                   n419 = JTBToolkit.makeNodeToken(n420);
        n0 = new NodeChoice(n419, 209);
      break;
    case SRAV:
      n422 = jj_consume_token(SRAV);
                    n421 = JTBToolkit.makeNodeToken(n422);
        n0 = new NodeChoice(n421, 210);
      break;
    case SRL:
      n424 = jj_consume_token(SRL);
                   n423 = JTBToolkit.makeNodeToken(n424);
        n0 = new NodeChoice(n423, 211);
      break;
    case SRLV:
      n426 = jj_consume_token(SRLV);
                    n425 = JTBToolkit.makeNodeToken(n426);
        n0 = new NodeChoice(n425, 212);
      break;
    case STANDBY:
      n428 = jj_consume_token(STANDBY);
                       n427 = JTBToolkit.makeNodeToken(n428);
        n0 = new NodeChoice(n427, 213);
      break;
    case SUB:
      n430 = jj_consume_token(SUB);
                   n429 = JTBToolkit.makeNodeToken(n430);
        n0 = new NodeChoice(n429, 214);
      break;
    case SUBU:
      n432 = jj_consume_token(SUBU);
                    n431 = JTBToolkit.makeNodeToken(n432);
        n0 = new NodeChoice(n431, 215);
      break;
    case SUSPEND:
      n434 = jj_consume_token(SUSPEND);
                       n433 = JTBToolkit.makeNodeToken(n434);
        n0 = new NodeChoice(n433, 216);
      break;
    case SW:
      n436 = jj_consume_token(SW);
                  n435 = JTBToolkit.makeNodeToken(n436);
        n0 = new NodeChoice(n435, 217);
      break;
    case SWC1:
      n438 = jj_consume_token(SWC1);
                    n437 = JTBToolkit.makeNodeToken(n438);
        n0 = new NodeChoice(n437, 218);
      break;
    case SWL:
      n440 = jj_consume_token(SWL);
                   n439 = JTBToolkit.makeNodeToken(n440);
        n0 = new NodeChoice(n439, 219);
      break;
    case SWR:
      n442 = jj_consume_token(SWR);
                   n441 = JTBToolkit.makeNodeToken(n442);
        n0 = new NodeChoice(n441, 220);
      break;
    case SWXC1:
      n444 = jj_consume_token(SWXC1);
                     n443 = JTBToolkit.makeNodeToken(n444);
        n0 = new NodeChoice(n443, 221);
      break;
    case SYNC:
      n446 = jj_consume_token(SYNC);
                    n445 = JTBToolkit.makeNodeToken(n446);
        n0 = new NodeChoice(n445, 222);
      break;
    case SYSCALL:
      n448 = jj_consume_token(SYSCALL);
                       n447 = JTBToolkit.makeNodeToken(n448);
        n0 = new NodeChoice(n447, 223);
      break;
    case TEQ:
      n450 = jj_consume_token(TEQ);
                   n449 = JTBToolkit.makeNodeToken(n450);
        n0 = new NodeChoice(n449, 224);
      break;
    case TEQI:
      n452 = jj_consume_token(TEQI);
                    n451 = JTBToolkit.makeNodeToken(n452);
        n0 = new NodeChoice(n451, 225);
      break;
    case TGE:
      n454 = jj_consume_token(TGE);
                   n453 = JTBToolkit.makeNodeToken(n454);
        n0 = new NodeChoice(n453, 226);
      break;
    case TGEI:
      n456 = jj_consume_token(TGEI);
                    n455 = JTBToolkit.makeNodeToken(n456);
        n0 = new NodeChoice(n455, 227);
      break;
    case TGEIU:
      n458 = jj_consume_token(TGEIU);
                     n457 = JTBToolkit.makeNodeToken(n458);
        n0 = new NodeChoice(n457, 228);
      break;
    case TGEU:
      n460 = jj_consume_token(TGEU);
                    n459 = JTBToolkit.makeNodeToken(n460);
        n0 = new NodeChoice(n459, 229);
      break;
    case TLBP:
      n462 = jj_consume_token(TLBP);
                    n461 = JTBToolkit.makeNodeToken(n462);
        n0 = new NodeChoice(n461, 230);
      break;
    case TLBR:
      n464 = jj_consume_token(TLBR);
                    n463 = JTBToolkit.makeNodeToken(n464);
        n0 = new NodeChoice(n463, 231);
      break;
    case TLBWI:
      n466 = jj_consume_token(TLBWI);
                     n465 = JTBToolkit.makeNodeToken(n466);
        n0 = new NodeChoice(n465, 232);
      break;
    case TLBWR:
      n468 = jj_consume_token(TLBWR);
                     n467 = JTBToolkit.makeNodeToken(n468);
        n0 = new NodeChoice(n467, 233);
      break;
    case TLT:
      n470 = jj_consume_token(TLT);
                   n469 = JTBToolkit.makeNodeToken(n470);
        n0 = new NodeChoice(n469, 234);
      break;
    case TLTI:
      n472 = jj_consume_token(TLTI);
                    n471 = JTBToolkit.makeNodeToken(n472);
        n0 = new NodeChoice(n471, 235);
      break;
    case TLTIU:
      n474 = jj_consume_token(TLTIU);
                     n473 = JTBToolkit.makeNodeToken(n474);
        n0 = new NodeChoice(n473, 236);
      break;
    case TLTU:
      n476 = jj_consume_token(TLTU);
                    n475 = JTBToolkit.makeNodeToken(n476);
        n0 = new NodeChoice(n475, 237);
      break;
    case TNE:
      n478 = jj_consume_token(TNE);
                   n477 = JTBToolkit.makeNodeToken(n478);
        n0 = new NodeChoice(n477, 238);
      break;
    case TNEI:
      n480 = jj_consume_token(TNEI);
                    n479 = JTBToolkit.makeNodeToken(n480);
        n0 = new NodeChoice(n479, 239);
      break;
    case U2R:
      n482 = jj_consume_token(U2R);
                   n481 = JTBToolkit.makeNodeToken(n482);
        n0 = new NodeChoice(n481, 240);
      break;
    case ULD:
      n484 = jj_consume_token(ULD);
                   n483 = JTBToolkit.makeNodeToken(n484);
        n0 = new NodeChoice(n483, 241);
      break;
    case ULH:
      n486 = jj_consume_token(ULH);
                   n485 = JTBToolkit.makeNodeToken(n486);
        n0 = new NodeChoice(n485, 242);
      break;
    case ULHU:
      n488 = jj_consume_token(ULHU);
                    n487 = JTBToolkit.makeNodeToken(n488);
        n0 = new NodeChoice(n487, 243);
      break;
    case ULW:
      n490 = jj_consume_token(ULW);
                   n489 = JTBToolkit.makeNodeToken(n490);
        n0 = new NodeChoice(n489, 244);
      break;
    case USD:
      n492 = jj_consume_token(USD);
                   n491 = JTBToolkit.makeNodeToken(n492);
        n0 = new NodeChoice(n491, 245);
      break;
    case USHUSW:
      n494 = jj_consume_token(USHUSW);
                      n493 = JTBToolkit.makeNodeToken(n494);
        n0 = new NodeChoice(n493, 246);
      break;
    case WAITI:
      n496 = jj_consume_token(WAITI);
                     n495 = JTBToolkit.makeNodeToken(n496);
        n0 = new NodeChoice(n495, 247);
      break;
    case WB:
      n498 = jj_consume_token(WB);
                  n497 = JTBToolkit.makeNodeToken(n498);
        n0 = new NodeChoice(n497, 248);
      break;
    case XOR:
      n500 = jj_consume_token(XOR);
                   n499 = JTBToolkit.makeNodeToken(n500);
        n0 = new NodeChoice(n499, 249);
      break;
    case XORI:
      n502 = jj_consume_token(XORI);
                    n501 = JTBToolkit.makeNodeToken(n502);
        n0 = new NodeChoice(n501, 250);
      break;
    case ABS_S:
      n504 = jj_consume_token(ABS_S);
                     n503 = JTBToolkit.makeNodeToken(n504);
        n0 = new NodeChoice(n503, 251);
      break;
    case ADD_S:
      n506 = jj_consume_token(ADD_S);
                     n505 = JTBToolkit.makeNodeToken(n506);
        n0 = new NodeChoice(n505, 252);
      break;
    case C_EQ_S:
      n508 = jj_consume_token(C_EQ_S);
                      n507 = JTBToolkit.makeNodeToken(n508);
        n0 = new NodeChoice(n507, 253);
      break;
    case C_F_S:
      n510 = jj_consume_token(C_F_S);
                     n509 = JTBToolkit.makeNodeToken(n510);
        n0 = new NodeChoice(n509, 254);
      break;
    case C_LE_S:
      n512 = jj_consume_token(C_LE_S);
                      n511 = JTBToolkit.makeNodeToken(n512);
        n0 = new NodeChoice(n511, 255);
      break;
    case C_LT_S:
      n514 = jj_consume_token(C_LT_S);
                      n513 = JTBToolkit.makeNodeToken(n514);
        n0 = new NodeChoice(n513, 256);
      break;
    case C_NGE_S:
      n516 = jj_consume_token(C_NGE_S);
                       n515 = JTBToolkit.makeNodeToken(n516);
        n0 = new NodeChoice(n515, 257);
      break;
    case C_NGL_S:
      n518 = jj_consume_token(C_NGL_S);
                       n517 = JTBToolkit.makeNodeToken(n518);
        n0 = new NodeChoice(n517, 258);
      break;
    case C_NGT_S:
      n520 = jj_consume_token(C_NGT_S);
                       n519 = JTBToolkit.makeNodeToken(n520);
        n0 = new NodeChoice(n519, 259);
      break;
    case C_OLE_S:
      n522 = jj_consume_token(C_OLE_S);
                       n521 = JTBToolkit.makeNodeToken(n522);
        n0 = new NodeChoice(n521, 260);
      break;
    case C_OLT_S:
      n524 = jj_consume_token(C_OLT_S);
                       n523 = JTBToolkit.makeNodeToken(n524);
        n0 = new NodeChoice(n523, 261);
      break;
    case C_SEQ_S:
      n526 = jj_consume_token(C_SEQ_S);
                       n525 = JTBToolkit.makeNodeToken(n526);
        n0 = new NodeChoice(n525, 262);
      break;
    case C_SF_S:
      n528 = jj_consume_token(C_SF_S);
                      n527 = JTBToolkit.makeNodeToken(n528);
        n0 = new NodeChoice(n527, 263);
      break;
    case C_UEQ_S:
      n530 = jj_consume_token(C_UEQ_S);
                       n529 = JTBToolkit.makeNodeToken(n530);
        n0 = new NodeChoice(n529, 264);
      break;
    case C_ULE_S:
      n532 = jj_consume_token(C_ULE_S);
                       n531 = JTBToolkit.makeNodeToken(n532);
        n0 = new NodeChoice(n531, 265);
      break;
    case C_ULT_S:
      n534 = jj_consume_token(C_ULT_S);
                       n533 = JTBToolkit.makeNodeToken(n534);
        n0 = new NodeChoice(n533, 266);
      break;
    case C_UN_S:
      n536 = jj_consume_token(C_UN_S);
                      n535 = JTBToolkit.makeNodeToken(n536);
        n0 = new NodeChoice(n535, 267);
      break;
    case CEIL_L_D:
      n538 = jj_consume_token(CEIL_L_D);
                        n537 = JTBToolkit.makeNodeToken(n538);
        n0 = new NodeChoice(n537, 268);
      break;
    case CEIL_L_S:
      n540 = jj_consume_token(CEIL_L_S);
                        n539 = JTBToolkit.makeNodeToken(n540);
        n0 = new NodeChoice(n539, 269);
      break;
    case CEIL_W_D:
      n542 = jj_consume_token(CEIL_W_D);
                        n541 = JTBToolkit.makeNodeToken(n542);
        n0 = new NodeChoice(n541, 270);
      break;
    case CEIL_W_S:
      n544 = jj_consume_token(CEIL_W_S);
                        n543 = JTBToolkit.makeNodeToken(n544);
        n0 = new NodeChoice(n543, 271);
      break;
    case CVT_D_L:
      n546 = jj_consume_token(CVT_D_L);
                       n545 = JTBToolkit.makeNodeToken(n546);
        n0 = new NodeChoice(n545, 272);
      break;
    case CVT_D_S:
      n548 = jj_consume_token(CVT_D_S);
                       n547 = JTBToolkit.makeNodeToken(n548);
        n0 = new NodeChoice(n547, 273);
      break;
    case CVT_D_W:
      n550 = jj_consume_token(CVT_D_W);
                       n549 = JTBToolkit.makeNodeToken(n550);
        n0 = new NodeChoice(n549, 274);
      break;
    case CVT_L_D:
      n552 = jj_consume_token(CVT_L_D);
                       n551 = JTBToolkit.makeNodeToken(n552);
        n0 = new NodeChoice(n551, 275);
      break;
    case CVT_L_S:
      n554 = jj_consume_token(CVT_L_S);
                       n553 = JTBToolkit.makeNodeToken(n554);
        n0 = new NodeChoice(n553, 276);
      break;
    case CVT_S_D:
      n556 = jj_consume_token(CVT_S_D);
                       n555 = JTBToolkit.makeNodeToken(n556);
        n0 = new NodeChoice(n555, 277);
      break;
    case CVT_S_L:
      n558 = jj_consume_token(CVT_S_L);
                       n557 = JTBToolkit.makeNodeToken(n558);
        n0 = new NodeChoice(n557, 278);
      break;
    case CVT_S_W:
      n560 = jj_consume_token(CVT_S_W);
                       n559 = JTBToolkit.makeNodeToken(n560);
        n0 = new NodeChoice(n559, 279);
      break;
    case CVT_W_D:
      n562 = jj_consume_token(CVT_W_D);
                       n561 = JTBToolkit.makeNodeToken(n562);
        n0 = new NodeChoice(n561, 280);
      break;
    case CVT_W_S:
      n564 = jj_consume_token(CVT_W_S);
                       n563 = JTBToolkit.makeNodeToken(n564);
        n0 = new NodeChoice(n563, 281);
      break;
    case DIV_S:
      n566 = jj_consume_token(DIV_S);
                     n565 = JTBToolkit.makeNodeToken(n566);
        n0 = new NodeChoice(n565, 282);
      break;
    case FLOOR_L_D:
      n568 = jj_consume_token(FLOOR_L_D);
                         n567 = JTBToolkit.makeNodeToken(n568);
        n0 = new NodeChoice(n567, 283);
      break;
    case FLOOR_L_S:
      n570 = jj_consume_token(FLOOR_L_S);
                         n569 = JTBToolkit.makeNodeToken(n570);
        n0 = new NodeChoice(n569, 284);
      break;
    case FLOOR_W_D:
      n572 = jj_consume_token(FLOOR_W_D);
                         n571 = JTBToolkit.makeNodeToken(n572);
        n0 = new NodeChoice(n571, 285);
      break;
    case FLOOR_W_S:
      n574 = jj_consume_token(FLOOR_W_S);
                         n573 = JTBToolkit.makeNodeToken(n574);
        n0 = new NodeChoice(n573, 286);
      break;
    case L_D:
      n576 = jj_consume_token(L_D);
                   n575 = JTBToolkit.makeNodeToken(n576);
        n0 = new NodeChoice(n575, 287);
      break;
    case L_S:
      n578 = jj_consume_token(L_S);
                   n577 = JTBToolkit.makeNodeToken(n578);
        n0 = new NodeChoice(n577, 288);
      break;
    case LDC1:
      n580 = jj_consume_token(LDC1);
                    n579 = JTBToolkit.makeNodeToken(n580);
        n0 = new NodeChoice(n579, 289);
      break;
    case MADD_S:
      n582 = jj_consume_token(MADD_S);
                      n581 = JTBToolkit.makeNodeToken(n582);
        n0 = new NodeChoice(n581, 290);
      break;
    case MOV_S:
      n584 = jj_consume_token(MOV_S);
                     n583 = JTBToolkit.makeNodeToken(n584);
        n0 = new NodeChoice(n583, 291);
      break;
    case MOVF_S:
      n586 = jj_consume_token(MOVF_S);
                      n585 = JTBToolkit.makeNodeToken(n586);
        n0 = new NodeChoice(n585, 292);
      break;
    case MOVN_S:
      n588 = jj_consume_token(MOVN_S);
                      n587 = JTBToolkit.makeNodeToken(n588);
        n0 = new NodeChoice(n587, 293);
      break;
    case MOVT_S:
      n590 = jj_consume_token(MOVT_S);
                      n589 = JTBToolkit.makeNodeToken(n590);
        n0 = new NodeChoice(n589, 294);
      break;
    case MOVZ_S:
      n592 = jj_consume_token(MOVZ_S);
                      n591 = JTBToolkit.makeNodeToken(n592);
        n0 = new NodeChoice(n591, 295);
      break;
    case MSUB_S:
      n594 = jj_consume_token(MSUB_S);
                      n593 = JTBToolkit.makeNodeToken(n594);
        n0 = new NodeChoice(n593, 296);
      break;
    case MUL_S:
      n596 = jj_consume_token(MUL_S);
                     n595 = JTBToolkit.makeNodeToken(n596);
        n0 = new NodeChoice(n595, 297);
      break;
    case NEG_S:
      n598 = jj_consume_token(NEG_S);
                     n597 = JTBToolkit.makeNodeToken(n598);
        n0 = new NodeChoice(n597, 298);
      break;
    case NMADD_S:
      n600 = jj_consume_token(NMADD_S);
                       n599 = JTBToolkit.makeNodeToken(n600);
        n0 = new NodeChoice(n599, 299);
      break;
    case NMSUB_S:
      n602 = jj_consume_token(NMSUB_S);
                       n601 = JTBToolkit.makeNodeToken(n602);
        n0 = new NodeChoice(n601, 300);
      break;
    case RECIP_S:
      n604 = jj_consume_token(RECIP_S);
                       n603 = JTBToolkit.makeNodeToken(n604);
        n0 = new NodeChoice(n603, 301);
      break;
    case ROUND_L_D:
      n606 = jj_consume_token(ROUND_L_D);
                         n605 = JTBToolkit.makeNodeToken(n606);
        n0 = new NodeChoice(n605, 302);
      break;
    case ROUND_L_S:
      n608 = jj_consume_token(ROUND_L_S);
                         n607 = JTBToolkit.makeNodeToken(n608);
        n0 = new NodeChoice(n607, 303);
      break;
    case ROUND_W_D:
      n610 = jj_consume_token(ROUND_W_D);
                         n609 = JTBToolkit.makeNodeToken(n610);
        n0 = new NodeChoice(n609, 304);
      break;
    case ROUND_W_S:
      n612 = jj_consume_token(ROUND_W_S);
                         n611 = JTBToolkit.makeNodeToken(n612);
        n0 = new NodeChoice(n611, 305);
      break;
    case RSQRT_S:
      n614 = jj_consume_token(RSQRT_S);
                       n613 = JTBToolkit.makeNodeToken(n614);
        n0 = new NodeChoice(n613, 306);
      break;
    case S_D:
      n616 = jj_consume_token(S_D);
                   n615 = JTBToolkit.makeNodeToken(n616);
        n0 = new NodeChoice(n615, 307);
      break;
    case S_S:
      n618 = jj_consume_token(S_S);
                   n617 = JTBToolkit.makeNodeToken(n618);
        n0 = new NodeChoice(n617, 308);
      break;
    case SQRT_S:
      n620 = jj_consume_token(SQRT_S);
                      n619 = JTBToolkit.makeNodeToken(n620);
        n0 = new NodeChoice(n619, 309);
      break;
    case SUB_S:
      n622 = jj_consume_token(SUB_S);
                     n621 = JTBToolkit.makeNodeToken(n622);
        n0 = new NodeChoice(n621, 310);
      break;
    case TRUNC_L_D:
      n624 = jj_consume_token(TRUNC_L_D);
                         n623 = JTBToolkit.makeNodeToken(n624);
        n0 = new NodeChoice(n623, 311);
      break;
    case TRUNC_L_S:
      n626 = jj_consume_token(TRUNC_L_S);
                         n625 = JTBToolkit.makeNodeToken(n626);
        n0 = new NodeChoice(n625, 312);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new OpCode(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_3R_336() {
    if (jj_scan_token(RECIP_S)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(BLTUL)) return true;
    return false;
  }

  static private boolean jj_3R_335() {
    if (jj_scan_token(NMSUB_S)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(BLTU)) return true;
    return false;
  }

  static private boolean jj_3R_334() {
    if (jj_scan_token(NMADD_S)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(BLTL)) return true;
    return false;
  }

  static private boolean jj_3R_333() {
    if (jj_scan_token(NEG_S)) return true;
    return false;
  }

  static private boolean jj_3R_439() {
    if (jj_scan_token(DRA)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(BLT)) return true;
    return false;
  }

  static private boolean jj_3R_332() {
    if (jj_scan_token(MUL_S)) return true;
    return false;
  }

  static private boolean jj_3R_438() {
    if (jj_scan_token(DFP)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(BLEZL)) return true;
    return false;
  }

  static private boolean jj_3R_331() {
    if (jj_scan_token(MSUB_S)) return true;
    return false;
  }

  static private boolean jj_3R_437() {
    if (jj_scan_token(DS8)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(BLEZ)) return true;
    return false;
  }

  static private boolean jj_3R_330() {
    if (jj_scan_token(MOVZ_S)) return true;
    return false;
  }

  static private boolean jj_3R_436() {
    if (jj_scan_token(DSP)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(BLEUL)) return true;
    return false;
  }

  static private boolean jj_3R_329() {
    if (jj_scan_token(MOVT_S)) return true;
    return false;
  }

  static private boolean jj_3R_435() {
    if (jj_scan_token(DGP)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(BLEU)) return true;
    return false;
  }

  static private boolean jj_3R_328() {
    if (jj_scan_token(MOVN_S)) return true;
    return false;
  }

  static private boolean jj_3R_434() {
    if (jj_scan_token(DK1)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(BLEL)) return true;
    return false;
  }

  static private boolean jj_3R_327() {
    if (jj_scan_token(MOVF_S)) return true;
    return false;
  }

  static private boolean jj_3R_433() {
    if (jj_scan_token(DK0)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(BLE)) return true;
    return false;
  }

  static private boolean jj_3R_366() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_348()) return true;
    return false;
  }

  static private boolean jj_3R_326() {
    if (jj_scan_token(MOV_S)) return true;
    return false;
  }

  static private boolean jj_3R_432() {
    if (jj_scan_token(DT9)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(BGTZL)) return true;
    return false;
  }

  static private boolean jj_3R_325() {
    if (jj_scan_token(MADD_S)) return true;
    return false;
  }

  static private boolean jj_3R_431() {
    if (jj_scan_token(DT8)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(BGTZ)) return true;
    return false;
  }

  static private boolean jj_3R_324() {
    if (jj_scan_token(LDC1)) return true;
    return false;
  }

  static private boolean jj_3R_430() {
    if (jj_scan_token(DS7)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(BGTUL)) return true;
    return false;
  }

  static private boolean jj_3R_323() {
    if (jj_scan_token(L_S)) return true;
    return false;
  }

  static private boolean jj_3R_429() {
    if (jj_scan_token(DS6)) return true;
    return false;
  }

  static private boolean jj_3R_349() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_348()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_366()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(BGTU)) return true;
    return false;
  }

  static private boolean jj_3R_322() {
    if (jj_scan_token(L_D)) return true;
    return false;
  }

  static private boolean jj_3R_428() {
    if (jj_scan_token(DS5)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(BGTL)) return true;
    return false;
  }

  static private boolean jj_3R_321() {
    if (jj_scan_token(FLOOR_W_S)) return true;
    return false;
  }

  static private boolean jj_3R_427() {
    if (jj_scan_token(DS4)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(BGT)) return true;
    return false;
  }

  static private boolean jj_3R_320() {
    if (jj_scan_token(FLOOR_W_D)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_348()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_349()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_426() {
    if (jj_scan_token(DS3)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(BGEZL)) return true;
    return false;
  }

  static private boolean jj_3R_319() {
    if (jj_scan_token(FLOOR_L_S)) return true;
    return false;
  }

  static private boolean jj_3R_425() {
    if (jj_scan_token(DS2)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(BGEZALL)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_3R_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_318() {
    if (jj_scan_token(FLOOR_L_D)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_424() {
    if (jj_scan_token(DS1)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(BGEZAL)) return true;
    return false;
  }

  static private boolean jj_3R_317() {
    if (jj_scan_token(DIV_S)) return true;
    return false;
  }

  static private boolean jj_3R_423() {
    if (jj_scan_token(DS0)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(BGEZ)) return true;
    return false;
  }

  static private boolean jj_3R_316() {
    if (jj_scan_token(CVT_W_S)) return true;
    return false;
  }

  static private boolean jj_3R_422() {
    if (jj_scan_token(DT7)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(BGEUL)) return true;
    return false;
  }

  static private boolean jj_3R_315() {
    if (jj_scan_token(CVT_W_D)) return true;
    return false;
  }

  static private boolean jj_3R_421() {
    if (jj_scan_token(DT6)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(BGEU)) return true;
    return false;
  }

  static private boolean jj_3R_314() {
    if (jj_scan_token(CVT_S_W)) return true;
    return false;
  }

  static private boolean jj_3R_420() {
    if (jj_scan_token(DT5)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(BGEL)) return true;
    return false;
  }

  static private boolean jj_3R_313() {
    if (jj_scan_token(CVT_S_L)) return true;
    return false;
  }

  static private boolean jj_3R_419() {
    if (jj_scan_token(DT4)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(BGE)) return true;
    return false;
  }

  static private boolean jj_3R_312() {
    if (jj_scan_token(CVT_S_D)) return true;
    return false;
  }

  static private boolean jj_3R_418() {
    if (jj_scan_token(DT3)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(BEQZL)) return true;
    return false;
  }

  static private boolean jj_3R_311() {
    if (jj_scan_token(CVT_L_S)) return true;
    return false;
  }

  static private boolean jj_3R_417() {
    if (jj_scan_token(DT2)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(BEQZ)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(DECIMAL_COLON)) return true;
    return false;
  }

  static private boolean jj_3R_310() {
    if (jj_scan_token(CVT_L_D)) return true;
    return false;
  }

  static private boolean jj_3R_416() {
    if (jj_scan_token(DT1)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(BEQL)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(IDENTIFIER_COLON)) return true;
    return false;
  }

  static private boolean jj_3R_309() {
    if (jj_scan_token(CVT_D_W)) return true;
    return false;
  }

  static private boolean jj_3R_415() {
    if (jj_scan_token(DT0)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(BEQ)) return true;
    return false;
  }

  static private boolean jj_3R_308() {
    if (jj_scan_token(CVT_D_S)) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  static private boolean jj_3R_414() {
    if (jj_scan_token(DA3)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(BC2TL)) return true;
    return false;
  }

  static private boolean jj_3R_307() {
    if (jj_scan_token(CVT_D_L)) return true;
    return false;
  }

  static private boolean jj_3R_413() {
    if (jj_scan_token(DA2)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(BC2T)) return true;
    return false;
  }

  static private boolean jj_3R_306() {
    if (jj_scan_token(CEIL_W_S)) return true;
    return false;
  }

  static private boolean jj_3R_412() {
    if (jj_scan_token(DA1)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(BC2FL)) return true;
    return false;
  }

  static private boolean jj_3R_305() {
    if (jj_scan_token(CEIL_W_D)) return true;
    return false;
  }

  static private boolean jj_3R_411() {
    if (jj_scan_token(DA0)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(BC2F)) return true;
    return false;
  }

  static private boolean jj_3R_304() {
    if (jj_scan_token(CEIL_L_S)) return true;
    return false;
  }

  static private boolean jj_3R_410() {
    if (jj_scan_token(DV1)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(BC1TL)) return true;
    return false;
  }

  static private boolean jj_3R_303() {
    if (jj_scan_token(CEIL_L_D)) return true;
    return false;
  }

  static private boolean jj_3R_409() {
    if (jj_scan_token(DV0)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(BC1T)) return true;
    return false;
  }

  static private boolean jj_3R_302() {
    if (jj_scan_token(C_UN_S)) return true;
    return false;
  }

  static private boolean jj_3R_408() {
    if (jj_scan_token(DAT)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(BC1FL)) return true;
    return false;
  }

  static private boolean jj_3R_301() {
    if (jj_scan_token(C_ULT_S)) return true;
    return false;
  }

  static private boolean jj_3R_407() {
    if (jj_scan_token(DZERO)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(BC0TLBC1F)) return true;
    return false;
  }

  static private boolean jj_3R_300() {
    if (jj_scan_token(C_ULE_S)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_3()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(BC0T)) return true;
    return false;
  }

  static private boolean jj_3R_353() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_407()) {
    jj_scanpos = xsp;
    if (jj_3R_408()) {
    jj_scanpos = xsp;
    if (jj_3R_409()) {
    jj_scanpos = xsp;
    if (jj_3R_410()) {
    jj_scanpos = xsp;
    if (jj_3R_411()) {
    jj_scanpos = xsp;
    if (jj_3R_412()) {
    jj_scanpos = xsp;
    if (jj_3R_413()) {
    jj_scanpos = xsp;
    if (jj_3R_414()) {
    jj_scanpos = xsp;
    if (jj_3R_415()) {
    jj_scanpos = xsp;
    if (jj_3R_416()) {
    jj_scanpos = xsp;
    if (jj_3R_417()) {
    jj_scanpos = xsp;
    if (jj_3R_418()) {
    jj_scanpos = xsp;
    if (jj_3R_419()) {
    jj_scanpos = xsp;
    if (jj_3R_420()) {
    jj_scanpos = xsp;
    if (jj_3R_421()) {
    jj_scanpos = xsp;
    if (jj_3R_422()) {
    jj_scanpos = xsp;
    if (jj_3R_423()) {
    jj_scanpos = xsp;
    if (jj_3R_424()) {
    jj_scanpos = xsp;
    if (jj_3R_425()) {
    jj_scanpos = xsp;
    if (jj_3R_426()) {
    jj_scanpos = xsp;
    if (jj_3R_427()) {
    jj_scanpos = xsp;
    if (jj_3R_428()) {
    jj_scanpos = xsp;
    if (jj_3R_429()) {
    jj_scanpos = xsp;
    if (jj_3R_430()) {
    jj_scanpos = xsp;
    if (jj_3R_431()) {
    jj_scanpos = xsp;
    if (jj_3R_432()) {
    jj_scanpos = xsp;
    if (jj_3R_433()) {
    jj_scanpos = xsp;
    if (jj_3R_434()) {
    jj_scanpos = xsp;
    if (jj_3R_435()) {
    jj_scanpos = xsp;
    if (jj_3R_436()) {
    jj_scanpos = xsp;
    if (jj_3R_437()) {
    jj_scanpos = xsp;
    if (jj_3R_438()) {
    jj_scanpos = xsp;
    if (jj_3R_439()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_299() {
    if (jj_scan_token(C_UEQ_S)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(BC0FL)) return true;
    return false;
  }

  static private boolean jj_3R_298() {
    if (jj_scan_token(C_SF_S)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(BC0F)) return true;
    return false;
  }

  static private boolean jj_3R_297() {
    if (jj_scan_token(C_SEQ_S)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(BAL)) return true;
    return false;
  }

  static private boolean jj_3R_296() {
    if (jj_scan_token(C_OLT_S)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(B)) return true;
    return false;
  }

  static private boolean jj_3R_295() {
    if (jj_scan_token(C_OLE_S)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_294() {
    if (jj_scan_token(C_NGT_S)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(ADDU)) return true;
    return false;
  }

  static private boolean jj_3R_293() {
    if (jj_scan_token(C_NGL_S)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(ADDCIU)) return true;
    return false;
  }

  static private boolean jj_3R_292() {
    if (jj_scan_token(C_NGE_S)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  static private boolean jj_3R_291() {
    if (jj_scan_token(C_LT_S)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(ABS)) return true;
    return false;
  }

  static private boolean jj_3R_290() {
    if (jj_scan_token(C_LE_S)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) {
    jj_scanpos = xsp;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) {
    jj_scanpos = xsp;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) {
    jj_scanpos = xsp;
    if (jj_3R_303()) {
    jj_scanpos = xsp;
    if (jj_3R_304()) {
    jj_scanpos = xsp;
    if (jj_3R_305()) {
    jj_scanpos = xsp;
    if (jj_3R_306()) {
    jj_scanpos = xsp;
    if (jj_3R_307()) {
    jj_scanpos = xsp;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) {
    jj_scanpos = xsp;
    if (jj_3R_313()) {
    jj_scanpos = xsp;
    if (jj_3R_314()) {
    jj_scanpos = xsp;
    if (jj_3R_315()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) {
    jj_scanpos = xsp;
    if (jj_3R_317()) {
    jj_scanpos = xsp;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) {
    jj_scanpos = xsp;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) {
    jj_scanpos = xsp;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) {
    jj_scanpos = xsp;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) {
    jj_scanpos = xsp;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) {
    jj_scanpos = xsp;
    if (jj_3R_329()) {
    jj_scanpos = xsp;
    if (jj_3R_330()) {
    jj_scanpos = xsp;
    if (jj_3R_331()) {
    jj_scanpos = xsp;
    if (jj_3R_332()) {
    jj_scanpos = xsp;
    if (jj_3R_333()) {
    jj_scanpos = xsp;
    if (jj_3R_334()) {
    jj_scanpos = xsp;
    if (jj_3R_335()) {
    jj_scanpos = xsp;
    if (jj_3R_336()) {
    jj_scanpos = xsp;
    if (jj_3R_337()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_3R_340()) {
    jj_scanpos = xsp;
    if (jj_3R_341()) {
    jj_scanpos = xsp;
    if (jj_3R_342()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) {
    jj_scanpos = xsp;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_289() {
    if (jj_scan_token(C_F_S)) return true;
    return false;
  }

  static private boolean jj_3R_288() {
    if (jj_scan_token(C_EQ_S)) return true;
    return false;
  }

  static private boolean jj_3R_287() {
    if (jj_scan_token(ADD_S)) return true;
    return false;
  }

  static private boolean jj_3R_286() {
    if (jj_scan_token(ABS_S)) return true;
    return false;
  }

  static private boolean jj_3R_285() {
    if (jj_scan_token(XORI)) return true;
    return false;
  }

  static private boolean jj_3R_284() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  static private boolean jj_3R_283() {
    if (jj_scan_token(WB)) return true;
    return false;
  }

  static private boolean jj_3R_282() {
    if (jj_scan_token(WAITI)) return true;
    return false;
  }

  static private boolean jj_3R_281() {
    if (jj_scan_token(USHUSW)) return true;
    return false;
  }

  static private boolean jj_3R_280() {
    if (jj_scan_token(USD)) return true;
    return false;
  }

  static private boolean jj_3R_279() {
    if (jj_scan_token(ULW)) return true;
    return false;
  }

  static private boolean jj_3R_278() {
    if (jj_scan_token(ULHU)) return true;
    return false;
  }

  static private boolean jj_3R_277() {
    if (jj_scan_token(ULH)) return true;
    return false;
  }

  static private boolean jj_3R_276() {
    if (jj_scan_token(ULD)) return true;
    return false;
  }

  static private boolean jj_3R_275() {
    if (jj_scan_token(U2R)) return true;
    return false;
  }

  static private boolean jj_3R_274() {
    if (jj_scan_token(TNEI)) return true;
    return false;
  }

  static private boolean jj_3R_406() {
    if (jj_scan_token(RA)) return true;
    return false;
  }

  static private boolean jj_3R_273() {
    if (jj_scan_token(TNE)) return true;
    return false;
  }

  static private boolean jj_3R_405() {
    if (jj_scan_token(FP)) return true;
    return false;
  }

  static private boolean jj_3R_272() {
    if (jj_scan_token(TLTU)) return true;
    return false;
  }

  static private boolean jj_3R_404() {
    if (jj_scan_token(S8)) return true;
    return false;
  }

  static private boolean jj_3R_271() {
    if (jj_scan_token(TLTIU)) return true;
    return false;
  }

  static private boolean jj_3R_403() {
    if (jj_scan_token(SP)) return true;
    return false;
  }

  static private boolean jj_3R_270() {
    if (jj_scan_token(TLTI)) return true;
    return false;
  }

  static private boolean jj_3R_402() {
    if (jj_scan_token(GP)) return true;
    return false;
  }

  static private boolean jj_3R_269() {
    if (jj_scan_token(TLT)) return true;
    return false;
  }

  static private boolean jj_3R_401() {
    if (jj_scan_token(K1)) return true;
    return false;
  }

  static private boolean jj_3R_268() {
    if (jj_scan_token(TLBWR)) return true;
    return false;
  }

  static private boolean jj_3R_400() {
    if (jj_scan_token(K0)) return true;
    return false;
  }

  static private boolean jj_3R_267() {
    if (jj_scan_token(TLBWI)) return true;
    return false;
  }

  static private boolean jj_3R_399() {
    if (jj_scan_token(T9)) return true;
    return false;
  }

  static private boolean jj_3R_266() {
    if (jj_scan_token(TLBR)) return true;
    return false;
  }

  static private boolean jj_3R_398() {
    if (jj_scan_token(T8)) return true;
    return false;
  }

  static private boolean jj_3R_265() {
    if (jj_scan_token(TLBP)) return true;
    return false;
  }

  static private boolean jj_3R_397() {
    if (jj_scan_token(S7)) return true;
    return false;
  }

  static private boolean jj_3R_264() {
    if (jj_scan_token(TGEU)) return true;
    return false;
  }

  static private boolean jj_3R_396() {
    if (jj_scan_token(S6)) return true;
    return false;
  }

  static private boolean jj_3R_263() {
    if (jj_scan_token(TGEIU)) return true;
    return false;
  }

  static private boolean jj_3R_395() {
    if (jj_scan_token(S5)) return true;
    return false;
  }

  static private boolean jj_3R_262() {
    if (jj_scan_token(TGEI)) return true;
    return false;
  }

  static private boolean jj_3R_394() {
    if (jj_scan_token(S4)) return true;
    return false;
  }

  static private boolean jj_3R_261() {
    if (jj_scan_token(TGE)) return true;
    return false;
  }

  static private boolean jj_3R_393() {
    if (jj_scan_token(S3)) return true;
    return false;
  }

  static private boolean jj_3R_260() {
    if (jj_scan_token(TEQI)) return true;
    return false;
  }

  static private boolean jj_3R_392() {
    if (jj_scan_token(S2)) return true;
    return false;
  }

  static private boolean jj_3R_259() {
    if (jj_scan_token(TEQ)) return true;
    return false;
  }

  static private boolean jj_3R_391() {
    if (jj_scan_token(S1)) return true;
    return false;
  }

  static private boolean jj_3R_258() {
    if (jj_scan_token(SYSCALL)) return true;
    return false;
  }

  static private boolean jj_3R_390() {
    if (jj_scan_token(S0)) return true;
    return false;
  }

  static private boolean jj_3R_257() {
    if (jj_scan_token(SYNC)) return true;
    return false;
  }

  static private boolean jj_3R_389() {
    if (jj_scan_token(T7)) return true;
    return false;
  }

  static private boolean jj_3R_256() {
    if (jj_scan_token(SWXC1)) return true;
    return false;
  }

  static private boolean jj_3R_388() {
    if (jj_scan_token(T6)) return true;
    return false;
  }

  static private boolean jj_3R_255() {
    if (jj_scan_token(SWR)) return true;
    return false;
  }

  static private boolean jj_3R_387() {
    if (jj_scan_token(T5)) return true;
    return false;
  }

  static private boolean jj_3R_254() {
    if (jj_scan_token(SWL)) return true;
    return false;
  }

  static private boolean jj_3R_386() {
    if (jj_scan_token(T4)) return true;
    return false;
  }

  static private boolean jj_3R_253() {
    if (jj_scan_token(SWC1)) return true;
    return false;
  }

  static private boolean jj_3R_385() {
    if (jj_scan_token(T3)) return true;
    return false;
  }

  static private boolean jj_3R_252() {
    if (jj_scan_token(SW)) return true;
    return false;
  }

  static private boolean jj_3R_384() {
    if (jj_scan_token(T2)) return true;
    return false;
  }

  static private boolean jj_3R_251() {
    if (jj_scan_token(SUSPEND)) return true;
    return false;
  }

  static private boolean jj_3R_383() {
    if (jj_scan_token(T1)) return true;
    return false;
  }

  static private boolean jj_3R_250() {
    if (jj_scan_token(SUBU)) return true;
    return false;
  }

  static private boolean jj_3R_382() {
    if (jj_scan_token(T0)) return true;
    return false;
  }

  static private boolean jj_3R_249() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  static private boolean jj_3R_381() {
    if (jj_scan_token(A3)) return true;
    return false;
  }

  static private boolean jj_3R_248() {
    if (jj_scan_token(STANDBY)) return true;
    return false;
  }

  static private boolean jj_3R_380() {
    if (jj_scan_token(A2)) return true;
    return false;
  }

  static private boolean jj_3R_247() {
    if (jj_scan_token(SRLV)) return true;
    return false;
  }

  static private boolean jj_3R_379() {
    if (jj_scan_token(A1)) return true;
    return false;
  }

  static private boolean jj_3R_246() {
    if (jj_scan_token(SRL)) return true;
    return false;
  }

  static private boolean jj_3R_378() {
    if (jj_scan_token(A0)) return true;
    return false;
  }

  static private boolean jj_3R_245() {
    if (jj_scan_token(SRAV)) return true;
    return false;
  }

  static private boolean jj_3R_377() {
    if (jj_scan_token(V1)) return true;
    return false;
  }

  static private boolean jj_3R_244() {
    if (jj_scan_token(SRA)) return true;
    return false;
  }

  static private boolean jj_3R_376() {
    if (jj_scan_token(V0)) return true;
    return false;
  }

  static private boolean jj_3R_243() {
    if (jj_scan_token(SNE)) return true;
    return false;
  }

  static private boolean jj_3R_375() {
    if (jj_scan_token(AT)) return true;
    return false;
  }

  static private boolean jj_3R_242() {
    if (jj_scan_token(SLTU)) return true;
    return false;
  }

  static private boolean jj_3R_374() {
    if (jj_scan_token(ZERO)) return true;
    return false;
  }

  static private boolean jj_3R_241() {
    if (jj_scan_token(SLTIU)) return true;
    return false;
  }

  static private boolean jj_3R_352() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) {
    jj_scanpos = xsp;
    if (jj_3R_375()) {
    jj_scanpos = xsp;
    if (jj_3R_376()) {
    jj_scanpos = xsp;
    if (jj_3R_377()) {
    jj_scanpos = xsp;
    if (jj_3R_378()) {
    jj_scanpos = xsp;
    if (jj_3R_379()) {
    jj_scanpos = xsp;
    if (jj_3R_380()) {
    jj_scanpos = xsp;
    if (jj_3R_381()) {
    jj_scanpos = xsp;
    if (jj_3R_382()) {
    jj_scanpos = xsp;
    if (jj_3R_383()) {
    jj_scanpos = xsp;
    if (jj_3R_384()) {
    jj_scanpos = xsp;
    if (jj_3R_385()) {
    jj_scanpos = xsp;
    if (jj_3R_386()) {
    jj_scanpos = xsp;
    if (jj_3R_387()) {
    jj_scanpos = xsp;
    if (jj_3R_388()) {
    jj_scanpos = xsp;
    if (jj_3R_389()) {
    jj_scanpos = xsp;
    if (jj_3R_390()) {
    jj_scanpos = xsp;
    if (jj_3R_391()) {
    jj_scanpos = xsp;
    if (jj_3R_392()) {
    jj_scanpos = xsp;
    if (jj_3R_393()) {
    jj_scanpos = xsp;
    if (jj_3R_394()) {
    jj_scanpos = xsp;
    if (jj_3R_395()) {
    jj_scanpos = xsp;
    if (jj_3R_396()) {
    jj_scanpos = xsp;
    if (jj_3R_397()) {
    jj_scanpos = xsp;
    if (jj_3R_398()) {
    jj_scanpos = xsp;
    if (jj_3R_399()) {
    jj_scanpos = xsp;
    if (jj_3R_400()) {
    jj_scanpos = xsp;
    if (jj_3R_401()) {
    jj_scanpos = xsp;
    if (jj_3R_402()) {
    jj_scanpos = xsp;
    if (jj_3R_403()) {
    jj_scanpos = xsp;
    if (jj_3R_404()) {
    jj_scanpos = xsp;
    if (jj_3R_405()) {
    jj_scanpos = xsp;
    if (jj_3R_406()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_240() {
    if (jj_scan_token(SLTI)) return true;
    return false;
  }

  static private boolean jj_3R_239() {
    if (jj_scan_token(SLT)) return true;
    return false;
  }

  static private boolean jj_3R_238() {
    if (jj_scan_token(SLLV)) return true;
    return false;
  }

  static private boolean jj_3R_237() {
    if (jj_scan_token(SLL)) return true;
    return false;
  }

  static private boolean jj_3R_236() {
    if (jj_scan_token(SLEU)) return true;
    return false;
  }

  static private boolean jj_3R_235() {
    if (jj_scan_token(SLE)) return true;
    return false;
  }

  static private boolean jj_3R_234() {
    if (jj_scan_token(SH)) return true;
    return false;
  }

  static private boolean jj_3R_233() {
    if (jj_scan_token(SGTU)) return true;
    return false;
  }

  static private boolean jj_3R_232() {
    if (jj_scan_token(SGT)) return true;
    return false;
  }

  static private boolean jj_3R_231() {
    if (jj_scan_token(SGEU)) return true;
    return false;
  }

  static private boolean jj_3R_230() {
    if (jj_scan_token(SGE)) return true;
    return false;
  }

  static private boolean jj_3R_229() {
    if (jj_scan_token(SEQ)) return true;
    return false;
  }

  static private boolean jj_3R_228() {
    if (jj_scan_token(SELSR)) return true;
    return false;
  }

  static private boolean jj_3R_227() {
    if (jj_scan_token(SELSL)) return true;
    return false;
  }

  static private boolean jj_3R_226() {
    if (jj_scan_token(SDXC1)) return true;
    return false;
  }

  static private boolean jj_3R_225() {
    if (jj_scan_token(SDR)) return true;
    return false;
  }

  static private boolean jj_3R_224() {
    if (jj_scan_token(SDL)) return true;
    return false;
  }

  static private boolean jj_3R_223() {
    if (jj_scan_token(SDC1)) return true;
    return false;
  }

  static private boolean jj_3R_222() {
    if (jj_scan_token(SDBBP)) return true;
    return false;
  }

  static private boolean jj_3R_221() {
    if (jj_scan_token(SD)) return true;
    return false;
  }

  static private boolean jj_3R_220() {
    if (jj_scan_token(SCD)) return true;
    return false;
  }

  static private boolean jj_3R_219() {
    if (jj_scan_token(SC)) return true;
    return false;
  }

  static private boolean jj_3R_218() {
    if (jj_scan_token(SB)) return true;
    return false;
  }

  static private boolean jj_3R_217() {
    if (jj_scan_token(RSUB)) return true;
    return false;
  }

  static private boolean jj_3R_216() {
    if (jj_scan_token(ROR)) return true;
    return false;
  }

  static private boolean jj_3R_215() {
    if (jj_scan_token(ROL)) return true;
    return false;
  }

  static private boolean jj_3R_463() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_214() {
    if (jj_scan_token(RMUL)) return true;
    return false;
  }

  static private boolean jj_3R_462() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  static private boolean jj_3R_213() {
    if (jj_scan_token(RFE)) return true;
    return false;
  }

  static private boolean jj_3R_461() {
    if (jj_scan_token(OCTAL)) return true;
    return false;
  }

  static private boolean jj_3R_212() {
    if (jj_scan_token(REMU)) return true;
    return false;
  }

  static private boolean jj_3R_460() {
    if (jj_scan_token(HEXADECIMAL)) return true;
    return false;
  }

  static private boolean jj_3R_211() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  static private boolean jj_3R_459() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  static private boolean jj_3R_210() {
    if (jj_scan_token(RADD)) return true;
    return false;
  }

  static private boolean jj_3R_457() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_459()) {
    jj_scanpos = xsp;
    if (jj_3R_460()) {
    jj_scanpos = xsp;
    if (jj_3R_461()) {
    jj_scanpos = xsp;
    if (jj_3R_462()) {
    jj_scanpos = xsp;
    if (jj_3R_463()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_209() {
    if (jj_scan_token(R2U)) return true;
    return false;
  }

  static private boolean jj_3R_208() {
    if (jj_scan_token(PREFX)) return true;
    return false;
  }

  static private boolean jj_3R_207() {
    if (jj_scan_token(PREF)) return true;
    return false;
  }

  static private boolean jj_3R_206() {
    if (jj_scan_token(ORI)) return true;
    return false;
  }

  static private boolean jj_3R_205() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_204() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_203() {
    if (jj_scan_token(NOR)) return true;
    return false;
  }

  static private boolean jj_3R_450() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  static private boolean jj_3R_202() {
    if (jj_scan_token(NOP)) return true;
    return false;
  }

  static private boolean jj_3R_449() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  static private boolean jj_3R_201() {
    if (jj_scan_token(NEGU)) return true;
    return false;
  }

  static private boolean jj_3R_456() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_448() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_200() {
    if (jj_scan_token(NEG)) return true;
    return false;
  }

  static private boolean jj_3R_447() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_199() {
    if (jj_scan_token(MULTU)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_446() {
    if (jj_scan_token(FLOAT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_456()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_440() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_447()) {
    jj_scanpos = xsp;
    if (jj_3R_448()) {
    jj_scanpos = xsp;
    if (jj_3R_449()) {
    jj_scanpos = xsp;
    if (jj_3R_450()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_198() {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  static private boolean jj_3R_197() {
    if (jj_scan_token(MULOU)) return true;
    return false;
  }

  static private boolean jj_3R_196() {
    if (jj_scan_token(MULO)) return true;
    return false;
  }

  static private boolean jj_3R_455() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_195() {
    if (jj_scan_token(MULU)) return true;
    return false;
  }

  static private boolean jj_3R_194() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  static private boolean jj_3R_445() {
    if (jj_3R_9()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_455()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_193() {
    if (jj_scan_token(MTLO)) return true;
    return false;
  }

  static private boolean jj_3R_192() {
    if (jj_scan_token(MTHI)) return true;
    return false;
  }

  static private boolean jj_3R_372() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_445()) {
    jj_scanpos = xsp;
    if (jj_3R_446()) return true;
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  static private boolean jj_3R_191() {
    if (jj_scan_token(MTC2)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(CARET)) return true;
    return false;
  }

  static private boolean jj_3R_190() {
    if (jj_scan_token(MTC1)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(AMP)) return true;
    return false;
  }

  static private boolean jj_3R_189() {
    if (jj_scan_token(MTC0)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(RSHIFT)) return true;
    return false;
  }

  static private boolean jj_3R_188() {
    if (jj_scan_token(MSUBU)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  static private boolean jj_3R_187() {
    if (jj_scan_token(MSUB)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_186() {
    if (jj_scan_token(MOVZ)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_185() {
    if (jj_scan_token(MOVT)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_184() {
    if (jj_scan_token(MOVN)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(BY)) return true;
    return false;
  }

  static private boolean jj_3R_183() {
    if (jj_scan_token(MOVF)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  static private boolean jj_3R_182() {
    if (jj_scan_token(MOVE)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_181() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3R_373() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_351()) return true;
    return false;
  }

  static private boolean jj_3R_180() {
    if (jj_scan_token(MFLO)) return true;
    return false;
  }

  static private boolean jj_3R_351() {
    if (jj_3R_372()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_373()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_179() {
    if (jj_scan_token(MFHI)) return true;
    return false;
  }

  static private boolean jj_3R_178() {
    if (jj_scan_token(MFC2)) return true;
    return false;
  }

  static private boolean jj_3R_177() {
    if (jj_scan_token(MFC1)) return true;
    return false;
  }

  static private boolean jj_3R_176() {
    if (jj_scan_token(MFC0)) return true;
    return false;
  }

  static private boolean jj_3R_175() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static private boolean jj_3R_174() {
    if (jj_scan_token(MADD16)) return true;
    return false;
  }

  static private boolean jj_3R_371() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_173() {
    if (jj_scan_token(MADU)) return true;
    return false;
  }

  static private boolean jj_3R_370() {
    if (jj_scan_token(FLOAT2)) return true;
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_scan_token(MAD)) return true;
    return false;
  }

  static private boolean jj_3R_369() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  static private boolean jj_3R_171() {
    if (jj_scan_token(MADDU)) return true;
    return false;
  }

  static private boolean jj_3R_368() {
    if (jj_scan_token(HALF)) return true;
    return false;
  }

  static private boolean jj_3R_170() {
    if (jj_scan_token(MADD)) return true;
    return false;
  }

  static private boolean jj_3R_367() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  static private boolean jj_3R_452() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_scan_token(LWXC1)) return true;
    return false;
  }

  static private boolean jj_3R_350() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_367()) {
    jj_scanpos = xsp;
    if (jj_3R_368()) {
    jj_scanpos = xsp;
    if (jj_3R_369()) {
    jj_scanpos = xsp;
    if (jj_3R_370()) {
    jj_scanpos = xsp;
    if (jj_3R_371()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_451() {
    if (jj_3R_457()) return true;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_scan_token(LWU)) return true;
    return false;
  }

  static private boolean jj_3R_167() {
    if (jj_scan_token(LWR)) return true;
    return false;
  }

  static private boolean jj_3R_441() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_451()) {
    jj_scanpos = xsp;
    if (jj_3R_452()) return true;
    }
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_scan_token(LWL)) return true;
    return false;
  }

  static private boolean jj_3R_165() {
    if (jj_scan_token(LWC1)) return true;
    return false;
  }

  static private boolean jj_3R_164() {
    if (jj_scan_token(LW)) return true;
    return false;
  }

  static private boolean jj_3R_163() {
    if (jj_scan_token(LUI)) return true;
    return false;
  }

  static private boolean jj_3R_162() {
    if (jj_scan_token(LLD)) return true;
    return false;
  }

  static private boolean jj_3R_161() {
    if (jj_scan_token(LL)) return true;
    return false;
  }

  static private boolean jj_3R_359() {
    if (jj_3R_441()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(SPACE)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_160() {
    if (jj_scan_token(LI)) return true;
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_scan_token(LHU)) return true;
    return false;
  }

  static private boolean jj_3R_358() {
    if (jj_3R_440()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_158() {
    if (jj_scan_token(LH)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(ASCIIZ)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) return true;
    }
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_scan_token(LDXC1)) return true;
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_scan_token(LDR)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(ASCII)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_scan_token(LDL)) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_scan_token(LD)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_350()) return true;
    if (jj_3R_351()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_scan_token(LBU)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    if (jj_scan_token(LB)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_151() {
    if (jj_scan_token(LA)) return true;
    return false;
  }

  static private boolean jj_3R_150() {
    if (jj_scan_token(JALR)) return true;
    return false;
  }

  static private boolean jj_3R_360() {
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_scan_token(JAL)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_360()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_scan_token(JR)) return true;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_scan_token(J)) return true;
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_scan_token(FLUSHD)) return true;
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_scan_token(FFS)) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_scan_token(FFC)) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_scan_token(ERET)) return true;
    return false;
  }

  static private boolean jj_3R_357() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_33()) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_142() {
    if (jj_scan_token(DSUBU)) return true;
    return false;
  }

  static private boolean jj_3R_356() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_scan_token(DSUB)) return true;
    return false;
  }

  static private boolean jj_3R_355() {
    if (jj_scan_token(DECIMAL_F)) return true;
    return false;
  }

  static private boolean jj_3R_140() {
    if (jj_scan_token(DSRL32)) return true;
    return false;
  }

  static private boolean jj_3R_354() {
    if (jj_scan_token(DECIMAL_B)) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_scan_token(DSRLV)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) {
    jj_scanpos = xsp;
    if (jj_3R_357()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_scan_token(DSRL)) return true;
    return false;
  }

  static private boolean jj_3R_137() {
    if (jj_scan_token(DSRA32)) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_scan_token(DSRA)) return true;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_scan_token(DSLL32)) return true;
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_scan_token(DSLLV)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_scan_token(DSLL)) return true;
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_scan_token(DROR)) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_scan_token(DROL)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_scan_token(DRET)) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_scan_token(DREMU)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_scan_token(DREM)) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_scan_token(DNEGU)) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_scan_token(DNEG)) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_scan_token(DMULTU)) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_scan_token(DMULT)) return true;
    return false;
  }

  static private boolean jj_3R_454() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_scan_token(DMULOU)) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_scan_token(DMULO)) return true;
    return false;
  }

  static private boolean jj_3R_465() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_scan_token(DMUL)) return true;
    return false;
  }

  static private boolean jj_3R_464() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_scan_token(DMTC2)) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_scan_token(DMTC1)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_scan_token(DMTC0)) return true;
    return false;
  }

  static private boolean jj_3R_458() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_464()) {
    jj_scanpos = xsp;
    if (jj_3R_465()) return true;
    }
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_scan_token(DMFC2)) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_scan_token(DMFC1)) return true;
    return false;
  }

  static private boolean jj_3R_453() {
    if (jj_3R_7()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_458()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_scan_token(DMFC0)) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_scan_token(DMADD16)) return true;
    return false;
  }

  static private boolean jj_3R_443() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_453()) {
    jj_scanpos = xsp;
    if (jj_3R_454()) return true;
    }
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_scan_token(DLI)) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_scan_token(DLA)) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_scan_token(DIVU)) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_scan_token(DIVOU)) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_scan_token(DIVO)) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_scan_token(DIVDU)) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(DIVD)) return true;
    return false;
  }

  static private boolean jj_3R_442() {
    if (jj_scan_token(DOLLAR_F_DECIMAL)) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(DDIVU)) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_scan_token(DDIVDU)) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(DDIVD)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_353()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(DDIV)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_352()) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(DADDU)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(DOLLAR_DECIMAL)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(DADDIU)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(DADDI)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(DADD)) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(DABS)) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(CTC2)) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_scan_token(CTC1)) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(CTC0)) return true;
    return false;
  }

  static private boolean jj_3R_365() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(CFC2)) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(CFC1)) return true;
    return false;
  }

  static private boolean jj_3R_347() {
    if (jj_scan_token(TRUNC_L_S)) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(CFC0)) return true;
    return false;
  }

  static private boolean jj_3R_444() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_346() {
    if (jj_scan_token(TRUNC_L_D)) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(CACHE)) return true;
    return false;
  }

  static private boolean jj_3R_345() {
    if (jj_scan_token(SUB_S)) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  static private boolean jj_3R_364() {
    if (jj_3R_443()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_444()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_344() {
    if (jj_scan_token(SQRT_S)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(BNEZL)) return true;
    return false;
  }

  static private boolean jj_3R_363() {
    if (jj_3R_442()) return true;
    return false;
  }

  static private boolean jj_3R_343() {
    if (jj_scan_token(S_S)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(BNEZ)) return true;
    return false;
  }

  static private boolean jj_3R_342() {
    if (jj_scan_token(S_D)) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(BNEL)) return true;
    return false;
  }

  static private boolean jj_3R_341() {
    if (jj_scan_token(RSQRT_S)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(BNE)) return true;
    return false;
  }

  static private boolean jj_3R_340() {
    if (jj_scan_token(ROUND_W_S)) return true;
    return false;
  }

  static private boolean jj_3R_362() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(BLTZL)) return true;
    return false;
  }

  static private boolean jj_3R_339() {
    if (jj_scan_token(ROUND_W_D)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_361() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(BLTZALL)) return true;
    return false;
  }

  static private boolean jj_3R_338() {
    if (jj_scan_token(ROUND_L_S)) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(BLTZAL)) return true;
    return false;
  }

  static private boolean jj_3R_348() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) {
    jj_scanpos = xsp;
    if (jj_3R_363()) {
    jj_scanpos = xsp;
    if (jj_3R_364()) {
    jj_scanpos = xsp;
    if (jj_3R_365()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_337() {
    if (jj_scan_token(ROUND_L_D)) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(BLTZ)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MIPSParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static private int[] jj_la1_10;
  static private int[] jj_la1_11;
  static private int[] jj_la1_12;
  static private int[] jj_la1_13;
  static private int[] jj_la1_14;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
      jj_la1_init_8();
      jj_la1_init_9();
      jj_la1_init_10();
      jj_la1_init_11();
      jj_la1_init_12();
      jj_la1_init_13();
      jj_la1_init_14();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffe00000,0x8,0xffe00000,0x0,0x40,0x40,0x1806a0,0x80,0x0,0x1806a0,0x0,0x600,0x600,0x180680,0x20,0x0,0x0,0x180680,0x0,0x0,0x0,0x0,0x0,0x0,0x180680,0x80,0x7fe00,0x180600,0x0,0x0,0x0,0xffe00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,};
   }
   private static void jj_la1_init_8() {
      jj_la1_8 = new int[] {0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,};
   }
   private static void jj_la1_init_9() {
      jj_la1_9 = new int[] {0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,};
   }
   private static void jj_la1_init_10() {
      jj_la1_10 = new int[] {0x7fffff,0x0,0x7fffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fc000,0x3e0000,0x0,0x400000,0xff800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fff,};
   }
   private static void jj_la1_init_11() {
      jj_la1_11 = new int[] {0x37fffffe,0x0,0x37fffffe,0x0,0x0,0x0,0xc0000000,0x0,0xc0000000,0x0,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x37fffffe,0x80000001,0x1e,0x3c0,0xfc00,0x37ff0000,0x0,0x0,0x0,0x0,0x0,0xc0000000,0x0,0x0,};
   }
   private static void jj_la1_init_12() {
      jj_la1_12 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fffffff,0x80000000,0x0,};
   }
   private static void jj_la1_init_13() {
      jj_la1_13 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,};
   }
   private static void jj_la1_init_14() {
      jj_la1_14 = new int[] {0x3800,0x0,0x3800,0x2800,0x0,0x0,0xc1df,0x0,0x40,0xc19f,0x40,0x0,0x0,0x11d,0xc100,0x0,0x0,0x11f,0x0,0x0,0x0,0x0,0x0,0x0,0x11d,0x11d,0x0,0x0,0x11d,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[11];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MIPSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MIPSParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MIPSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MIPSParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MIPSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MIPSParser(MIPSParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MIPSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[464];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
          if ((jj_la1_10[i] & (1<<j)) != 0) {
            la1tokens[320+j] = true;
          }
          if ((jj_la1_11[i] & (1<<j)) != 0) {
            la1tokens[352+j] = true;
          }
          if ((jj_la1_12[i] & (1<<j)) != 0) {
            la1tokens[384+j] = true;
          }
          if ((jj_la1_13[i] & (1<<j)) != 0) {
            la1tokens[416+j] = true;
          }
          if ((jj_la1_14[i] & (1<<j)) != 0) {
            la1tokens[448+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 464; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 11; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
