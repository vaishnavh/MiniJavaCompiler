/* Generated By:JavaCC: Do not edit this line. MIPSParserTokenManager.java */
import syntaxtree.*;
import java.util.Vector;

/** Token Manager. */
public class MIPSParserTokenManager implements MIPSParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20L) != 0L || (active5 & 0x37fffffe007fc000L) != 0L)
            return 70;
         if ((active6 & 0xffffffff80000000L) != 0L)
         {
            jjmatchedKind = 456;
            return 30;
         }
         if ((active0 & 0x3e00000L) != 0L || (active1 & 0xfffffffffffff000L) != 0L || (active2 & 0xfffffffffffffe1fL) != 0L || (active3 & 0xffffffffffffffffL) != 0L || (active4 & 0xffffffffffffffffL) != 0L || (active5 & 0xc8000001bf803fffL) != 0L || (active6 & 0x7fffffffL) != 0L)
         {
            jjmatchedKind = 456;
            return 71;
         }
         if ((active0 & 0xfffffffffc000000L) != 0L || (active1 & 0xfffL) != 0L || (active2 & 0x1e0L) != 0L || (active5 & 0x40000000L) != 0L)
            return 71;
         return -1;
      case 1:
         if ((active2 & 0x800000000fdffe40L) != 0L || (active3 & 0x7c000101ff011L) != 0L || (active4 & 0x40000000002000L) != 0L || (active5 & 0x8000000000000000L) != 0L || (active6 & 0x7fffffffL) != 0L)
            return 71;
         if ((active0 & 0xfffffffffbe00000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0x7ffffffff020019fL) != 0L || (active3 & 0xfff83fffefe00feeL) != 0L || (active4 & 0xffbfffffffffdfffL) != 0L || (active5 & 0x7fffffffffffffffL) != 0L || (active6 & 0xbfffffff80000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 456;
               jjmatchedPos = 1;
            }
            return 71;
         }
         if ((active6 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 456;
               jjmatchedPos = 1;
            }
            return 34;
         }
         return -1;
      case 2:
         if ((active0 & 0xffffff800be00000L) != 0L || (active1 & 0xff00007ffL) != 0L || (active2 & 0x7ff00083f732698cL) != 0L || (active3 & 0x87e31bffef8c46e9L) != 0L || (active4 & 0xc0b080000003c7ffL) != 0L || (active5 & 0x4000b00L) != 0L || (active6 & 0xffffffff00000000L) != 0L)
            return 71;
         if ((active0 & 0x7ff0000000L) != 0L || (active1 & 0xfffffff00ffff800L) != 0L || (active2 & 0xfff7c08808013L) != 0L || (active3 & 0x781ca40000730916L) != 0L || (active4 & 0x3f4f7ffffffc1800L) != 0L || (active5 & 0x7ffffffffbfff4ffL) != 0L || (active6 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 456;
               jjmatchedPos = 2;
            }
            return 71;
         }
         return -1;
      case 3:
         if ((active0 & 0x7df7f77ef1000000L) != 0L || (active1 & 0xfffff803efffe77fL) != 0L || (active2 & 0xbefff7db0800103L) != 0L || (active3 & 0x1f48929d4a020956L) != 0L || (active4 & 0x3ec0000000008117L) != 0L || (active5 & 0x4884840048400000L) != 0L)
            return 71;
         if ((active0 & 0x100800000L) != 0L || (active1 & 0x7f000001800L) != 0L || (active2 & 0x8008010L) != 0L || (active3 & 0x6014240000710000L) != 0L || (active4 & 0xc10fffffffff1800L) != 0L || (active5 & 0x377b7bffb7bffcffL) != 0L || (active6 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 456;
               jjmatchedPos = 3;
            }
            return 71;
         }
         return -1;
      case 4:
         if ((active0 & 0x5144445520000000L) != 0L || (active1 & 0x210af7e14ee01c44L) != 0L || (active2 & 0x280400028008001L) != 0L || (active3 & 0x6204000800710004L) != 0L || (active4 & 0xc1008000000b1002L) != 0L || (active5 & 0x200e1906100e0800L) != 0L || (active6 & 0x80000000L) != 0L)
            return 71;
         if ((active0 & 0x3000080800000L) != 0L || (active1 & 0x4a00001000000030L) != 0L || (active2 & 0x100000010L) != 0L || (active3 & 0x10240000000000L) != 0L || (active4 & 0x3e8f7ffffff40800L) != 0L || (active5 & 0x177162f9a7b1f4ffL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 456;
               jjmatchedPos = 4;
            }
            return 71;
         }
         return -1;
      case 5:
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x1000000000L) != 0L || (active3 & 0x10240000000000L) != 0L || (active4 & 0xf7ffeefc00000L) != 0L || (active5 & 0x17700080279030ffL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 456;
               jjmatchedPos = 5;
            }
            return 71;
         }
         if ((active0 & 0x3000000800000L) != 0L || (active1 & 0x4a00a00004400030L) != 0L || (active2 & 0x100000010L) != 0L || (active4 & 0x3e80000110340800L) != 0L || (active5 & 0x162798021c400L) != 0L)
            return 71;
         return -1;
      case 6:
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0x1000000020L) != 0L || (active3 & 0x10240000000000L) != 0L || (active4 & 0x7fe0efc00000L) != 0L || (active5 & 0x410008022108087L) != 0L)
            return 71;
         if ((active0 & 0x80000000L) != 0L || (active4 & 0xf001e00000000L) != 0L || (active5 & 0x1360000005803078L) != 0L)
         {
            jjmatchedKind = 456;
            jjmatchedPos = 6;
            return 71;
         }
         return -1;
      case 7:
         if ((active0 & 0x80000000L) != 0L || (active4 & 0xf000000000000L) != 0L || (active5 & 0x1000000005003078L) != 0L)
         {
            jjmatchedKind = 456;
            jjmatchedPos = 7;
            return 71;
         }
         if ((active4 & 0x1e00000000L) != 0L || (active5 & 0x360000000800000L) != 0L)
            return 71;
         return -1;
      case 8:
         if ((active0 & 0x80000000L) != 0L || (active4 & 0xf000000000000L) != 0L || (active5 & 0x1000000004003078L) != 0L)
            return 71;
         if ((active5 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 456;
            jjmatchedPos = 8;
            return 71;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5, active6, active7), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 20);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xffffffff80000000L);
      case 37:
         return jjStopAtPos(0, 13);
      case 38:
         return jjStopAtPos(0, 16);
      case 40:
         return jjStopAtPos(0, 7);
      case 41:
         return jjStopAtPos(0, 8);
      case 42:
         return jjStopAtPos(0, 11);
      case 43:
         return jjStopAtPos(0, 9);
      case 44:
         return jjStopAtPos(0, 6);
      case 45:
         return jjStopAtPos(0, 10);
      case 46:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x37fffffe007fc000L, 0x0L);
      case 47:
         return jjStopAtPos(0, 12);
      case 58:
         return jjStopAtPos(0, 4);
      case 59:
         return jjStopAtPos(0, 3);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 94:
         return jjStopAtPos(0, 17);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3e00000L, 0x0L, 0x0L, 0x0L, 0x30000L, 0x8000000000000000L, 0x3cL);
      case 98:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0xfffffffff8000000L, 0xfffL, 0x0L, 0x0L, 0x0L, 0x40000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f000L, 0x0L, 0x0L, 0x7ffffffc0000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfffffffffff80000L, 0x1L, 0x0L, 0x800000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1cL, 0x0L, 0xf000000000000L, 0x800000000000000L, 0x20000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x4000000L);
      case 106:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1c0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x3000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffffe00L, 0x0L, 0x70000000000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fffffff0000000L, 0x0L, 0x7f80000000000000L, 0x10000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7c00000000000000L, 0x0L, 0x8000000000000000L, 0x1ad000003L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000000L, 0x1L, 0x0L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x6L, 0x0L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xff8L, 0x0L, 0x20000fcL, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1ffffffffff000L, 0x0L, 0xf00L, 0x183fc000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xffe0000000000000L, 0x1fL, 0x3000L, 0xc03fc0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xfe0L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000L, 0x3L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3000L, 0x0L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xc000L, 0x0L, 0x0L);
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x4000000000000000L, 0x0L);
      case 124:
         return jjStopAtPos(0, 18);
      case 126:
         return jjStopAtPos(0, 19);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x300001fffc0000L, active5, 0x300L, active6, 0L);
      case 48:
         if ((active6 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(1, 384, 71);
         else if ((active6 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 386, 71);
         else if ((active6 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 390, 71);
         else if ((active6 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 398, 71);
         else if ((active6 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 408, 71);
         break;
      case 49:
         if ((active6 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 385, 71);
         else if ((active6 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 387, 71);
         else if ((active6 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 391, 71);
         else if ((active6 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 399, 71);
         else if ((active6 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 409, 71);
         break;
      case 50:
         if ((active6 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(1, 388, 71);
         else if ((active6 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 392, 71);
         else if ((active6 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 400, 71);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L, active4, 0x20L, active5, 0L, active6, 0L);
      case 51:
         if ((active6 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 389, 71);
         else if ((active6 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 393, 71);
         else if ((active6 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 401, 71);
         break;
      case 52:
         if ((active6 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 394, 71);
         else if ((active6 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 402, 71);
         break;
      case 53:
         if ((active6 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 395, 71);
         else if ((active6 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 403, 71);
         break;
      case 54:
         if ((active6 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 396, 71);
         else if ((active6 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 404, 71);
         break;
      case 55:
         if ((active6 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 397, 71);
         else if ((active6 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 405, 71);
         break;
      case 56:
         if ((active6 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 406, 71);
         else if ((active6 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 412, 71);
         break;
      case 57:
         if ((active6 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 407, 71);
         break;
      case 60:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 97:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 137, 71);
         else if ((active6 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 414;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0xf81000L, active2, 0x3f0000180L, active3, 0x10L, active4, 0x80000000001000L, active5, 0x108201000c000L, active6, 0x7900000000L);
      case 98:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 204, 71);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 269, 71);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0x10000L, active5, 0x2000000020000L, active6, 0L);
      case 99:
         if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x7ff0000000L, active1, 0L, active2, 0L, active3, 0x4000L, active4, 0L, active5, 0x10000000000L, active6, 0L);
      case 100:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00000L, active1, 0xf000000L, active2, 0xe000L, active3, 0x1f0000L, active4, 0x40000000020000L, active5, 0x400100000L, active6, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x78000000000L, active1, 0L, active2, 0xc00000000000000L, active3, 0x60000000e00060L, active4, 0x8000001e00000000L, active5, 0x4004848002000004L, active6, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xe000L, active2, 0x7c0000000cL, active3, 0x80L, active4, 0L, active5, 0x8600000200000L, active6, 0x4000000000000000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x1fff80000000000L, active1, 0L, active2, 0L, active3, 0x78000000f000000L, active4, 0L, active5, 0x70004000000000L, active6, 0x800000000000000L);
      case 104:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 220, 71);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0L, active4, 0L, active5, 0x40000L, active6, 0L);
      case 105:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 146, 71);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3f0000000L, active2, 0x8000000000L, active3, 0L, active4, 0x800000000000L, active5, 0L, active6, 0L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x600000000000000L);
      case 108:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xfe00000000000000L, active1, 0xc0000007fL, active2, 0x100010L, active3, 0xf800001fe0000000L, active4, 0xf0000000003c7L, active5, 0x980020000000000L, active6, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xfff000000000L, active2, 0L, active3, 0x100L, active4, 0L, active5, 0x100000000003L, active6, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0x3000000000780L, active2, 0L, active3, 0x2000000000L, active4, 0x18L, active5, 0x200000000000000L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x70001f0000000000L, active3, 0x600L, active4, 0x1f0000000000c000L, active5, 0x4000001ed800078L, active6, 0L);
      case 112:
         if ((active6 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 410, 71);
         else if ((active6 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 411, 71);
         else if ((active6 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 413, 71);
         break;
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400L, active6, 0L);
      case 114:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 134, 71);
         else if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7c000000000800L, active2, 0x2L, active3, 0x3c000000007L, active4, 0L, active5, 0x800003000L, active6, 0x8000000000000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xff80000000000000L, active2, 0x600000000001L, active3, 0x800L, active4, 0x2000000000000c00L, active5, 0x1000410080L, active6, 0x307f800000000000L);
      case 116:
         if ((active5 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 383, 71);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x70000L, active2, 0xf800000000000L, active3, 0x40000000000L, active4, 0L, active5, 0x200000000L, active6, 0x1807f8000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x3f0000000200000L, active3, 0x380000000000L, active4, 0x4000000000000000L, active5, 0x800L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x7fe000000000L, active5, 0x3000000000000000L, active6, 0x600000000L);
      case 119:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xf800000L, active3, 0x7800000000000L, active4, 0L, active5, 0x80000L, active6, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x18000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 122:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5, active6, 0L);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 48:
         if ((active6 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 417, 71);
         else if ((active6 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 419, 71);
         else if ((active6 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 423, 71);
         else if ((active6 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 431, 71);
         else if ((active6 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 441, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0xf0000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 49:
         if ((active6 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 418, 71);
         else if ((active6 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 420, 71);
         else if ((active6 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 424, 71);
         else if ((active6 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 432, 71);
         else if ((active6 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 442, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0x700000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 50:
         if ((active6 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 421, 71);
         else if ((active6 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 425, 71);
         else if ((active6 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 433, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0x7800000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 51:
         if ((active6 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 422, 71);
         else if ((active6 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 426, 71);
         else if ((active6 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 434, 71);
         break;
      case 52:
         if ((active6 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 427, 71);
         else if ((active6 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 435, 71);
         break;
      case 53:
         if ((active6 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 428, 71);
         else if ((active6 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 436, 71);
         break;
      case 54:
         if ((active6 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 429, 71);
         else if ((active6 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 437, 71);
         break;
      case 55:
         if ((active6 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 430, 71);
         else if ((active6 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 438, 71);
         break;
      case 56:
         if ((active6 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 439, 71);
         else if ((active6 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 445, 71);
         break;
      case 57:
         if ((active6 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 440, 71);
         break;
      case 97:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 98, 71);
         else if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 447, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0x48000000000L, active4, 0L, active5, 0x890100408040001L, active6, 0L);
      case 98:
         if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0x7800100000010000L, active4, 0L, active5, 0x80000800L, active6, 0L);
      case 99:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 130, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7f000L, active2, 0x3801c00800000L, active3, 0x800000020000L, active4, 0x40000000000000L, active5, 0x20010000004L, active6, 0L);
      case 100:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 71);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 148, 71);
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 206, 71);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 262, 71);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 266, 71);
         else if ((active4 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 308, 71);
         else if ((active5 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 328, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000L, active1, 0xf00000L, active2, 0x1b0000000L, active3, 0x10L, active4, 0x80000000020000L, active5, 0x1800000000L, active6, 0L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 199, 71);
         else if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 229, 71);
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x7c07f00000000000L, active1, 0x1f000000000f00L, active2, 0x2L, active3, 0x700000042000006L, active4, 0x40010L, active5, 0x1000080200400000L, active6, 0x80000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xe000000000L, active2, 0L, active3, 0L, active4, 0x80000L, active5, 0L, active6, 0L);
      case 103:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0L, active4, 0x8000000000000000L, active5, 0x2000000000000L, active6, 0L);
      case 104:
         if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4002000000000L, active3, 0L, active4, 0x900L, active5, 0L, active6, 0L);
      case 105:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 99, 71);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 149, 71);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 192, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xf000000L, active2, 0L, active3, 0L, active4, 0x1e00001000L, active5, 0x108000000000000L, active6, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x60000000000000L, active6, 0L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 71);
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 141, 71);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 152, 71);
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 201, 71);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 210, 71);
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 240, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x380000000000000L, active2, 0x3e8004000000100L, active3, 0x20100600000L, active4, 0x4000000000300000L, active5, 0x1006000a00000L, active6, 0L);
      case 109:
         if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0L, active5, 0x200120000000L, active6, 0L);
      case 110:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 167, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000L, active4, 0x1c00000L, active5, 0x4840000000000L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x60000000000000L, active2, 0L, active3, 0L, active4, 0xf000006000000L, active5, 0x200010002180000L, active6, 0L);
      case 112:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 188, 71);
         else if ((active6 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 443, 71);
         else if ((active6 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 444, 71);
         else if ((active6 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 446, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400000040010000L, active6, 0L);
      case 113:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 215, 71);
         else if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x70000000000L, active1, 0L, active2, 0L, active3, 0x40000000000000L, active4, 0L, active5, 0x80L, active6, 0L);
      case 114:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 142, 71);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 153, 71);
         else if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 202, 71);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 211, 71);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 241, 71);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 261, 71);
         else if ((active4 & 0x4000L) != 0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7c00000000000000L, active2, 0L, active3, 0L, active4, 0x8000L, active5, 0x6000400004000400L, active6, 0L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 131, 71);
         else if ((active4 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 309, 71);
         else if ((active5 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 329, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10200000000000L, active4, 0x18010000L, active5, 0xc002L, active6, 0L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 190, 71);
         else if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 416, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0x1f0000000000000L, active1, 0x7000000007fL, active2, 0L, active3, 0x1c08000000L, active4, 0x7fe000000007L, active5, 0L, active6, 0L);
      case 117:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 139, 71);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 145, 71);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 154, 71);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 195, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000f80000000000L, active2, 0x600000000011L, active3, 0x900L, active4, 0x20000001e0000000L, active5, 0x3078L, active6, 0L);
      case 118:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3e0000000L, active2, 0x1f0000000000L, active3, 0L, active4, 0x1f00800000000000L, active5, 0x1000000L, active6, 0L);
      case 119:
         if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 265, 71);
         break;
      case 120:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 161, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8008000L, active3, 0x4000000100000L, active4, 0L, active5, 0x8000000000L, active6, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5, active6, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xc100ffe0000b0000L, active5, 0x800L, active6, 0L);
      case 48:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 71);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 71);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 162, 71);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 175, 71);
         break;
      case 49:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 71);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 71);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 151, 71);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 163, 71);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 176, 71);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 209, 71);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 239, 71);
         else if ((active4 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 310, 71);
         break;
      case 50:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 71);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 71);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 164, 71);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 177, 71);
         break;
      case 97:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000800L, active2, 0L, active3, 0L, active4, 0L, active5, 0x220601820810000L, active6, 0L);
      case 98:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 203, 71);
         else if ((active5 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 375, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400000000001L, active3, 0x10000L, active4, 0x2000000000000000L, active5, 0L, active6, 0L);
      case 99:
         if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 243, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x7e000000000L, active2, 0x8008000L, active3, 0x14000000100000L, active4, 0L, active5, 0xc000L, active6, 0L);
      case 100:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 196, 71);
         else if ((active5 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 367;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1040e00000L, active2, 0x120000000L, active3, 0L, active4, 0x80000000000000L, active5, 0x4000000000001L, active6, 0L);
      case 101:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 168, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x28100000L, active5, 0x2000000004000000L, active6, 0L);
      case 102:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1120000000L, active1, 0L, active2, 0L, active3, 0x4L, active4, 0x200000010000000L, active5, 0L, active6, 0L);
      case 103:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 379, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0x1c00000L, active5, 0L, active6, 0L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 165, 71);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 178, 71);
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 246, 71);
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x1L) != 0L)
         {
            jjmatchedKind = 256;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 260, 71);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 271, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000800000000L, active4, 0x2L, active5, 0x1002000000004L, active6, 0L);
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 71);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 71);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 71);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 71);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 71);
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 117, 71);
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 200, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x6300f00000000000L, active2, 0L, active3, 0L, active4, 0x1ec6000000L, active5, 0x18000000040000L, active6, 0L);
      case 109:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000000000L, active6, 0L);
      case 110:
         if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000L, active4, 0x400000100000000L, active5, 0x2080000003078L, active6, 0L);
      case 111:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 166, 71);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 179, 71);
         else if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 382, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L, active2, 0x80000000000000L, active3, 0L, active4, 0xf000000000000L, active5, 0x24181200000L, active6, 0L);
      case 112:
         if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 251, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000L, active5, 0L, active6, 0L);
      case 114:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 71);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 136, 71);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 252, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1040000012080080L, active6, 0x80000000L);
      case 115:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0x600000L, active4, 0L, active5, 0x100000000000L, active6, 0L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 71);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 129, 71);
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 342, 71);
         else if ((active5 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 347, 71);
         else if ((active5 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 350, 71);
         else if ((active5 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 362, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0x4480000000L, active1, 0L, active2, 0x200000000000000L, active3, 0L, active4, 0x800000000201000L, active5, 0x400008400020400L, active6, 0L);
      case 117:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 71);
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 71);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 159, 71);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 181, 71);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 187, 71);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 198, 71);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 217, 71);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 219, 71);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 222, 71);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 228, 71);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 236, 71);
         else if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 250, 71);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 258, 71);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 264, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0x1040400000000000L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0x800L, active5, 0x100002L, active6, 0L);
      case 118:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 224, 71);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 231, 71);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 233, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xe000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000000000000L, active6, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x6000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000L, active6, 0L);
      case 122:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4107040000000000L, active1, 0x470L, active2, 0L, active3, 0L, active4, 0x1000000000000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5, active6, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5, active6, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3e80001f10340000L, active5, 0x400L, active6, 0L);
      case 48:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 71);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 71);
         break;
      case 49:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 71);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 71);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 143, 71);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 155, 71);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 212, 71);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 242, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 50:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 71);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 71);
         break;
      case 51:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4a00000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 97:
         if ((active5 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 354, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000000L, active1, 0x30L, active2, 0L, active3, 0x10000000000000L, active4, 0L, active5, 0x1000000200000L, active6, 0L);
      case 98:
         if ((active5 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 369, 71);
         else if ((active5 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 370, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000100002L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20013000L, active6, 0L);
      case 100:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 339, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1004000000L, active2, 0L, active3, 0x40000000000L, active4, 0xe000000000L, active5, 0x2000079L, active6, 0L);
      case 101:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 71);
         else if ((active5 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 337, 71);
         else if ((active5 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 371, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000L, active4, 0x42400000L, active5, 0x100008000000000L, active6, 0L);
      case 102:
         if ((active5 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 338, 71);
         break;
      case 103:
         if ((active5 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 381, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000000L, active6, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 253, 71);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 268, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0x400000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x41000000000c000L, active6, 0L);
      case 107:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 71);
         else if ((active5 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 364, 71);
         break;
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 71);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 71);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 71);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 71);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 71);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 71);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 71);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 71);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 71);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 71);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 71);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 71);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 71);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 71);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 71);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 213, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x30000800000L, active5, 0x260000001000000L, active6, 0L);
      case 109:
         if ((active5 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 360, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x420000000000L, active6, 0L);
      case 111:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 348, 71);
         else if ((active6 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 415, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000L, active6, 0L);
      case 112:
         if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 208, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000004L, active6, 0L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x28000000L, active5, 0L, active6, 0L);
      case 114:
         if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 214, 71);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 254, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xf000000000000L, active5, 0L, active6, 0L);
      case 115:
         if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 272, 71);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 273, 71);
         else if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 275, 71);
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 303, 71);
         else if ((active4 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 312, 71);
         else if ((active4 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 318, 71);
         else if ((active4 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 319, 71);
         else if ((active5 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 331, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1c0000000800L, active5, 0x1000200000000000L, active6, 0L);
      case 116:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 353, 71);
         else if ((active5 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 363, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L, active4, 0x85000000L, active5, 0x1800800080L, active6, 0L);
      case 117:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 71);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 71);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 71);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 71);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 113, 71);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 71);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 128, 71);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 157, 71);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 174, 71);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 183, 71);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 185, 71);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 227, 71);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 249, 71);
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 257, 71);
         break;
      case 118:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 71);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000000L, active6, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x600000000000L, active5, 0L, active6, 0L);
      case 120:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 194, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5, active6, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5, 0L, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xf7fe0efc00000L, active5, 0x30ffL);
      case 49:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 50:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 71);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 71);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 126, 71);
         break;
      case 54:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 160, 71);
         break;
      case 97:
         if ((active5 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 355, 71);
         else if ((active5 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 356, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0x40000000000L, active4, 0L, active5, 0L);
      case 100:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 132, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000000000000L);
      case 101:
         if ((active5 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 336, 71);
         else if ((active5 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 352, 71);
         else if ((active5 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 366, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000L);
      case 105:
         if ((active5 & 0x4000L) != 0L)
         {
            jjmatchedKind = 334;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x240000000808000L);
      case 107:
         if ((active5 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 365, 71);
         break;
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 358, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0x20L, active2, 0L, active3, 0x10000000000000L, active4, 0x600000000L, active5, 0x100000L);
      case 109:
         if ((active5 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 361, 71);
         break;
      case 110:
         if ((active5 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 357, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000L, active4, 0L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400000000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100008024000000L);
      case 115:
         if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 274, 71);
         else if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 276, 71);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 277, 71);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 284, 71);
         else if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 288, 71);
         else if ((active4 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 311, 71);
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 313, 71);
         else if ((active4 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 314, 71);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 315, 71);
         else if ((active4 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 316, 71);
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 317, 71);
         else if ((active5 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 330, 71);
         else if ((active5 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 368, 71);
         break;
      case 116:
         if ((active5 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 341, 71);
         else if ((active5 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 351, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000000L);
      case 117:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 71);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 71);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 71);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 71);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 71);
         break;
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000000000000L);
      case 119:
         if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 267, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1800000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5, 0L, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L, active3, active4, active5, 0L, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x1e00000000L, active5, 0L);
      case 54:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 100, 71);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x1200000000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 100:
         if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 237, 71);
         else if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 296, 71);
         else if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 298, 71);
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 301, 71);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x4000000L);
      case 101:
         if ((active5 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 340, 71);
         else if ((active5 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 372, 71);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x120000000000000L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 71);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 71);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 244, 71);
         else if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 293, 71);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 299, 71);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x3000000000000L, active5, 0x803018L);
      case 110:
         if ((active5 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 359, 71);
         else if ((active5 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 378, 71);
         break;
      case 111:
         if ((active5 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 349, 71);
         break;
      case 114:
         if ((active5 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 345, 71);
         break;
      case 115:
         if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 278, 71);
         else if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 279, 71);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 280, 71);
         else if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 281, 71);
         else if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 282, 71);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 283, 71);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 285, 71);
         else if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 286, 71);
         else if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 287, 71);
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 294, 71);
         else if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 297, 71);
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 302, 71);
         else if ((active5 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 320, 71);
         else if ((active5 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 321, 71);
         else if ((active5 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 322, 71);
         else if ((active5 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 327, 71);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x1000000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x40000000000000L);
      case 119:
         if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 295, 71);
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 300, 71);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active3, 0L, active4, 0xc000000000000L, active5, 0x60L);
      case 121:
         if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 234, 71);
         break;
      case 122:
         if ((active5 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 335, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L, active3, active4, active5, 0L, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L, old3, old4, old5, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, 0L, 0L, active4, active5, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active4, 0xf000000000000L, active5, 0x3078L);
      case 49:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active4, 0L, active5, 0L);
      case 100:
         if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 289, 71);
         else if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 291, 71);
         break;
      case 101:
         if ((active5 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 343, 71);
         else if ((active5 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 374, 71);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active4, 0L, active5, 0x4000000L);
      case 102:
         if ((active5 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 373, 71);
         break;
      case 103:
         if ((active5 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 376, 71);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active4, 0L, active5, 0x1000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active4, 0L, active5, 0x1000000000000000L);
      case 115:
         if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 290, 71);
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 292, 71);
         else if ((active5 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 377, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, 0L, 0L, active4, active5, 0L, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(6, old0, 0L, 0L, 0L, old4, old5, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L, 0L, active4, active5, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 304, 71);
         else if ((active4 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 306, 71);
         else if ((active5 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 323, 71);
         else if ((active5 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 325, 71);
         else if ((active5 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 332, 71);
         break;
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 71);
         break;
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active4, 0L, active5, 0x1000000L);
      case 112:
         if ((active5 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 380, 71);
         break;
      case 114:
         if ((active5 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 346, 71);
         break;
      case 115:
         if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 305, 71);
         else if ((active4 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 307, 71);
         else if ((active5 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 324, 71);
         else if ((active5 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 326, 71);
         else if ((active5 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 333, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L, 0L, active4, active5, 0L, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L, 0L, old4, old5, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, 0L, 0L, 0L, 0L, active5, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active5 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 344, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, 0L, 0L, 0L, 0L, active5, 0L, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 70;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 34:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  else if (curChar == 61)
                  {
                     if (kind > 460)
                        kind = 460;
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 459)
                        kind = 459;
                  }
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  if ((0x3ff401000000000L & l) != 0L)
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAdd(63);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 455)
                        kind = 455;
                     jjCheckNAdd(35);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 455)
                        kind = 455;
                  }
                  break;
               case 71:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  else if (curChar == 61)
                  {
                     if (kind > 460)
                        kind = 460;
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 459)
                        kind = 459;
                  }
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  if ((0x3ff401000000000L & l) != 0L)
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAdd(63);
                  }
                  break;
               case 30:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  else if (curChar == 61)
                  {
                     if (kind > 460)
                        kind = 460;
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 459)
                        kind = 459;
                  }
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  if ((0x3ff401000000000L & l) != 0L)
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAdd(63);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 454)
                        kind = 454;
                     jjCheckNAdd(31);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 454)
                        kind = 454;
                  }
                  break;
               case 70:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  else if (curChar == 61)
                  {
                     if (kind > 460)
                        kind = 460;
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 459)
                        kind = 459;
                  }
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  if ((0x3ff401000000000L & l) != 0L)
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAdd(63);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 449)
                        kind = 449;
                     jjCheckNAddTwoStates(7, 8);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x401000000000L & l) != 0L)
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAddStates(10, 16);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(17, 19);
                  else if (curChar == 39)
                     jjAddStates(20, 21);
                  else if (curChar == 35)
                     jjCheckNAddStates(22, 24);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 448)
                        kind = 448;
                     jjCheckNAddStates(25, 32);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 448)
                        kind = 448;
                     jjCheckNAddStates(33, 38);
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  if (curChar == 36)
                     jjAddStates(39, 40);
                  break;
               case 1:
                  if (curChar == 35)
                     jjCheckNAddStates(22, 24);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 449)
                     kind = 449;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 449)
                     kind = 449;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 39)
                     jjAddStates(20, 21);
                  break;
               case 12:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if (curChar == 39 && kind > 452)
                     kind = 452;
                  break;
               case 15:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 13);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 18:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 20:
                  if (curChar == 34)
                     jjCheckNAddStates(17, 19);
                  break;
               case 21:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 23:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 24:
                  if (curChar == 34 && kind > 453)
                     kind = 453;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(41, 44);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 27:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 29:
                  if (curChar == 36)
                     jjAddStates(39, 40);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 454)
                     kind = 454;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if (curChar == 48 && kind > 454)
                     kind = 454;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 455)
                     kind = 455;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if (curChar == 48 && kind > 455)
                     kind = 455;
                  break;
               case 37:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar != 46)
                     break;
                  if (kind > 449)
                     kind = 449;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 449)
                     kind = 449;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 449)
                     kind = 449;
                  jjCheckNAdd(44);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 449)
                     kind = 449;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 448)
                     kind = 448;
                  jjCheckNAddStates(25, 32);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 448)
                     kind = 448;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 52:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar == 58 && kind > 461)
                     kind = 461;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
                  if (curChar != 48)
                     break;
                  if (kind > 448)
                     kind = 448;
                  jjCheckNAddStates(33, 38);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 450)
                     kind = 450;
                  jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 61:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 451)
                     kind = 451;
                  jjCheckNAdd(61);
                  break;
               case 62:
                  if ((0x401000000000L & l) == 0L)
                     break;
                  if (kind > 456)
                     kind = 456;
                  jjCheckNAddStates(10, 16);
                  break;
               case 63:
                  if ((0x3ff401000000000L & l) == 0L)
                     break;
                  if (kind > 456)
                     kind = 456;
                  jjCheckNAdd(63);
                  break;
               case 64:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 65:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 66:
                  if (curChar == 58 && kind > 459)
                     kind = 459;
                  break;
               case 67:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 68:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar == 61 && kind > 460)
                     kind = 460;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAdd(63);
                  }
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAdd(63);
                  }
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAdd(63);
                  }
                  if (curChar == 102)
                     jjAddStates(48, 49);
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAdd(63);
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 456)
                     kind = 456;
                  jjCheckNAddStates(10, 16);
                  break;
               case 2:
                  jjAddStates(22, 24);
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(52, 54);
                  break;
               case 15:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 22:
                  if (curChar == 92)
                     jjAddStates(55, 57);
                  break;
               case 23:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 33:
                  if (curChar == 102)
                     jjAddStates(48, 49);
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 46:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 55:
                  if (curChar == 98 && kind > 462)
                     kind = 462;
                  break;
               case 57:
                  if (curChar == 102 && kind > 463)
                     kind = 463;
                  break;
               case 59:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 450)
                     kind = 450;
                  jjCheckNAdd(60);
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 456)
                     kind = 456;
                  jjCheckNAdd(63);
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 34:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAdd(63);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 71:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAdd(63);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 30:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAdd(63);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 70:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 456)
                        kind = 456;
                     jjCheckNAdd(63);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 456)
                     kind = 456;
                  jjCheckNAddStates(10, 16);
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 24);
                  break;
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(17, 19);
                  break;
               case 63:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 456)
                     kind = 456;
                  jjCheckNAdd(63);
                  break;
               case 64:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  break;
               case 67:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 70 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   67, 68, 69, 64, 65, 66, 39, 40, 45, 46, 63, 64, 65, 66, 67, 68, 
   69, 21, 22, 24, 12, 14, 2, 3, 5, 50, 51, 52, 53, 54, 55, 56, 
   57, 59, 61, 52, 53, 55, 57, 30, 32, 21, 22, 26, 24, 51, 52, 53, 
   34, 36, 9, 10, 15, 16, 18, 23, 25, 27, 43, 44, 47, 48, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\73", "\72", "\56", "\54", "\50", "\51", "\53", "\55", "\52", 
"\57", "\45", "\74\74", "\76\76", "\46", "\136", "\174", "\176", "\41", 
"\141\142\163", "\141\144\144", "\141\144\144\143\151\165", "\141\144\144\165", 
"\141\156\144", "\142", "\142\141\154", "\142\143\60\146", "\142\143\60\146\154", 
"\142\143\60\164", "\142\143\60\164\154\142\143\61\146", "\142\143\61\146\154", 
"\142\143\61\164", "\142\143\61\164\154", "\142\143\62\146", "\142\143\62\146\154", 
"\142\143\62\164", "\142\143\62\164\154", "\142\145\161", "\142\145\161\154", "\142\145\161\172", 
"\142\145\161\172\154", "\142\147\145", "\142\147\145\154", "\142\147\145\165", 
"\142\147\145\165\154", "\142\147\145\172", "\142\147\145\172\141\154", 
"\142\147\145\172\141\154\154", "\142\147\145\172\154", "\142\147\164", "\142\147\164\154", 
"\142\147\164\165", "\142\147\164\165\154", "\142\147\164\172", "\142\147\164\172\154", 
"\142\154\145", "\142\154\145\154", "\142\154\145\165", "\142\154\145\165\154", 
"\142\154\145\172", "\142\154\145\172\154", "\142\154\164", "\142\154\164\154", 
"\142\154\164\165", "\142\154\164\165\154", "\142\154\164\172", "\142\154\164\172\141\154", 
"\142\154\164\172\141\154\154", "\142\154\164\172\154", "\142\156\145", "\142\156\145\154", 
"\142\156\145\172", "\142\156\145\172\154", "\142\162\145\141\153", "\143\141\143\150\145", 
"\143\146\143\60", "\143\146\143\61", "\143\146\143\62", "\143\164\143\60", "\143\164\143\61", 
"\143\164\143\62", "\144\141\142\163", "\144\141\144\144", "\144\141\144\144\151", 
"\144\141\144\144\151\165", "\144\141\144\144\165", "\144\144\151\166", "\144\144\151\166\144", 
"\144\144\151\166\144\165", "\144\144\151\166\165", "\144\151\166", "\144\151\166\144", 
"\144\151\166\144\165", "\144\151\166\157", "\144\151\166\157\165", "\144\151\166\165", 
"\144\154\141", "\144\154\151", "\144\155\141\144\144\61\66", "\144\155\146\143\60", 
"\144\155\146\143\61", "\144\155\146\143\62", "\144\155\164\143\60", "\144\155\164\143\61", 
"\144\155\164\143\62", "\144\155\165\154", "\144\155\165\154\157", "\144\155\165\154\157\165", 
"\144\155\165\154\164", "\144\155\165\154\164\165", "\144\156\145\147", "\144\156\145\147\165", 
"\144\162\145\155", "\144\162\145\155\165", "\144\162\145\164", "\144\162\157\154", 
"\144\162\157\162", "\144\163\154\154", "\144\163\154\154\166", "\144\163\154\154\63\62", 
"\144\163\162\141", "\144\163\162\141\63\62", "\144\163\162\154", "\144\163\162\154\166", 
"\144\163\162\154\63\62", "\144\163\165\142", "\144\163\165\142\165", "\145\162\145\164", 
"\146\146\143", "\146\146\163", "\146\154\165\163\150\144", "\152", "\152\162", 
"\152\141\154", "\152\141\154\162", "\154\141", "\154\142", "\154\142\165", "\154\144", 
"\154\144\154", "\154\144\162", "\154\144\170\143\61", "\154\150", "\154\150\165", "\154\151", 
"\154\154", "\154\154\144", "\154\165\151", "\154\167", "\154\167\143\61", "\154\167\154", 
"\154\167\162", "\154\167\165", "\154\167\170\143\61", "\155\141\144\144", 
"\155\141\144\144\165", "\155\141\144", "\155\141\144\165", "\155\141\144\144\61\66", "\155\141\170", 
"\155\146\143\60", "\155\146\143\61", "\155\146\143\62", "\155\146\150\151", "\155\146\154\157", 
"\155\151\156", "\155\157\166\145", "\155\157\166\146", "\155\157\166\156", 
"\155\157\166\164", "\155\157\166\172", "\155\163\165\142", "\155\163\165\142\165", 
"\155\164\143\60", "\155\164\143\61", "\155\164\143\62", "\155\164\150\151", "\155\164\154\157", 
"\155\165\154", "\155\165\154\165", "\155\165\154\157", "\155\165\154\157\165", 
"\155\165\154\164", "\155\165\154\164\165", "\156\145\147", "\156\145\147\165", "\156\157\160", 
"\156\157\162", "\156\157\164", "\157\162", "\157\162\151", "\160\162\145\146", 
"\160\162\145\146\170", "\162\62\165", "\162\141\144\144", "\162\145\155", "\162\145\155\165", 
"\162\146\145", "\162\155\165\154", "\162\157\154", "\162\157\162", "\162\163\165\142", 
"\163\142", "\163\143", "\163\143\144", "\163\144", "\163\144\142\142\160", 
"\163\144\143\61", "\163\144\154", "\163\144\162", "\163\144\170\143\61", "\163\145\154\163\154", 
"\163\145\154\163\162", "\163\145\161", "\163\147\145", "\163\147\145\165", "\163\147\164", 
"\163\147\164\165", "\163\150", "\163\154\145", "\163\154\145\165", "\163\154\154", 
"\163\154\154\166", "\163\154\164", "\163\154\164\151", "\163\154\164\151\165", 
"\163\154\164\165", "\163\156\145", "\163\162\141", "\163\162\141\166", "\163\162\154", 
"\163\162\154\166", "\163\164\141\156\144\142\171", "\163\165\142", "\163\165\142\165", 
"\163\165\163\160\145\156\144", "\163\167", "\163\167\143\61", "\163\167\154", "\163\167\162", 
"\163\167\170\143\61", "\163\171\156\143", "\163\171\163\143\141\154\154", "\164\145\161", 
"\164\145\161\151", "\164\147\145", "\164\147\145\151", "\164\147\145\151\165", 
"\164\147\145\165", "\164\154\142\160", "\164\154\142\162", "\164\154\142\167\151", 
"\164\154\142\167\162", "\164\154\164", "\164\154\164\151", "\164\154\164\151\165", 
"\164\154\164\165", "\164\156\145", "\164\156\145\151", "\165\62\162", "\165\154\144", 
"\165\154\150", "\165\154\150\165", "\165\154\167", "\165\163\144", 
"\165\163\150\165\163\167", "\167\141\151\164\151", "\167\142", "\170\157\162", "\170\157\162\151", 
"\141\142\163\56\163", "\141\144\144\56\163", "\143\56\145\161\56\163", "\143\56\146\56\163", 
"\143\56\154\145\56\163", "\143\56\154\164\56\163", "\143\56\156\147\145\56\163", 
"\143\56\156\147\154\56\163", "\143\56\156\147\164\56\163", "\143\56\157\154\145\56\163", 
"\143\56\157\154\164\56\163", "\143\56\163\145\161\56\163", "\143\56\163\146\56\163", 
"\143\56\165\145\161\56\163", "\143\56\165\154\145\56\163", "\143\56\165\154\164\56\163", 
"\143\56\165\156\56\163", "\143\145\151\154\56\154\56\144", "\143\145\151\154\56\154\56\163", 
"\143\145\151\154\56\167\56\144", "\143\145\151\154\56\167\56\163", "\143\166\164\56\144\56\154", 
"\143\166\164\56\144\56\163", "\143\166\164\56\144\56\167", "\143\166\164\56\154\56\144", 
"\143\166\164\56\154\56\163", "\143\166\164\56\163\56\144", "\143\166\164\56\163\56\154", 
"\143\166\164\56\163\56\167", "\143\166\164\56\167\56\144", "\143\166\164\56\167\56\163", 
"\144\151\166\56\163", "\146\154\157\157\162\56\154\56\144", "\146\154\157\157\162\56\154\56\163", 
"\146\154\157\157\162\56\167\56\144", "\146\154\157\157\162\56\167\56\163", "\154\56\144", "\154\56\163", 
"\154\144\143\61", "\155\141\144\144\56\163", "\155\157\166\56\163", "\155\157\166\146\56\163", 
"\155\157\166\156\56\163", "\155\157\166\164\56\163", "\155\157\166\172\56\163", 
"\155\163\165\142\56\163", "\155\165\154\56\163", "\156\145\147\56\163", "\156\155\141\144\144\56\163", 
"\156\155\163\165\142\56\163", "\162\145\143\151\160\56\163", "\162\157\165\156\144\56\154\56\144", 
"\162\157\165\156\144\56\154\56\163", "\162\157\165\156\144\56\167\56\144", "\162\157\165\156\144\56\167\56\163", 
"\162\163\161\162\164\56\163", "\163\56\144", "\163\56\163", "\163\161\162\164\56\163", 
"\163\165\142\56\163", "\164\162\165\156\143\56\154\56\144", "\164\162\165\156\143\56\154\56\163", 
"\56\141\163\143\151\151", "\56\141\163\143\151\151\172", "\56\163\160\141\143\145", 
"\56\142\171\164\145", "\56\150\141\154\146", "\56\167\157\162\144", "\56\144\157\165\142\154\145", 
"\56\146\154\157\141\164", "\56\163\145\164", "\166\157\154\141\164\151\154\145", 
"\156\157\166\157\154\141\164\151\154\145", "\162\145\157\162\144\145\162", "\156\157\162\145\157\162\144\145\162", 
"\156\157\141\164", "\155\141\143\162\157", "\156\157\155\141\143\162\157", "\142\157\160\164", 
"\156\157\142\157\160\164", "\156\157\155\157\166\145", "\56\164\145\170\164", "\56\144\141\164\141", 
"\56\162\144\141\164\141", "\56\163\144\141\164\141", "\56\141\154\151\147\156", 
"\56\147\154\157\142\154", "\56\145\170\164\145\162\156", "\56\143\157\155\155", 
"\56\154\143\157\155\155", "\56\145\156\164", "\56\141\145\156\164", "\56\155\141\163\153", 
"\56\146\155\141\163\153", "\56\146\162\141\155\145", "\56\145\156\144", "\56\141\154\151\141\163", 
"\56\142\147\156\142", "\56\145\156\144\142", "\56\146\151\154\145", "\56\147\141\154\151\166\145", 
"\56\147\152\141\154\144\145\146", "\56\147\152\162\154\151\166\145", "\56\154\141\142", 
"\56\154\151\166\145\162\145\147", "\56\156\157\141\154\151\141\163", "\56\157\160\164\151\157\156", 
"\146\154\141\147", "\56\166\145\162\163\164\141\155\160", "\56\166\162\145\147", 
"\172\145\162\157", "\141\164", "\166\60", "\166\61", "\141\60", "\141\61", "\141\62", "\141\63", 
"\164\60", "\164\61", "\164\62", "\164\63", "\164\64", "\164\65", "\164\66", "\164\67", 
"\163\60", "\163\61", "\163\62", "\163\63", "\163\64", "\163\65", "\163\66", "\163\67", 
"\164\70", "\164\71", "\153\60", "\153\61", "\147\160", "\163\160", "\163\70", 
"\146\160", "\162\141", "\44\172\145\162\157", "\44\141\164", "\44\166\60", "\44\166\61", 
"\44\141\60", "\44\141\61", "\44\141\62", "\44\141\63", "\44\164\60", "\44\164\61", 
"\44\164\62", "\44\164\63", "\44\164\64", "\44\164\65", "\44\164\66", "\44\164\67", 
"\44\163\60", "\44\163\61", "\44\163\62", "\44\163\63", "\44\163\64", "\44\163\65", 
"\44\163\66", "\44\163\67", "\44\164\70", "\44\164\71", "\44\153\60", "\44\153\61", 
"\44\147\160", "\44\163\160", "\44\163\70", "\44\146\160", "\44\162\141", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffff9L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xf9ffL, 
};
static final long[] jjtoSkip = {
   0x6L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x4L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 0x0L, 
};
static protected JavaCharStream input_stream;
static private final int[] jjrounds = new int[70];
static private final int[] jjstateSet = new int[140];
static protected char curChar;
/** Constructor. */
public MIPSParserTokenManager(JavaCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public MIPSParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 70; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
