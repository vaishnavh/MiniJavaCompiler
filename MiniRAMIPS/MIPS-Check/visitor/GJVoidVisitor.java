//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ void visitors must implement this interface.
 */

public interface GJVoidVisitor<A> {

   //
   // GJ void Auto class visitors
   //

   public void visit(NodeList n, A argu);
   public void visit(NodeListOptional n, A argu);
   public void visit(NodeOptional n, A argu);
   public void visit(NodeSequence n, A argu);
   public void visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> StmtList()
    * f1 -> <EOF>
    */
   public void visit(Goal n, A argu);

   /**
    * f0 -> Stmt()
    * f1 -> [ StmtList() ]
    */
   public void visit(StmtList n, A argu);

   /**
    * f0 -> Stat()
    * f1 -> [ ";" ]
    */
   public void visit(Stmt n, A argu);

   /**
    * f0 -> Label() Instruction()
    *       | Label() Data()
    *       | Label()
    *       | Instruction()
    *       | Data()
    *       | SymDef()
    *       | Directive()
    */
   public void visit(Stat n, A argu);

   /**
    * f0 -> <IDENTIFIER_COLON>
    *       | <DECIMAL_COLON>
    */
   public void visit(Label n, A argu);

   /**
    * f0 -> OpCode()
    * f1 -> [ Operand() [ "," Operand() [ "," Operand() ] ] ]
    */
   public void visit(Instruction n, A argu);

   /**
    * f0 -> Register()
    *       | "(" Register() ")"
    *       | FloatRegister()
    *       | AddrImmed() [ "(" Register() ")" ]
    *       | <FLOAT>
    */
   public void visit(Operand n, A argu);

   /**
    * f0 -> <DOLLAR_DECIMAL>
    *       | RegisterName()
    *       | DollarRegisterName()
    */
   public void visit(Register n, A argu);

   /**
    * f0 -> <DOLLAR_F_DECIMAL>
    */
   public void visit(FloatRegister n, A argu);

   /**
    * f0 -> LabelExpr() [ ( "+" | "-" ) Expr() ]
    *       | Expr()
    */
   public void visit(AddrImmed n, A argu);

   /**
    * f0 -> LabelRef()
    * f1 -> [ "-" LabelRef() ]
    */
   public void visit(LabelExpr n, A argu);

   /**
    * f0 -> <DECIMAL_B>
    *       | <DECIMAL_F>
    *       | <IDENTIFIER>
    *       | "."
    */
   public void visit(LabelRef n, A argu);

   /**
    * f0 -> DataMode() DataList()
    *       | ".ascii" <STRING>
    *       | ".asciiz" <STRING>
    *       | ".space" Expr()
    */
   public void visit(Data n, A argu);

   /**
    * f0 -> ".byte"
    *       | ".half"
    *       | ".word"
    *       | ".float"
    *       | ".double"
    */
   public void visit(DataMode n, A argu);

   /**
    * f0 -> DataExpr()
    * f1 -> ( "," DataList() )*
    */
   public void visit(DataList n, A argu);

   /**
    * f0 -> Expr() [ ":" Expr() ]
    *       | <FLOAT> [ ":" <FLOAT> ]
    */
   public void visit(DataExpr n, A argu);

   /**
    * f0 -> <IDENTIFIER_EQUAL>
    * f1 -> Expr()
    */
   public void visit(SymDef n, A argu);

   /**
    * f0 -> SetDir()
    *       | SegmentDir()
    *       | AlignDir()
    *       | SymbolDir()
    *       | BlockDir()
    *       | CompilerDir()
    */
   public void visit(Directive n, A argu);

   /**
    * f0 -> ".set"
    * f1 -> SetDirArgs()
    */
   public void visit(SetDir n, A argu);

   /**
    * f0 -> "volatile"
    *       | "novolatile"
    *       | "reorder"
    *       | "noreorder"
    *       | "at"
    *       | "noat"
    *       | "macro"
    *       | "nomacro"
    *       | "bopt"
    *       | "nobopt"
    *       | "move"
    *       | "nomove"
    */
   public void visit(SetDirArgs n, A argu);

   /**
    * f0 -> ".text"
    *       | ".data"
    *       | ".rdata"
    *       | ".sdata"
    */
   public void visit(SegmentDir n, A argu);

   /**
    * f0 -> ".align"
    * f1 -> Expr()
    */
   public void visit(AlignDir n, A argu);

   /**
    * f0 -> ".globl" <IDENTIFIER>
    *       | ".extern" <IDENTIFIER> "," Constant()
    *       | ".comm" <IDENTIFIER> "," Constant()
    *       | ".lcomm" <IDENTIFIER> "," Constant()
    */
   public void visit(SymbolDir n, A argu);

   /**
    * f0 -> ".ent" <IDENTIFIER> [ "," Constant() ]
    *       | ".aent" <IDENTIFIER> "," Constant()
    *       | ".mask" Expr() "," Expr()
    *       | ".fmask" Expr() "," Expr()
    *       | ".frame" Register() "," Expr() "," Register()
    *       | ".end" [ <IDENTIFIER> ]
    */
   public void visit(BlockDir n, A argu);

   /**
    * f0 -> ".alias" Register() "," Register()
    *       | ".bgnb" Expr()
    *       | ".endb" Expr()
    *       | ".file" Constant() <STRING>
    *       | ".galive"
    *       | ".gjaldef"
    *       | ".gjrlive"
    *       | ".lab" <IDENTIFIER>
    *       | ".livereg" Expr() "," Expr()
    *       | ".noalias" Register() "," Register()
    *       | ".option" "flag"
    *       | ".verstamp" Constant() Constant()
    *       | ".vreg" Expr() "," Expr()
    */
   public void visit(CompilerDir n, A argu);

   /**
    * f0 -> Term()
    * f1 -> Expr_()
    */
   public void visit(Expr n, A argu);

   /**
    * f0 -> ( BinaryOp() Expr() Expr_() )*
    */
   public void visit(Expr_ n, A argu);

   /**
    * f0 -> UnaryOp() Term()
    *       | Primary()
    */
   public void visit(Term n, A argu);

   /**
    * f0 -> Constant()
    *       | "(" Expr() ")"
    */
   public void visit(Primary n, A argu);

   /**
    * f0 -> "*"
    *       | "/"
    *       | "%"
    *       | "+"
    *       | "-"
    *       | "<<"
    *       | ">>"
    *       | "&"
    *       | "^"
    *       | "|"
    */
   public void visit(BinaryOp n, A argu);

   /**
    * f0 -> "+"
    *       | "-"
    *       | "~"
    *       | "!"
    */
   public void visit(UnaryOp n, A argu);

   /**
    * f0 -> <DECIMAL>
    *       | <HEXADECIMAL>
    *       | <OCTAL>
    *       | <CHARACTER>
    *       | <IDENTIFIER>
    */
   public void visit(Constant n, A argu);

   /**
    * f0 -> "zero"
    *       | "at"
    *       | "v0"
    *       | "v1"
    *       | "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "k0"
    *       | "k1"
    *       | "gp"
    *       | "sp"
    *       | "s8"
    *       | "fp"
    *       | "ra"
    */
   public void visit(RegisterName n, A argu);

   /**
    * f0 -> "$zero"
    *       | "$at"
    *       | "$v0"
    *       | "$v1"
    *       | "$a0"
    *       | "$a1"
    *       | "$a2"
    *       | "$a3"
    *       | "$t0"
    *       | "$t1"
    *       | "$t2"
    *       | "$t3"
    *       | "$t4"
    *       | "$t5"
    *       | "$t6"
    *       | "$t7"
    *       | "$s0"
    *       | "$s1"
    *       | "$s2"
    *       | "$s3"
    *       | "$s4"
    *       | "$s5"
    *       | "$s6"
    *       | "$s7"
    *       | "$t8"
    *       | "$t9"
    *       | "$k0"
    *       | "$k1"
    *       | "$gp"
    *       | "$sp"
    *       | "$s8"
    *       | "$fp"
    *       | "$ra"
    */
   public void visit(DollarRegisterName n, A argu);

   /**
    * f0 -> "abs"
    *       | "add"
    *       | "addciu"
    *       | "addu"
    *       | "and"
    *       | "b"
    *       | "bal"
    *       | "bc0f"
    *       | "bc0fl"
    *       | "bc0t"
    *       | "bc0tlbc1f"
    *       | "bc1fl"
    *       | "bc1t"
    *       | "bc1tl"
    *       | "bc2f"
    *       | "bc2fl"
    *       | "bc2t"
    *       | "bc2tl"
    *       | "beq"
    *       | "beql"
    *       | "beqz"
    *       | "beqzl"
    *       | "bge"
    *       | "bgel"
    *       | "bgeu"
    *       | "bgeul"
    *       | "bgez"
    *       | "bgezal"
    *       | "bgezall"
    *       | "bgezl"
    *       | "bgt"
    *       | "bgtl"
    *       | "bgtu"
    *       | "bgtul"
    *       | "bgtz"
    *       | "bgtzl"
    *       | "ble"
    *       | "blel"
    *       | "bleu"
    *       | "bleul"
    *       | "blez"
    *       | "blezl"
    *       | "blt"
    *       | "bltl"
    *       | "bltu"
    *       | "bltul"
    *       | "bltz"
    *       | "bltzal"
    *       | "bltzall"
    *       | "bltzl"
    *       | "bne"
    *       | "bnel"
    *       | "bnez"
    *       | "bnezl"
    *       | "break"
    *       | "cache"
    *       | "cfc0"
    *       | "cfc1"
    *       | "cfc2"
    *       | "ctc0"
    *       | "ctc1"
    *       | "ctc2"
    *       | "dabs"
    *       | "dadd"
    *       | "daddi"
    *       | "daddiu"
    *       | "daddu"
    *       | "ddiv"
    *       | "ddivd"
    *       | "ddivdu"
    *       | "ddivu"
    *       | "div"
    *       | "divd"
    *       | "divdu"
    *       | "divo"
    *       | "divou"
    *       | "divu"
    *       | "dla"
    *       | "dli"
    *       | "dmadd16"
    *       | "dmfc0"
    *       | "dmfc1"
    *       | "dmfc2"
    *       | "dmtc0"
    *       | "dmtc1"
    *       | "dmtc2"
    *       | "dmul"
    *       | "dmulo"
    *       | "dmulou"
    *       | "dmult"
    *       | "dmultu"
    *       | "dneg"
    *       | "dnegu"
    *       | "drem"
    *       | "dremu"
    *       | "dret"
    *       | "drol"
    *       | "dror"
    *       | "dsll"
    *       | "dsllv"
    *       | "dsll32"
    *       | "dsra"
    *       | "dsra32"
    *       | "dsrl"
    *       | "dsrlv"
    *       | "dsrl32"
    *       | "dsub"
    *       | "dsubu"
    *       | "eret"
    *       | "ffc"
    *       | "ffs"
    *       | "flushd"
    *       | "j"
    *       | "jr"
    *       | "jal"
    *       | "jalr"
    *       | "la"
    *       | "lb"
    *       | "lbu"
    *       | "ld"
    *       | "ldl"
    *       | "ldr"
    *       | "ldxc1"
    *       | "lh"
    *       | "lhu"
    *       | "li"
    *       | "ll"
    *       | "lld"
    *       | "lui"
    *       | "lw"
    *       | "lwc1"
    *       | "lwl"
    *       | "lwr"
    *       | "lwu"
    *       | "lwxc1"
    *       | "madd"
    *       | "maddu"
    *       | "mad"
    *       | "madu"
    *       | "madd16"
    *       | "max"
    *       | "mfc0"
    *       | "mfc1"
    *       | "mfc2"
    *       | "mfhi"
    *       | "mflo"
    *       | "min"
    *       | "move"
    *       | "movf"
    *       | "movn"
    *       | "movt"
    *       | "movz"
    *       | "msub"
    *       | "msubu"
    *       | "mtc0"
    *       | "mtc1"
    *       | "mtc2"
    *       | "mthi"
    *       | "mtlo"
    *       | "mul"
    *       | "mulu"
    *       | "mulo"
    *       | "mulou"
    *       | "mult"
    *       | "multu"
    *       | "neg"
    *       | "negu"
    *       | "nop"
    *       | "nor"
    *       | "not"
    *       | "or"
    *       | "ori"
    *       | "pref"
    *       | "prefx"
    *       | "r2u"
    *       | "radd"
    *       | "rem"
    *       | "remu"
    *       | "rfe"
    *       | "rmul"
    *       | "rol"
    *       | "ror"
    *       | "rsub"
    *       | "sb"
    *       | "sc"
    *       | "scd"
    *       | "sd"
    *       | "sdbbp"
    *       | "sdc1"
    *       | "sdl"
    *       | "sdr"
    *       | "sdxc1"
    *       | "selsl"
    *       | "selsr"
    *       | "seq"
    *       | "sge"
    *       | "sgeu"
    *       | "sgt"
    *       | "sgtu"
    *       | "sh"
    *       | "sle"
    *       | "sleu"
    *       | "sll"
    *       | "sllv"
    *       | "slt"
    *       | "slti"
    *       | "sltiu"
    *       | "sltu"
    *       | "sne"
    *       | "sra"
    *       | "srav"
    *       | "srl"
    *       | "srlv"
    *       | "standby"
    *       | "sub"
    *       | "subu"
    *       | "suspend"
    *       | "sw"
    *       | "swc1"
    *       | "swl"
    *       | "swr"
    *       | "swxc1"
    *       | "sync"
    *       | "syscall"
    *       | "teq"
    *       | "teqi"
    *       | "tge"
    *       | "tgei"
    *       | "tgeiu"
    *       | "tgeu"
    *       | "tlbp"
    *       | "tlbr"
    *       | "tlbwi"
    *       | "tlbwr"
    *       | "tlt"
    *       | "tlti"
    *       | "tltiu"
    *       | "tltu"
    *       | "tne"
    *       | "tnei"
    *       | "u2r"
    *       | "uld"
    *       | "ulh"
    *       | "ulhu"
    *       | "ulw"
    *       | "usd"
    *       | "ushusw"
    *       | "waiti"
    *       | "wb"
    *       | "xor"
    *       | "xori"
    *       | "abs.s"
    *       | "add.s"
    *       | "c.eq.s"
    *       | "c.f.s"
    *       | "c.le.s"
    *       | "c.lt.s"
    *       | "c.nge.s"
    *       | "c.ngl.s"
    *       | "c.ngt.s"
    *       | "c.ole.s"
    *       | "c.olt.s"
    *       | "c.seq.s"
    *       | "c.sf.s"
    *       | "c.ueq.s"
    *       | "c.ule.s"
    *       | "c.ult.s"
    *       | "c.un.s"
    *       | "ceil.l.d"
    *       | "ceil.l.s"
    *       | "ceil.w.d"
    *       | "ceil.w.s"
    *       | "cvt.d.l"
    *       | "cvt.d.s"
    *       | "cvt.d.w"
    *       | "cvt.l.d"
    *       | "cvt.l.s"
    *       | "cvt.s.d"
    *       | "cvt.s.l"
    *       | "cvt.s.w"
    *       | "cvt.w.d"
    *       | "cvt.w.s"
    *       | "div.s"
    *       | "floor.l.d"
    *       | "floor.l.s"
    *       | "floor.w.d"
    *       | "floor.w.s"
    *       | "l.d"
    *       | "l.s"
    *       | "ldc1"
    *       | "madd.s"
    *       | "mov.s"
    *       | "movf.s"
    *       | "movn.s"
    *       | "movt.s"
    *       | "movz.s"
    *       | "msub.s"
    *       | "mul.s"
    *       | "neg.s"
    *       | "nmadd.s"
    *       | "nmsub.s"
    *       | "recip.s"
    *       | "round.l.d"
    *       | "round.l.s"
    *       | "round.w.d"
    *       | "round.w.s"
    *       | "rsqrt.s"
    *       | "s.d"
    *       | "s.s"
    *       | "sqrt.s"
    *       | "sub.s"
    *       | "trunc.l.d"
    *       | "trunc.l.s"
    */
   public void visit(OpCode n, A argu);

}

